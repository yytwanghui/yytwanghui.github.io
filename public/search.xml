<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法与数据结构</title>
    <url>/2019/05/08/2019-05-08-01-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于一个算法的分值记录练习</font></center>

<a id="more"></a>
<h2 id="以下代码是一个分值记录的，第一个java是一个记分对象，第二个java是实现的步骤"><a href="#以下代码是一个分值记录的，第一个java是一个记分对象，第二个java是实现的步骤" class="headerlink" title="以下代码是一个分值记录的，第一个java是一个记分对象，第二个java是实现的步骤"></a>以下代码是一个分值记录的，第一个java是一个记分对象，第二个java是实现的步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.scoregame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreObject</span><span class="params">(String name,<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.score=score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ScoreObject&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.scoregame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该类的作用：</span></span><br><span class="line"><span class="comment">在一个数组里记录成绩，如果数组元素未满，就将新的元素添加进去，并排好序</span></span><br><span class="line"><span class="comment">如果数组已经满了，就将大的元素插入，排好序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreGame</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组的大小</span></span><br><span class="line">    <span class="keyword">int</span> capacity=<span class="number">3</span>;</span><br><span class="line">    ScoreObject[] arrScore=<span class="keyword">new</span> ScoreObject[capacity];</span><br><span class="line">    <span class="keyword">int</span> space;   <span class="comment">//记录此时数组中存在对象的数量</span></span><br><span class="line">    <span class="keyword">public</span> ScoreObject[] game(String name,<span class="keyword">int</span> score)&#123;</span><br><span class="line">        <span class="comment">//arrScore=new ScoreObject[capacity];</span></span><br><span class="line">        <span class="comment">//System.out.println(Arrays.toString(arrScore));</span></span><br><span class="line">        ScoreObject scoreObject=<span class="keyword">new</span> ScoreObject(name,score);</span><br><span class="line">        <span class="keyword">if</span> (arrScore[<span class="number">0</span>]==<span class="keyword">null</span>)&#123;</span><br><span class="line">            arrScore[<span class="number">0</span>]=scoreObject;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取space,先将space重新置为0；</span></span><br><span class="line">        space=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrScore.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arrScore[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                ++space;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断数组内的元素是否已经满</span></span><br><span class="line">        <span class="keyword">if</span> (space==capacity)&#123;</span><br><span class="line">            <span class="comment">//其比第一个元素小吗</span></span><br><span class="line">            <span class="keyword">if</span> (scoreObject.getScore()&lt;arrScore[<span class="number">0</span>].getScore())&#123;</span><br><span class="line">                <span class="keyword">return</span> arrScore;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                arrScore[<span class="number">0</span>]=scoreObject;</span><br><span class="line">                <span class="comment">//for (int i=1;i&lt;capacity;i++)&#123;</span></span><br><span class="line">                <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (scoreObject.getScore()&gt;arrScore[i].getScore())&#123;</span><br><span class="line">                        <span class="comment">//交换位置</span></span><br><span class="line">                        arrScore[i-<span class="number">1</span>]=arrScore[i];</span><br><span class="line">                        <span class="comment">//将新的数值插入</span></span><br><span class="line">                        arrScore[i]=scoreObject;</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="comment">//防止索引越界</span></span><br><span class="line">                        <span class="keyword">if</span> (i==capacity)&#123;</span><br><span class="line">                            <span class="keyword">return</span> arrScore;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> arrScore;</span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//判断新加入的分数是否比最后一个数组元素的分数大</span></span><br><span class="line">            <span class="keyword">if</span> (arrScore[space-<span class="number">1</span>].getScore()&lt;scoreObject.getScore())&#123;</span><br><span class="line">                <span class="comment">//如果是，就在该元素后面再添加一个元素</span></span><br><span class="line">                arrScore[space]=scoreObject;</span><br><span class="line">                <span class="keyword">return</span> arrScore;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果新添加的元素比最后一个元素小</span></span><br><span class="line">            <span class="keyword">while</span> (scoreObject.getScore()&lt;arrScore[space-<span class="number">1</span>].getScore())&#123;</span><br><span class="line">                <span class="comment">//将最后一个元素右移</span></span><br><span class="line">                arrScore[space]=arrScore[space-<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//将新添加的元素放到后移后剩下的空格处</span></span><br><span class="line">                arrScore[space-<span class="number">1</span>]=scoreObject;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                --space;</span><br><span class="line">                <span class="comment">//如果到达了最后一个元素，直接返回，防止越界</span></span><br><span class="line">                <span class="keyword">if</span> (space==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> arrScore;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        ScoreGame scoreGame=<span class="keyword">new</span> ScoreGame();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入一个姓名："</span>);</span><br><span class="line">            String name=sc.next();</span><br><span class="line">            System.out.println(<span class="string">"请输入一个分数："</span>);</span><br><span class="line">            <span class="keyword">int</span> score=sc.nextInt();</span><br><span class="line">            ScoreObject[] s = scoreGame.game(name, score);</span><br><span class="line">            System.out.println(Arrays.toString(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>练习</tag>
        <tag>分值</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vue-cli搭建项目</title>
    <url>/2019/09/04/2019-05-08-%E4%BD%BF%E7%94%A8vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<center><font size="4" color="red">使用vue-cli搭建项目</font></center>

<a id="more"></a>
<h2 id="使用vue-cli搭建项目"><a href="#使用vue-cli搭建项目" class="headerlink" title="使用vue-cli搭建项目"></a>使用vue-cli搭建项目</h2><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>首先需要安装node环境</p>
<p>1、这是node.js最新固定版本下载地址：<a href="http://nodejs.cn" target="_blank" rel="noopener">http://nodejs.cn</a></p>
<p>2、这是多版本的node.js的下载地址：<a href="https://blog.csdn.net/s8460049/article/details/52396399" target="_blank" rel="noopener">https://blog.csdn.net/s8460049/article/details/52396399</a></p>
<p>安装完成后，可以在该文件夹下打开cmd命令工具输入node -v和npm -v，如果能显示出版本号，就说明安装成功。</p>
<h4 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h4><p>1、先安装cnpm，因为npm执行速度比较慢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>2、安装vue-cli和webpack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>
<p>最新的vue项目模板中，都有webpack插件，所以这里可以不安装</p>
<p>3、执行<code>vue -V</code>查看是否安装成功，可能会出现以下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue : 无法加载文件 C:\Users\wanghui\AppData\Roaming\npm\vue.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135</span><br><span class="line">170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ vue -V</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p><code>1. 以管理员身份运行PowerShell</code></p>
<p><code>2. 执行：get-ExecutionPolicy，回复Restricted，表示状态是禁止的</code></p>
<p><code>3.执行：set-ExecutionPolicy RemoteSigned</code></p>
<p><code>4.选择Y</code></p>
<blockquote>
<p>注意：一定要以管理员的身份运行PowerShell，不是cmd窗口</p>
</blockquote>
<h4 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h4><p>首先需要在命令行中进入到项目目录，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack Vue-Project</span><br></pre></td></tr></table></figure>
<p>其中webpack是模板名称，可以到vue.js的GitHub上查看很多的模板<a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">https://github.com/vuejs-templates</a></p>
<p>Vue-Project是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹</p>
<p>由于webpack是托管在github上的，因此直接执行<code>vue init webpack Vue-Project</code>会连接不上主机，可以在<a href="https://gitlab.com/wanghui20192/webpack；" target="_blank" rel="noopener">https://gitlab.com/wanghui20192/webpack；</a> 将webpack下载到本地，然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这里会有一些配置，默认回车即可</span><br><span class="line">vue init C:\wanghui\persion\docs\01_javaEE\vue\code\webpack Vue-Project</span><br></pre></td></tr></table></figure>
<p>其中的C:\wanghui\persion\docs\01_javaEE\vue\code\webpack为我本机下载下来的webpack位置。</p>
<h2 id="进入项目，安装并运行"><a href="#进入项目，安装并运行" class="headerlink" title="进入项目，安装并运行"></a>进入项目，安装并运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd vue-project</span><br><span class="line">$ cnpm install</span><br><span class="line">$ cnpm run dev</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:8080；" target="_blank" rel="noopener">http://localhost:8080；</a> 页面正常访问，即成功了</p>
<h2 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h2><table>
<thead>
<tr>
<th>目录/文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>build</td>
<td>项目构建(webpack)相关代码</td>
</tr>
<tr>
<td>config</td>
<td>配置目录，包括端口号等。我们初学可以使用默认的。</td>
</tr>
<tr>
<td>node_modules</td>
<td>npm 加载的项目依赖模块</td>
</tr>
<tr>
<td>src</td>
<td>这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：1.assets：存图片，如logo  2.components：存组件，可以不用   3.App.vue：项目的入口，我们也可以直接将组件写这里，而不使用 components 目录 4.main.js：项目的核心文件</td>
</tr>
<tr>
<td>static</td>
<td>静态资源目录，如图片、字体等。</td>
</tr>
<tr>
<td>test</td>
<td>初始测试目录，可删除</td>
</tr>
<tr>
<td>.xxxx文件</td>
<td>这些是一些配置文件，包括语法配置，git配置等。</td>
</tr>
<tr>
<td>index.html</td>
<td>首页入口文件，你可以添加一些 meta 信息或统计代码啥的。</td>
</tr>
<tr>
<td>package.json</td>
<td>项目配置文件。</td>
</tr>
<tr>
<td>README.md</td>
<td>项目的说明文档，markdown 格式</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-02_过程模型</title>
    <url>/2019/05/11/2019-05-10-02-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件中过程模型的分析</font></center>

<a id="more"></a>
<h1 id="过程模型"><a href="#过程模型" class="headerlink" title="过程模型"></a>过程模型</h1><h2 id="通用过程模型"><a href="#通用过程模型" class="headerlink" title="通用过程模型"></a>通用过程模型</h2><ul>
<li><p>沟通</p>
</li>
<li><p>策划</p>
</li>
<li><p>建模</p>
</li>
<li><p>构建</p>
</li>
<li><p>部署</p>
</li>
</ul>
<h2 id="过程流"><a href="#过程流" class="headerlink" title="过程流"></a>过程流</h2><ul>
<li>描述通用过程模型在执行顺序和执行时间中的活动，动作和任务。</li>
</ul>
<p>过程流的分类</p>
<ul>
<li>线性过程流</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd546fe3ab79.png" alt></p>
<ul>
<li>迭代过程流</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd5471cb9584.png" alt></p>
<ul>
<li>演化过程流</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd54734d67d7.png" alt></p>
<ul>
<li>并行过程流</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd547447d68a.png" alt></p>
<p>明确任务集</p>
<ul>
<li>小型，相对简单的项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.执行项目的利益相关者列表</span><br><span class="line">2.邀请所有的利益相关者参加一个非正式会议</span><br><span class="line">3.征询每一个人对于软件特性和功能的需求</span><br><span class="line">4.讨论需求，并确定最终的需求列表</span><br><span class="line">5.划定需求优先级</span><br><span class="line">6.标出不确定领域</span><br></pre></td></tr></table></figure>
<ul>
<li>大型，复杂的软件工程项目</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.制定项目的利益相关者列表</span><br><span class="line">2.和利益相关者的每一个成员分别单独讨论，获取所有的要求</span><br><span class="line">3.基于任务集2中的调查，建立初步的功能和特征列表</span><br><span class="line">4.安排一系列促进需求获取的会议</span><br><span class="line">5.组织会议</span><br><span class="line">6.在每次会议上建立非正式的用户场景</span><br><span class="line">7.根据利益相关者的反馈，进一步细化用户场景</span><br><span class="line">8.建立一个修正的需求列表</span><br><span class="line">9.使用质量功能部署技术，划分需求优先级</span><br><span class="line">10.将需求打包以便软件可以增量交付</span><br><span class="line">11.标志系统的约束和限制</span><br><span class="line">12.讨论系统验证方法</span><br></pre></td></tr></table></figure>
<h2 id="惯用过程模型"><a href="#惯用过程模型" class="headerlink" title="惯用过程模型"></a>惯用过程模型</h2><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><ul>
<li><p>就是严格按照通用过程模型进行，沟通–&gt;策划–&gt;建模–&gt;构建–&gt;部署</p>
</li>
<li><p>使用于开发小型项目，因为大型项目需求变化快，如果后期需求发生变化，采用这种模型需求推倒重来，代价太大。</p>
</li>
</ul>
<p>由瀑布模型演化的一个变题—-V模型</p>
<ul>
<li>如下图，V模型下左边向下执行，然后接着右边向上执行。比着瀑布模型只是过了过程中的验证而已</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd547564ea1c.png" alt></p>
<h4 id="增量过程模型"><a href="#增量过程模型" class="headerlink" title="增量过程模型"></a>增量过程模型</h4><ul>
<li>简单易通的增量过程模型理解</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先明确：每一个阶段都是一个增量</span><br><span class="line">第一阶段：整出一个具有核心功能的产品，交由客户评价，有问题就修改，没问题就进行下一个阶段</span><br><span class="line">第二阶段：开始整其它的附属功能，按功能的需求要求程度以及项目的情况划分该增量，做好后继续交给客户评价，有问题改，没问题进行下一个阶段</span><br><span class="line">......</span><br><span class="line">如此的反复解决每一个增量，最终设计出让客户满意的产品</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/10/5cd54765b137b.png" alt></p>
<ul>
<li>该模型的好处，可以避免后期需求的变动而造成整个项目被大改的情况，因为每次增量结束都可以与客户交流增加和修改需求，所以需求的改动每次都是在每个增量上改动。还有个好处是，开发人员数量不够时，可以采用这种模型。</li>
</ul>
<h4 id="演化过程模型"><a href="#演化过程模型" class="headerlink" title="演化过程模型"></a>演化过程模型</h4><ul>
<li><p>先说该模型要处理的情况：需求变化太快</p>
</li>
<li><p>该模型核心：迭代</p>
</li>
<li><p>该模型主要分两类：原型模型和螺旋模型</p>
</li>
</ul>
<p>原型开发</p>
<p>  原型开发使用情况：1.客户只能提出软件的基本功能，但是没有详细定义功能和特性需求。2，开发人员对算法的效率，操作系统的兼容性和人机交互的形式不确定</p>
<p>  方式：在原型的基础上不断迭代，即是对通用过程模型的不断循环</p>
<p>  <img src="https://i.loli.net/2019/05/10/5cd5479155aec.jpg" alt></p>
<p>螺旋模型</p>
<p>  主要思想依然是迭代</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">螺旋的第一圈：开发产品的规格说明</span><br><span class="line">接下来开发产品的原型系统</span><br><span class="line">每次迭代逐步完善，开发不同的软件版本</span><br><span class="line">即使是软件交付后，螺旋依然继续</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/10/5cd54782d1cc0.jpg" alt></p>
<h4 id="协同模型"><a href="#协同模型" class="headerlink" title="协同模型"></a>协同模型</h4><ul>
<li>完全没看懂？？？？？？？</li>
</ul>
<p>演化模型的最终评述</p>
<ul>
<li>市场情况：一个产品，两家都在做，你做的慢了，然后上线晚了，可以很明确的确定，也许你的产品就没有了市场，此时可以关注一下演化模型</li>
</ul>
<h4 id="专用过程模型"><a href="#专用过程模型" class="headerlink" title="专用过程模型"></a>专用过程模型</h4><ul>
<li>只适用于特定的软件工程方法</li>
</ul>
<p>分类</p>
<ul>
<li><p>基于构件的开发</p>
</li>
<li><p>形式化方法模型</p>
</li>
<li><p>面向方面的软件开发</p>
</li>
</ul>
<h4 id="统一过程-UP-Unified-Precess"><a href="#统一过程-UP-Unified-Precess" class="headerlink" title="统一过程(UP,Unified Precess)"></a>统一过程(UP,Unified Precess)</h4><ul>
<li><p>UP的起始阶段</p>
</li>
<li><p>UP的细化阶段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">扩展体系结构以包括软件的五种视图：</span><br><span class="line">用例模型</span><br><span class="line">需求模型</span><br><span class="line">设计模型</span><br><span class="line">实现模型</span><br><span class="line">部署模型</span><br></pre></td></tr></table></figure>
</li>
<li><p>UP的构建阶段</p>
</li>
<li><p>UP的转换阶段</p>
</li>
<li><p>UP的生产阶段</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/05/10/5cd547b939c55.jpg" alt></p>
<p>几种过程建模工具</p>
<p>Lgrafx</p>
<p>Adeptia BPM Server:    <code>https://adeptia.com/</code></p>
<p>SpeedDev Suite</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>软件工程</tag>
        <tag>过程模型</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-04_指导实践的原则</title>
    <url>/2019/05/13/2019-05-13-04-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件中如何进行实践的知道文章</font></center>

<a id="more"></a>
<h1 id="指导实践的原则"><a href="#指导实践的原则" class="headerlink" title="指导实践的原则"></a>指导实践的原则</h1><h2 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h2><h4 id="指导过程的原则"><a href="#指导过程的原则" class="headerlink" title="指导过程的原则"></a>指导过程的原则</h4><ul>
<li><p>原则1:敏捷</p>
</li>
<li><p>原则2:每一步都关注质量</p>
</li>
<li><p>原则3:做好适应的准备</p>
</li>
<li><p>原则4:建立一个有效的团队</p>
</li>
<li><p>原则5:建立沟通和协调机制</p>
</li>
<li><p>原则6:管理变更</p>
</li>
<li><p>原则7:评估风险</p>
</li>
<li><p>原则8；创造能给别人带来价值的工作产品</p>
</li>
</ul>
<h4 id="指导实践的原则-1"><a href="#指导实践的原则-1" class="headerlink" title="指导实践的原则"></a>指导实践的原则</h4><p>目标：按时交付包含满足所有利益相关者要求的功能和特性的高质量，可运行软件</p>
<ul>
<li><p>原则1:分治策略，将大问题划分为小问题来解决</p>
</li>
<li><p>原则2:理解抽象的使用，将复杂元素以抽象的形式简单化</p>
</li>
<li><p>原则3:力求一致性，方便理解，给人看一眼就知道你弄的是个啥</p>
</li>
<li><p>原则4:关注信息传送，MVC设计过程中多注意</p>
</li>
<li><p>原则5:构建能展示有效模块化的软件。模块要做到有效，低耦合</p>
</li>
<li><p>原则6:寻找模式，模块可以做到让软件开发有一种共同语言</p>
</li>
<li><p>原则7:在可能的时候，用大量不同的观点描述问题及其解决方法</p>
</li>
<li><p>原则8:记住：有人将要对软件进行维护</p>
</li>
</ul>
<h2 id="指导每个框架活动的原则"><a href="#指导每个框架活动的原则" class="headerlink" title="指导每个框架活动的原则"></a>指导每个框架活动的原则</h2><h4 id="沟通原则"><a href="#沟通原则" class="headerlink" title="沟通原则"></a>沟通原则</h4><ul>
<li><p>原则1:倾听，有不懂的要及时澄清</p>
</li>
<li><p>原则2:有准备的沟通，花时间去理解问题，调查一些专业术语，做一个议事日程</p>
</li>
<li><p>原则3:沟通活动需要有人推动，主持人</p>
</li>
<li><p>原则4:最好当面沟通</p>
</li>
<li><p>原则5:记笔记并且记录所有决定</p>
</li>
<li><p>原则6:保持通力协作</p>
</li>
<li><p>原则7:把讨论集中在限定范围内</p>
</li>
<li><p>原则8:如果有些东西很难表述清楚，采用图形表示</p>
</li>
<li><p>原则9:(a)一旦认可某件事情，转换话题,(b)如果不认可某件事情，转换话题,(c)如果某项特性或者功能不清晰，当时无法澄清，转换话题</p>
</li>
<li><p>原则10:协商不是一场竞赛或者一场游戏，协商双赢时才发挥了协商的最大价值</p>
</li>
</ul>
<h4 id="策划原则"><a href="#策划原则" class="headerlink" title="策划原则"></a>策划原则</h4><p>目的：让项目有一个好的舒服的计划进行</p>
<ul>
<li><p>原则1:理解项目范围，项目的目的地</p>
</li>
<li><p>原则2:吸收利益相关者参与策划，商谈交付顺序及相关问题</p>
</li>
<li><p>原则3:要认识到计划的制定应按照迭代方式进行，迭代说增量交付</p>
</li>
<li><p>原则4:基于已知的估计</p>
</li>
<li><p>原则5:计划时考虑风险</p>
</li>
<li><p>原则6:保持脚踏实地</p>
</li>
<li><p>原则7:调整计划粒度。粒度：项目计划细节中的精细程度</p>
</li>
<li><p>原则8:制定计划确保质量</p>
</li>
<li><p>原则9:描述如何适应变化</p>
</li>
<li><p>原则10:经常跟踪并根据需要调整计划</p>
</li>
</ul>
<h4 id="建模原则"><a href="#建模原则" class="headerlink" title="建模原则"></a>建模原则</h4><p>目的：获取良好的设计方案</p>
<ul>
<li><p>原则1:设计可追溯到需求模型</p>
</li>
<li><p>原则2:始终关注待建系统的架构，先架构，在构件的设计</p>
</li>
<li><p>原则3:数据设计与功能设计同等重要</p>
</li>
<li><p>原则4:必须精心设计接口</p>
</li>
<li><p>原则5:用户界面设计必须符合最终用户要求</p>
</li>
<li><p>原则6:构件设计应是功能独立的</p>
</li>
<li><p>原则7:构件之间以及构件与外部环境之间松散耦合，要低耦合</p>
</li>
<li><p>原则8:设计表述(模型)应该做到尽可能易于理解</p>
</li>
<li><p>原则9:设计应该迭代式进行</p>
</li>
</ul>
<h4 id="构造原则"><a href="#构造原则" class="headerlink" title="构造原则"></a>构造原则</h4><p>目的：1.编码生成源代码 2.测试，包括(a)单元测试，(b)集成测试，(c)确认测试，(d)验收测试</p>
<p>编码原则</p>
<ul>
<li>准备原则。在写下每行代码之前，要确保：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">理解所要解决的问题</span><br><span class="line">理解基本的设计原则和概念</span><br><span class="line">选择一种能够满足构建软件以及运行环境要求的编程语言</span><br><span class="line">选择一种能提供工具以简化工作的编程环境</span><br><span class="line">构件级编码完成后进行单元测试</span><br></pre></td></tr></table></figure>
<ul>
<li>编程原则。在开始编码时，要确保：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">遵循结构化编程方法来约束算法</span><br><span class="line">考虑使用结对编程</span><br><span class="line">选择能满足设计要求的数据结构</span><br><span class="line">理解软件架构并开发出与其相符的接口</span><br><span class="line">尽可能保持条件逻辑简单</span><br><span class="line">开发的嵌套循环应使其易于测试</span><br><span class="line">选择有意义的变量名并符合相关编码标准</span><br><span class="line">编写注释，湿代码具有说明性</span><br><span class="line">增强代码的可读性(例如：缩进和空行)</span><br></pre></td></tr></table></figure>
<ul>
<li>确认原则。在完成每一阶段的编码之后，要确保：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">适当进行代码走查</span><br><span class="line">进行单元测试并改正所发现的错误</span><br><span class="line">重构代码</span><br></pre></td></tr></table></figure>
<p>测试原则</p>
<ul>
<li><p>原则1:所有的测试都应该追溯到用户需求</p>
</li>
<li><p>原则2:测试计划应该远在测试之前就开始着手</p>
</li>
<li><p>原则3：将Pareto原则应用于软件测试。Pareto原则认为在软件测试过程中80%的错误都可以在大概20%的程序构件中找到根源</p>
</li>
<li><p>原则4:测试应该从“微观”开始，逐步转向宏观。单个程序模块–&gt;集成构件–&gt;整个系统</p>
</li>
<li><p>原则5:穷举测试是不可能的</p>
</li>
</ul>
<h4 id="部署原则"><a href="#部署原则" class="headerlink" title="部署原则"></a>部署原则</h4><p>交付，支持和反馈</p>
<ul>
<li><p>原则1:客户对于软件的期望必须得到管理</p>
</li>
<li><p>原则2:完整的交付包应该经过安装和测试。交付至少是Beta测试版</p>
</li>
<li><p>原则3:技术支持必须在软件交付前就确定下来</p>
</li>
<li><p>原则4:必须为用户提供适当的说明材料</p>
</li>
<li><p>原则5；有缺陷的软件应该先改正再交付</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>软件工程</tag>
        <tag>指导实践</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-01_软件和软件工程</title>
    <url>/2019/05/09/2019-05-09-01-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件和软件工程的分析文章</font></center>

<a id="more"></a>
<h1 id="软件和软件工程"><a href="#软件和软件工程" class="headerlink" title="软件和软件工程"></a>软件和软件工程</h1><h2 id="软件的本质"><a href="#软件的本质" class="headerlink" title="软件的本质"></a>软件的本质</h2><p>软件主要是为了处理信息的，但我们要面临软件设计中的一些问题</p>
<ul>
<li><p>1.开发周期问题/时间问题</p>
</li>
<li><p>2.开发成本问题</p>
</li>
<li><p>3.交付之前存在的Bug问题</p>
</li>
<li><p>4.维护软件的成本问题</p>
</li>
<li><p>5.维护软件的过程问题</p>
</li>
</ul>
<p>软件定义：指令集合，数据结构，信息描述</p>
<ul>
<li><p>1.首先区别与软件和硬件，软件是设计开发的，不是生产制造的</p>
</li>
<li><p>2.软件不会存在“磨损”现象，但却存在着软件维护变更现象，这会使软件出现接近线性的失效果</p>
</li>
<li><p>3.要清楚，目前市场上虽然有些软件构造模式，但用户需求始终是第一位</p>
</li>
</ul>
<p>软件分类</p>
<ul>
<li><p>系统软件</p>
</li>
<li><p>应用软件</p>
</li>
<li><p>工程/科学软件</p>
</li>
<li><p>嵌入式软件</p>
</li>
<li><p>产品线软件</p>
</li>
<li><p>Web应用软件</p>
</li>
<li><p>人工智能软件</p>
</li>
</ul>
<blockquote>
<p>意外效应法则：某些新科技的发明创造会给其他一些看似无关的技术领域，商业企业，公众甚至整个社会文化带来深远而出人意料的影响和作用。</p>
</blockquote>
<h2 id="WebApp的特性"><a href="#WebApp的特性" class="headerlink" title="WebApp的特性"></a>WebApp的特性</h2><p>WebApp所具有的属性，也是软件开发必须关注的重点</p>
<ul>
<li><p>网络密集性：开发网络和受限网络</p>
</li>
<li><p>并发性：高用户</p>
</li>
<li><p>无法预知的负载量：出现不同时期不同数量用户的访问</p>
</li>
<li><p>性能：可访问速度要快</p>
</li>
<li><p>可用性：需要全天候不崩溃</p>
</li>
<li><p>数据驱动：databases，数据的访问</p>
</li>
<li><p>内容敏感性：过滤敏感内容</p>
</li>
<li><p>持续演化：软件要持续更新</p>
</li>
<li><p>即时性：软件的交付推广</p>
</li>
<li><p>安全性：要有限制用户数量和用户的能力</p>
</li>
<li><p>美观性：UI</p>
</li>
</ul>
<h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><p>软件工程分为3层</p>
<ul>
<li><p>软件过程：是基础层，这个是有框架的。主要是建立工作环境便于应用技术方法，提交工作产品(模型，文档，数据，表格等)，建立里程碑，保证质量以及正确管理变更。</p>
</li>
<li><p>软件工程方法：“如何做”的一个解决方案，主要包括：沟通，需求分析，设计建模，编程，测试和技术支持。这个有一套原则。</p>
</li>
<li><p>软件工程工具：也是计算机辅助软件工程。</p>
</li>
</ul>
<h2 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a><font color="red">软件过程</font></h2><p>软件过程</p>
<ul>
<li><p>活动：实现宽泛目标，例如与利益相关者进行沟通</p>
</li>
<li><p>动作：工作产品生产过程中的一系列任务，如体系结构设计模式</p>
</li>
<li><p>任务：关注小而明确的目标，例如构建一个单元测试。</p>
</li>
</ul>
<p>通用过程框架具备的5个活动</p>
<ul>
<li><p>沟通：和用户沟通找需求</p>
</li>
<li><p>策划：策划项目执行过程中出现的所有情况。风险，进度等</p>
</li>
<li><p>建模：</p>
</li>
<li><p>构建：编码和测试</p>
</li>
<li><p>部署：交由客户评测</p>
</li>
</ul>
<blockquote>
<p>以上5个活动是可以迭代进行的，每次迭代都是一个软件增量</p>
</blockquote>
<p>当然除了上述5种活动外，还有一些普适性活动来补充</p>
<ul>
<li><p>1.风险管理</p>
</li>
<li><p>2.软件质量保证</p>
</li>
<li><p>3.技术评审</p>
</li>
<li><p>4.测量</p>
</li>
<li><p>5.软件配置管理</p>
</li>
<li><p>6.可复用管理</p>
</li>
<li><p>7.工作产品的准备和生产</p>
</li>
</ul>
<h2 id="软件工程实践"><a href="#软件工程实践" class="headerlink" title="软件工程实践"></a>软件工程实践</h2><p>实践者的精髓</p>
<ul>
<li>1.理解问题(沟通和分析)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.谁是利益相关者？</span><br><span class="line">2.哪些未知？哪些数据，功能，特征和行为是解决问题必须的？</span><br><span class="line">3.问题可以划分吗？</span><br><span class="line">4.问题可以图形化描述吗？可以建立分析模型吗？</span><br></pre></td></tr></table></figure>
<ul>
<li>2.计划解决方案(建模和软件设计)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.以前遇到过类似问题吗？能否识别一些模式？是否有一些软件已经实现了一些数据，功能，特征和行为</span><br><span class="line">2.能重用遇到过的解决方案所包含的元素吗？</span><br><span class="line">3.是否可以定义子问题？子问题可以解决吗？</span><br><span class="line">4.能否构建出设计模型？</span><br></pre></td></tr></table></figure>
<ul>
<li>3.实施计划(代码生成)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.算法是否验证？</span><br><span class="line">2.解决方案和计划是否一致？</span><br></pre></td></tr></table></figure>
<ul>
<li>4.检查结果的正确性(测试和质量保证)</li>
</ul>
<p>软件设计的一般原则</p>
<ul>
<li><p>1.存在价值</p>
</li>
<li><p>2.保持简洁</p>
</li>
<li><p>3，保持愿景</p>
</li>
<li><p>4.关注使用者</p>
</li>
<li><p>5.面向未来</p>
</li>
<li><p>6.计划复用</p>
</li>
<li><p>7.认真思考</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-03_敏捷开发</title>
    <url>/2019/05/12/2019-05-11-03-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于敏捷开发的教程</font></center>

<a id="more"></a>
<h1 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h1><h2 id="什么是敏捷"><a href="#什么是敏捷" class="headerlink" title="什么是敏捷"></a>什么是敏捷</h2><ul>
<li><p>1.<font color="blue">自组织</font>和<font color="blue">跨职能</font>团队</p>
</li>
<li><p>2.与<font color="blue">客户/最终用户</font>协作努力</p>
</li>
<li><p>3.适用性计划，进化发展，早期交付，<em>持续改进</em>，对变化作出快速且灵活的反应</p>
</li>
</ul>
<blockquote>
<p>continual improvement process(CIP) &amp; continuous improvement process(CI):持续改进</p>
</blockquote>
<h2 id="敏捷及变更的成本费用"><a href="#敏捷及变更的成本费用" class="headerlink" title="敏捷及变更的成本费用"></a>敏捷及变更的成本费用</h2><p>这个费用比着采用传统软件的好处在于后期。传统在后期需求变更中变动太大</p>
<h2 id="敏捷过程"><a href="#敏捷过程" class="headerlink" title="敏捷过程"></a>敏捷过程</h2><p>3个关键假设</p>
<ul>
<li><p>预测哪些需求是稳定的，哪些需求变更会非常困难</p>
</li>
<li><p>难于预测在构建验证之前应该设计到什么程度</p>
</li>
<li><p>计划并不像我们预测的那样容易</p>
</li>
</ul>
<p>敏捷过程</p>
<ul>
<li>采用增量的迭代方式</li>
</ul>
<h4 id="如何做到敏捷开发"><a href="#如何做到敏捷开发" class="headerlink" title="如何做到敏捷开发"></a>如何做到敏捷开发</h4><ul>
<li><p>早期和持续交付有价值的软件实现客户满意度</p>
</li>
<li><p>要欢迎不断变化的需求，即使在后期开发  </p>
</li>
<li><p>经常提供工作软件（数周而不是数月），其实进步的衡量标准   —-什么是工作软件</p>
</li>
<li><p>商务人士和开发人员之间的密切，日常合作</p>
</li>
<li><p>项目围绕有动力的人进行</p>
</li>
<li><p>尽量面对面交谈</p>
</li>
<li><p>关注卓越的良好的设计</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.更快，更小。传统的软件开发依赖于概述需求，规划，设计，构建，测试和交付等阶段。相比之下，敏捷方法试图在几个星期内部署第一个增量，并在几个月内部署整个软件。</span><br><span class="line">2.沟通。业务中的敏捷团队通过面对面会议每天在项目的每个阶段协同工作。这种协作和沟通确保即使条件发生变化，流程也会保持正常。</span><br><span class="line">3.反馈。而不是等到交付阶段来衡量成功，团队利用敏捷方法定期跟踪开发过程的成功和速度。在递送每个增量后测量速度。</span><br><span class="line">4.信任。敏捷团队和员工是自我组织的。他们不是遵循管理层旨在产生预期结果的规则宣言，而是了解目标并创建自己的目标。</span><br><span class="line">5.调整。参与者按照KIS或Keep It Simple原则不断调整和调整过程。</span><br></pre></td></tr></table></figure>
<h2 id="极限编程"><a href="#极限编程" class="headerlink" title="极限编程"></a>极限编程</h2><h4 id="极限编程的权值"><a href="#极限编程的权值" class="headerlink" title="极限编程的权值"></a>极限编程的权值</h4><ul>
<li><p>沟通：反复沟通，紧密交流</p>
</li>
<li><p>简明：只对即时需求做设计，不考虑长远需求</p>
</li>
<li><p>反馈：软件测试反馈，客户反馈，团队成员反馈</p>
</li>
<li><p>鼓励：有为今天做设计的纪律</p>
</li>
<li><p>尊重：尊重队友，尊重客户，尊重软件</p>
</li>
</ul>
<h4 id="极限编程的过程"><a href="#极限编程的过程" class="headerlink" title="极限编程的过程"></a>极限编程的过程</h4><ul>
<li><p>策划:开始于聆听，倾听用户故事(需求)，放到索引卡上(CRC),如果这个用户古寺开发周期超过3个星期，进一步细分故事</p>
</li>
<li><p>设计：遵循KIS(Keep it Simple),不鼓励设计中为故事额外添加功能</p>
</li>
<li><p>编码：不直接编码，先对故事写单元测试</p>
</li>
<li><p>测试：一个是单元测试。另一个是验收测试，也是客户测试</p>
</li>
</ul>
<p><img src="https://i.loli.net/2019/05/11/5cd67ab32c19d.png" alt></p>
<h2 id="其他敏捷过程模型"><a href="#其他敏捷过程模型" class="headerlink" title="其他敏捷过程模型"></a>其他敏捷过程模型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自适应软件开发</span><br><span class="line">Scrum</span><br><span class="line">动态系统开发方法</span><br><span class="line">Crystal</span><br><span class="line">特征驱动开发</span><br><span class="line">精益软件开发</span><br><span class="line">敏捷建模</span><br><span class="line">敏捷统一过程</span><br></pre></td></tr></table></figure>
<p>这里只讨论Scrum</p>
<ul>
<li><p>Scrum：sprint计划，每日scrum，sprint审查和回顾</p>
</li>
<li><p>Product Backlog&lt;产品积压&gt;：是产品中已知所需的所有内容的有序列表。它是对产品进行任何更改的唯一要求来源。该产品负责人负责产品Backlog，包括它的内容，可用性和排序。     –什么是它的内容？需求</p>
</li>
<li><p>Sprint Backlog&lt;冲刺积压&gt;：产品积压最优先要做的</p>
</li>
<li><p>Increment:是Sprint期间完成的所有Product Backlog项目的总和</p>
</li>
<li><p>在每日Scrum期间，每个团队成员通常会回答三个问题：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">昨天我完成了什么，为团队实现我们的冲刺目标做出了贡献？</span><br><span class="line">我计划今天完成什么来为团队实现我们的冲刺目标做出贡献？</span><br><span class="line">我是否看到任何障碍可能阻止我或团队实现我们的冲刺目标？</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我对Scrum的理解:先是PM拿到需求，把需求做成Product Backlog，然后制作Sprint Backlog，Sprint Backlog是要优先解决的一部分Product Backlog。已经完成的Sprint Backlog叫Increment，当一个冲刺完成后，开始准备下一个冲刺</p>
</blockquote>
<h2 id="敏捷开发工具"><a href="#敏捷开发工具" class="headerlink" title="敏捷开发工具"></a>敏捷开发工具</h2><ul>
<li><p>OnTime:敏捷时间管理  <a href="https://www.axosoft.com/" target="_blank" rel="noopener">https://www.axosoft.com/</a></p>
</li>
<li><p>Ideogramic UML：UML工具</p>
</li>
<li><p>Together Tool Set：工具包  <a href="https://www.microfocus.com" target="_blank" rel="noopener">https://www.microfocus.com</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>软件工程</tag>
        <tag>敏捷开发</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-07_需求建模：流程、行为、模式和Web应用</title>
    <url>/2019/05/22/2019-05-22-07-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件需求建模的文章</font></center>

<a id="more"></a>
<h1 id="需求建模：流程、行为、模式和Web应用"><a href="#需求建模：流程、行为、模式和Web应用" class="headerlink" title="需求建模：流程、行为、模式和Web应用"></a>需求建模：流程、行为、模式和Web应用</h1><h2 id="需求建模策略"><a href="#需求建模策略" class="headerlink" title="需求建模策略"></a>需求建模策略</h2><p>结构化分析：</p>
<ul>
<li>考虑数据和处理的分析建模方法，数据可作为独立实体转换。数据对象模型的方式定义了它们的属性和关系，表明当数据对象通过系统时如何转换数据。</li>
</ul>
<p>面向对象分析：</p>
<ul>
<li>专注于定义类以及影响客户需求的类之间的协作方式</li>
</ul>
<h2 id="面向数建模"><a href="#面向数建模" class="headerlink" title="面向数建模"></a>面向数建模</h2><p>数据流图(DFD)</p>
<ul>
<li>输入-处理-输出，流入软件的数据对象，经由处理元素变换，最后以结果数据对象的形式流出软件。</li>
</ul>
<p>表达方式：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">带标记的箭头表示数据或控制对象</span><br><span class="line">圆圈(泡泡)表示转换，0层是系统，其它层是动名词结合</span><br><span class="line">名词是外部实体，用方框表示</span><br><span class="line">数据存储，双横线表示</span><br></pre></td></tr></table></figure>
<ul>
<li>分层：0层，1层，2层……</li>
</ul>
<h4 id="创建数据流模型"><a href="#创建数据流模型" class="headerlink" title="创建数据流模型"></a>创建数据流模型</h4><p>数据流图创建方式：</p>
<ul>
<li><p>1.第0层的数据流图应将软件或者系统描述成一个泡泡</p>
</li>
<li><p>2.应仔细标记主要的输入和输出</p>
</li>
<li><p>3.通过把选定的处理、数据对象和数据存储分离为下一层表示而开始精化过程</p>
</li>
<li><p>4.应使用有意义的名称标记所有的箭头和泡泡</p>
</li>
<li><p>5.当从一个层转到另一个层时要保持信息流连续性</p>
</li>
<li><p>6.一次精化一个泡泡</p>
</li>
</ul>
<p>原则：</p>
<ul>
<li><p>逐渐精华泡泡</p>
</li>
<li><p>保持信息流的连续性</p>
</li>
</ul>
<h4 id="创建控制流模型"><a href="#创建控制流模型" class="headerlink" title="创建控制流模型"></a>创建控制流模型</h4><p>事件驱动的问题需要使用控制流建模</p>
<h4 id="控制规格说明"><a href="#控制规格说明" class="headerlink" title="控制规格说明"></a>控制规格说明</h4><p>Control Specification CSPEC</p>
<ul>
<li>状态图，下章节会重点讲解</li>
</ul>
<h4 id="处理规格说明"><a href="#处理规格说明" class="headerlink" title="处理规格说明"></a>处理规格说明</h4><p>Process Specification,PSPEC</p>
<h2 id="生成行为模型"><a href="#生成行为模型" class="headerlink" title="生成行为模型"></a>生成行为模型</h2><p>目的：将静态元素转换为系统或产品的动态行为</p>
<p>生成模型的步骤</p>
<ul>
<li><p>1.评估所有的用例，以保证安全理解系统内的交互顺序</p>
</li>
<li><p>2.识别驱动交互顺序的事件，并理解这些事件如何与特定的对象相互关联</p>
</li>
<li><p>3.为每个用例生成序列</p>
</li>
<li><p>4.创建系统状态图</p>
<ul>
<li>5.评审行为模型以验证准确性和一致性</li>
</ul>
</li>
</ul>
<h4 id="识别用例事件"><a href="#识别用例事件" class="headerlink" title="识别用例事件"></a>识别用例事件</h4><p>用例表现了涉及参与者和系统的活动顺序。一般而言，只要系统和参与者之间交换了信息就发生事件。事件可以理解为一个动作或行为，例如，输入密码是个事件，商品加入购物车是个事件，吃饭是个事件。一旦找到了事件，要做的是将其分配到所涉及的对象。对象负责生成事件</p>
<h4 id="状态表现"><a href="#状态表现" class="headerlink" title="状态表现"></a>状态表现</h4><p>行为建模必须考虑的两种不同的状态描述</p>
<ul>
<li><p>1.系统执行其功能时每个类的状态</p>
</li>
<li><p>2.系统执行其功能时从外部观察到的系统状态</p>
</li>
</ul>
<p>类状态具有被动和主动两种特征</p>
<ul>
<li><p>1.被动状态只是某个对象所有属性的当前状态</p>
</li>
<li><p>2.一个对象的主动状态指的是对象进行持续变换或处理时的当前状态</p>
</li>
</ul>
<p>以下讨论两种不同的行为表现形式，第一种显示一个类如何改变基于外部事件的状态，第二种以事件函数的形式显示软件的行为</p>
<ul>
<li><p><strong>分析类的状态图</strong>。UML状态图就是一种行为模型，该图为每个类呈现了主动状态和导致这些主动状态变化的事件</p>
</li>
<li><p><strong>顺序图</strong>。该图表明事件如何引发从一个对象到一个对象的转移。一旦通过检查用例确认了事件，建模人员就创建了一个顺序图，即用时间函数表现如何引发事件从一个对象流到另一个对象</p>
</li>
</ul>
<p>UML建模工具</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">ArgoUML  <span class="code">`argouml.tigris.org`</span></span><br><span class="line">Enterprise Architect  <span class="code">`www.sparxsystems.com.au`</span></span><br><span class="line">PowerDesigner  <span class="code">`www.sybase.com`</span></span><br><span class="line">Rational Rose   <span class="code">`www.ibm.com/software/retional`</span></span><br><span class="line">System Architect  <span class="code">`www.popkin.com`</span></span><br><span class="line">UML Studio  <span class="code">`www.pragsoft.com`</span></span><br><span class="line">Visio  <span class="code">`www.mocrosoft.com`</span></span><br><span class="line">Visual UML <span class="code">`www.visualuml.com`</span></span><br></pre></td></tr></table></figure>
<h2 id="需求建模的模式"><a href="#需求建模的模式" class="headerlink" title="需求建模的模式"></a>需求建模的模式</h2><h4 id="发现分析模式"><a href="#发现分析模式" class="headerlink" title="发现分析模式"></a>发现分析模式</h4><p>需求模型由各种元素组成</p>
<ul>
<li><p>基于场景(用例)</p>
</li>
<li><p>基于数据(数据模型)</p>
</li>
<li><p>基于类</p>
</li>
<li><p>基于流和行为</p>
</li>
</ul>
<p>需求模型中最基本的元素是用例。语义分析模式(semantic analysis pattern,SAP)是描述了一小套连贯用例，这些用例一起描述了通用应用的基础。</p>
<h4 id="需求模式举例"><a href="#需求模式举例" class="headerlink" title="需求模式举例"></a>需求模式举例</h4><p>不再分析</p>
<h2 id="Web应用系统的需求建模"><a href="#Web应用系统的需求建模" class="headerlink" title="Web应用系统的需求建模"></a>Web应用系统的需求建模</h2><h4 id="如何分析"><a href="#如何分析" class="headerlink" title="如何分析"></a>如何分析</h4><p>Web应用需求建模的重视程度依据以下因素</p>
<ul>
<li><p>1.Web应用的规模和复杂性的增长</p>
</li>
<li><p>2.相关利益者的人数(识别需求冲突)</p>
</li>
<li><p>3.Web应用团队的人数</p>
</li>
<li><p>4.一起工作以前该Web应用团队成员的级别</p>
</li>
<li><p>5.组织成功的程度直接依赖Web应用的成功</p>
</li>
</ul>
<h4 id="需求建模的输入"><a href="#需求建模的输入" class="headerlink" title="需求建模的输入"></a>需求建模的输入</h4><p>需求建模输入的表现形式</p>
<ul>
<li><p>自然语言描述</p>
</li>
<li><p>概要大纲</p>
</li>
<li><p>草图</p>
</li>
<li><p>其它非正式形式</p>
</li>
</ul>
<h4 id="需求建模的输出"><a href="#需求建模的输出" class="headerlink" title="需求建模的输出"></a>需求建模的输出</h4><p>5种主要的模型类型</p>
<ul>
<li><p>内容模型：包括文本、图表和图像、视频和音频数据</p>
</li>
<li><p>交互模式：描述了用户与Web应用系统采用了哪种交互方式</p>
</li>
<li><p>功能模式：定义了将用于Web应用系统内容并描述其他处理功能的操作，这些处理功能不依赖于内容却是最终用户所必需的</p>
</li>
<li><p>导航模式：为Web应用系统定义所有导航策略</p>
</li>
<li><p>配置模型：描述Web应用系统所在的环境和基础设施</p>
</li>
</ul>
<h4 id="Web应用系统内容建模"><a href="#Web应用系统内容建模" class="headerlink" title="Web应用系统内容建模"></a>Web应用系统内容建模</h4><p>内容对象是呈现给最终用户具有汇聚信息的所有条目</p>
<p>数据树分析内容对象图示：</p>
<p><img src="https://i.loli.net/2019/05/22/5ce4b66a2918a47029.jpg" alt></p>
<h4 id="Web应用系统的交互模型"><a href="#Web应用系统的交互模型" class="headerlink" title="Web应用系统的交互模型"></a>Web应用系统的交互模型</h4><p>交互模型可以由下面的一种或多种组成：</p>
<ul>
<li><p>1.用例</p>
</li>
<li><p>2.顺序图</p>
</li>
<li><p>3.状态图</p>
</li>
<li><p>4.用户界面原型</p>
</li>
</ul>
<p>一般使用用例就行，对于复杂的情况需要使用顺序图和状态图，甚至用户界面原型</p>
<h4 id="Web应用系统的功能模型"><a href="#Web应用系统的功能模型" class="headerlink" title="Web应用系统的功能模型"></a>Web应用系统的功能模型</h4><p>功能模型描述Web应用系统的两个处理元素，每个处理元素代表抽象过程的不同层次</p>
<ul>
<li><p>1.用户可观察到的功能有Web应用系统传递给最终用户的</p>
</li>
<li><p>2.分析类中的操作实现与类相关的行为</p>
</li>
</ul>
<p>在功能模型创建的过程中，如果存在着潜在的复杂的行为，可以使用活动图进行分析</p>
<h4 id="Web应用系统的配置模型"><a href="#Web应用系统的配置模型" class="headerlink" title="Web应用系统的配置模型"></a>Web应用系统的配置模型</h4><p>配置较为复杂时，使用UML部署图</p>
<h4 id="导航建模"><a href="#导航建模" class="headerlink" title="导航建模"></a>导航建模</h4><p>具体情况具体分析</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>需求建模</tag>
        <tag>流程</tag>
        <tag>行为</tag>
        <tag>模式</tag>
        <tag>Web应用</tag>
      </tags>
  </entry>
  <entry>
    <title>制作Windows操作系统工具盘</title>
    <url>/2019/05/22/2019-05-21-%E5%88%B6%E4%BD%9CWindows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E7%9B%98/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于制作Windows工具盘的文章</font></center>

<a id="more"></a>
<h1 id="Windows操作系统工具盘制作流程"><a href="#Windows操作系统工具盘制作流程" class="headerlink" title="Windows操作系统工具盘制作流程"></a>Windows操作系统工具盘制作流程</h1><h2 id="下载Windows镜像"><a href="#下载Windows镜像" class="headerlink" title="下载Windows镜像"></a>下载Windows镜像</h2><p>下载地址</p>
<ul>
<li><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li>
</ul>
<p>路径</p>
<ul>
<li>选择<strong>操作系统</strong>，然后选择要下载的Windows镜像，我这里选择的是W10 1089Version 4月更新的，然后选择企业版的，比较稳定</li>
</ul>
<p>下载</p>
<ul>
<li>复制ed2k的下载连接，然后在下载工具里下载，例如使用迅雷下载</li>
</ul>
<h2 id="导入工具盘"><a href="#导入工具盘" class="headerlink" title="导入工具盘"></a>导入工具盘</h2><p>我这里使用rufus导入工具盘，因为rufus操作简单，没其它原因，就喜欢它这点,ubuntu也能使用这个工具</p>
<p>下载rufus，这里提供两种方式</p>
<ul>
<li><p>1.网站下载：<a href="http://rufus.ie/" target="_blank" rel="noopener">http://rufus.ie/</a></p>
</li>
<li><p>2.命令行下载</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载之前要要安装好git，openSSH，scoop</span><br><span class="line"><span class="meta">$</span> scoop bucket add extras</span><br><span class="line"><span class="meta">$</span> scoop install rufus</span><br></pre></td></tr></table></figure>
<p>制作工具盘，相信我，它简单的像个咦……</p>
<ul>
<li>插入工具盘，打开rufus，rufus一般会自动检索到你的U盘，你只需要在Boot selection里选择你下载好的镜像，然后点击START</li>
</ul>
<p>好了，你没有看错，就只需要选择一个镜像路径就行了，于是工具盘制作完成，接下来愉快的安装操作系统去吧</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>工具盘</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-08_设计概念</title>
    <url>/2019/05/24/2019-05-23-08_%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件设计概念的文章</font></center>

<a id="more"></a>
<h1 id="设计概念"><a href="#设计概念" class="headerlink" title="设计概念"></a>设计概念</h1><h2 id="软件工程中的设计"><a href="#软件工程中的设计" class="headerlink" title="软件工程中的设计"></a>软件工程中的设计</h2><p>一旦对软件需求进行分析和建模，软件设计就开始了</p>
<p>软件设计是建模活动的最后一个软件工程活动，接下来就是构造阶段。</p>
<p><img src="https://i.loli.net/2019/05/23/5ce6300696e6711905.png" alt></p>
<p>设计一定要保证—–<strong>质量</strong></p>
<h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><p>设计过程：迭代</p>
<h4 id="软件质量指导原则和属性"><a href="#软件质量指导原则和属性" class="headerlink" title="软件质量指导原则和属性"></a>软件质量指导原则和属性</h4><p><strong>设计的质量指导原则</strong></p>
<ul>
<li><p>1.设计应该有的结构</p>
<ul>
<li><p>a.已经使用可识别的体系结构风格或模式创建</p>
</li>
<li><p>b.由展示出良好设计特征的构件构成</p>
</li>
<li><p>c.能够以演化的方式实现，从而便于实现和测试</p>
</li>
</ul>
</li>
<li><p>2.设计应该模块化</p>
</li>
<li><p>3.设计应该包含数据、体系结构、接口和构件的清晰表示</p>
</li>
<li><p>4.设计应导出数据结构，这些数据结构适用于要实现的类，并从可识别的数据模式提取</p>
</li>
<li><p>5.设计应导出显示独立功能特征的构件</p>
</li>
<li><p>6.设计应导出接口，这些接口降低了构件之间以及与外部环境连接的复杂性</p>
</li>
<li><p>7.设计的导出应根据软件需求分析过程中获取的信息采用可重复的方法进行</p>
</li>
<li><p>8.应使用能够有效传达其意义的表示法来表达设计</p>
</li>
</ul>
<p><strong>质量属性FURPS</strong></p>
<ul>
<li><p>1.功能性(functionality)</p>
</li>
<li><p>2.易用性(usability)</p>
</li>
<li><p>3.可靠性(reliability)</p>
</li>
<li><p>4.性能(performance)</p>
</li>
<li><p>5.可支持性(supportability)</p>
</li>
</ul>
<h4 id="软件设计的演化"><a href="#软件设计的演化" class="headerlink" title="软件设计的演化"></a>软件设计的演化</h4><p>无论软件设计如何演化，都有一些共同的特征</p>
<ul>
<li><p>1.将需求模型转化为设计表示的方法</p>
</li>
<li><p>2.表示功能性构件及它们之间接口的表示法</p>
</li>
<li><p>3.精华和分割的启发式方法</p>
</li>
<li><p>4.质量评估的指导原则</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">通用设计任务集</span><br><span class="line"><span class="code">    1.检查信息域模型，并为数据对象及其属性设计恰当的数据结构</span></span><br><span class="line"><span class="code">    2.使用分析模型，选择一种使用于软件的体系结构风格</span></span><br><span class="line"><span class="code">    3.将分析模型分割为若干个设计子系统，并在体系结构内分配这些子系统：</span></span><br><span class="line"><span class="code">      确保每个子系统是功能内聚的。</span></span><br><span class="line"><span class="code">      设计子系统接口。</span></span><br><span class="line"><span class="code">      为每个子系统分配分析类或功能。</span></span><br><span class="line"><span class="code">    4.创建一系列的设计类或构件：</span></span><br><span class="line"><span class="code">      将每个分析类描述转化为设计类</span></span><br><span class="line"><span class="code">      根据设计标准检查每个设计类，考虑继承问题</span></span><br><span class="line"><span class="code">      定义与每个设计类相关的方法和消息</span></span><br><span class="line"><span class="code">      评估设计类或子系统，并为这些类或子系统选择设计模式</span></span><br><span class="line"><span class="code">      评审设计类，并在需要时修改</span></span><br><span class="line"><span class="code">    5.设计外部系统或设备所需要的所有接口</span></span><br><span class="line"><span class="code">    6.设计用户接口：</span></span><br><span class="line"><span class="code">      评审任务分析的结果</span></span><br><span class="line"><span class="code">      基于用户场景详细说明活动序列</span></span><br><span class="line"><span class="code">      创建接口的行为模型</span></span><br><span class="line"><span class="code">      定义接口对象、控制机制</span></span><br><span class="line"><span class="code">      评审接口设计，并根据需要进行修改</span></span><br><span class="line"><span class="code">    7.进行构件级设计</span></span><br><span class="line"><span class="code">      在相对较低的抽象层次上详细地说明所有算法</span></span><br><span class="line"><span class="code">      精华每个构件的接口</span></span><br><span class="line"><span class="code">      定义构件级的数据结构</span></span><br><span class="line"><span class="code">      评审每个构件并修正所有已发现的错误</span></span><br><span class="line"><span class="code">    8.开发部署模型</span></span><br></pre></td></tr></table></figure>
<h2 id="设计概念-1"><a href="#设计概念-1" class="headerlink" title="设计概念"></a>设计概念</h2><p>设计概念提供应用更加复杂设计方法的基础，每种方法可以回答的问题：</p>
<ul>
<li><p>使用什么标准将软件分割为独立的构件</p>
</li>
<li><p>功能和数据结构细节如何从软件的概念表示中分离出来</p>
</li>
<li><p>定义软件设计技术质量的统一标准是什么</p>
</li>
</ul>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>过程抽象</p>
<ul>
<li>具有明确和有限的指令序列，只体现功能，不显示细节，例如“开门”，“开”所隐藏的一系列过程并不体现出来</li>
</ul>
<p>数据抽象</p>
<ul>
<li>描述数据对象的冠名数据集合。例如“开门”，“开”是动词，不会携带数据，但“门”是携带数据的，例如“门”的类型，转动方向，门的大小等</li>
</ul>
<h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><p>简单解释</p>
<ul>
<li>可以把体系结构理解为模块的结构或组织，以及模块交互的形式和所用数据的结构</li>
</ul>
<p>广泛解释</p>
<ul>
<li>主要系统元素及其交互</li>
</ul>
<p>？？？？？？？</p>
<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>解决重复方案</p>
<ul>
<li><p>模式是否适用于当前的工作</p>
</li>
<li><p>模式是否能够复用</p>
</li>
<li><p>模式是否能够用于指导开发一个类似的、但是功能或结构不同的模式</p>
</li>
</ul>
<h4 id="关注点分离"><a href="#关注点分离" class="headerlink" title="关注点分离"></a>关注点分离</h4><p>将复杂问题分解为可以独立解决和优化的若干块，分而治之</p>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>模块化的划分不能无限制的划分，划分太多就会集合麻烦，划分太少就会功能复杂</p>
<h4 id="信息隐蔽"><a href="#信息隐蔽" class="headerlink" title="信息隐蔽"></a>信息隐蔽</h4><p>每个模块对其它所有模块都隐藏自己的设计决策。模块应该规定并设计成为在模块中包含的信息(算法和数据)不被不需要这些信息的其它模块访问</p>
<h4 id="功能独立"><a href="#功能独立" class="headerlink" title="功能独立"></a>功能独立</h4><p>就是做到模块的高内聚、低耦合</p>
<h4 id="求精"><a href="#求精" class="headerlink" title="求精"></a>求精</h4><p>逐步求精：自顶向下的设计策略，一个逐渐细化的过程</p>
<h4 id="方面"><a href="#方面" class="headerlink" title="方面"></a>方面</h4><p>解决问题：需求B必须在需求A满足的情况下才能进行</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>一种简化构件的设计，其实就是重新组装</p>
<h4 id="面向对象的设计概念"><a href="#面向对象的设计概念" class="headerlink" title="面向对象的设计概念"></a>面向对象的设计概念</h4><p>设计中遵循面向对象思想</p>
<h4 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h4><ul>
<li><p>1.通过提供设计细节精华分析类，这些设计细节将促成类的实现</p>
</li>
<li><p>2.实现支持业务解决方案的软件基础设施</p>
</li>
</ul>
<p>5种不同类型的设计类</p>
<ul>
<li><p>1.用户接口类：人-机交互</p>
</li>
<li><p>2.业务域类：业务的属性和服务</p>
</li>
<li><p>3.过程类：实现完整的管理业务所必须的低层业务抽象</p>
</li>
<li><p>4.持久类：数据库</p>
</li>
<li><p>5.系统类：软件管理和控制功能</p>
</li>
</ul>
<p>类应当有的特性</p>
<ul>
<li><p>1.完整性和充分性：完整的属性和方法</p>
</li>
<li><p>2.原始性：专注于关注实现类的某一个服务，一旦服务被实现，就不在提供完成同一事情的另外一个方法</p>
</li>
<li><p>3.高内聚性</p>
</li>
<li><p>4.低耦合性</p>
</li>
</ul>
<h2 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h2><p>设计模型和分析模型</p>
<p><img src="https://i.loli.net/2019/05/23/5ce69c6daab5434499.png" alt></p>
<h4 id="数据设计元素"><a href="#数据设计元素" class="headerlink" title="数据设计元素"></a>数据设计元素</h4><p>数据模型到数据库的转换，这个非常重要，但抽象程度更高</p>
<h4 id="体系结构设计元素"><a href="#体系结构设计元素" class="headerlink" title="体系结构设计元素"></a>体系结构设计元素</h4><p>软件的体系结构设计等效于房屋的平面图</p>
<p>体系结构模型的来源：</p>
<ul>
<li><p>关于将要构建的软件的应用域信息</p>
</li>
<li><p>特定的需要模型元素，如数据流图或分析类、现有问题中它们的关系和协作</p>
</li>
<li><p>体系结构风格和模式的可获得性</p>
</li>
</ul>
<h4 id="接口设计元素"><a href="#接口设计元素" class="headerlink" title="接口设计元素"></a>接口设计元素</h4><p>软件的接口设计相当于一组房屋的门、窗和外部设施的详细绘图</p>
<p>接口设计有3个重要的元素</p>
<ul>
<li><p>1.用户界面</p>
</li>
<li><p>2.和其它系统、设备、网络和其它信息生成者或使用者的外部接口</p>
</li>
<li><p>3.各种设计构件之间的内部接口</p>
</li>
</ul>
<h4 id="构件级设计元素"><a href="#构件级设计元素" class="headerlink" title="构件级设计元素"></a>构件级设计元素</h4><p>构件级设计相当于一个房屋中每个房间的一组详图。这些图描绘了每个房间内的布线和管道、电器插座和墙上开关、水龙头、水池、淋浴、浴盆、下水道</p>
<h4 id="部署级设计元素"><a href="#部署级设计元素" class="headerlink" title="部署级设计元素"></a>部署级设计元素</h4><p>部署级设计元素指明软件功能和子系统将如何在支持软件的物理计算环境内分布</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Next添加分类和标签</title>
    <url>/2019/06/02/2019-06-01-Next%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于如何在Next主题下添加分类和标签的教程</font></center>

<a id="more"></a>
<h1 id="如何在next主题下添加分类和标签"><a href="#如何在next主题下添加分类和标签" class="headerlink" title="如何在next主题下添加分类和标签"></a>如何在next主题下添加分类和标签</h1><h2 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h2><p>1.新建页面</p>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 ==categories==</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd your-hexo-site</span><br><span class="line"><span class="meta">$</span> hexo new page categories</span><br></pre></td></tr></table></figure>
<p>2.设置页面类型</p>
<p>编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2019-06-1 12:00:04</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>3.修改菜单</p>
<p>在菜单中添加链接。编辑 ==主题配置文件== ， 添加 categories 到 menu 中，如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  分类: /categories</span><br></pre></td></tr></table></figure>
<h2 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h2><p>1.新建页面</p>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 ==tags==</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd your-hexo-site</span><br><span class="line"><span class="meta">$</span> hexo new page tags</span><br></pre></td></tr></table></figure>
<p>2.设置页面类型</p>
<p>编辑刚新建的页面，将页面的 type 设置为 tags ，主题将自动为这个页面显示分类。页面内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2019-06-1 12:39:04</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>3.修改菜单</p>
<p>在菜单中添加链接。编辑 ==主题配置文件== ， 添加 tags 到 menu 中，如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  标签: /tags</span><br></pre></td></tr></table></figure>
<h2 id="创建模版"><a href="#创建模版" class="headerlink" title="创建模版"></a>创建模版</h2><p>在编写md文件时如果总是要填写上述步骤很麻烦，所以建立一个模板时最好的选择，这个模板就在<code>\scaffolds\post.md</code></p>
<p>我使用的模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li><p>title是文章标题</p>
</li>
<li><p>data是编写日期。这两个都会自动生成(如果使用命令行创建md文件的话)</p>
</li>
<li><p>categories中填写分类</p>
</li>
<li><p>tags中填写标签</p>
</li>
</ul>
<p>例如我使用命令行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new "hexo在next主题下如何添加分类和标签"</span><br></pre></td></tr></table></figure>
<p>就会在<code>\source_posts</code>目录下生成一个hexo在next主题下如何添加分类和标签的md文件，显示如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo在next主题下如何添加分类和标签</span><br><span class="line">date: 2018-10-06 22:38:18</span><br><span class="line">categories:</span><br><span class="line">- 前端</span><br><span class="line">  - 搭建博客</span><br><span class="line">tags:</span><br><span class="line">- 搭建博客</span><br><span class="line">- 前端</span><br><span class="line">- next</span><br><span class="line">- 备忘</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>随便写点信息，刷新一下hexo，部署一下，在我们的博客上就会看到我们新写的文章了。</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>分类</tag>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加一些小玩意</title>
    <url>/2019/06/04/2019-06-04-hexo%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于如何在hexo博客里添加一些小玩意的教程</font></center>

<a id="more"></a>
<h1 id="Next的一些小玩意设置"><a href="#Next的一些小玩意设置" class="headerlink" title="Next的一些小玩意设置"></a>Next的一些小玩意设置</h1><h2 id="点击出现❤️型"><a href="#点击出现❤️型" class="headerlink" title="点击出现❤️型"></a>点击出现❤️型</h2><p>1.创建js文件</p>
<p>在/themes/next/source/js/src下新建文件clicklove.js，接着把下面的代码拷贝粘贴到clicklove.js文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>2.修改_layout.swig</p>
<p>在<code>\themes\next\layout</code>下的<code>_layout.swig</code>文件末尾添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="显示二次元动漫人物"><a href="#显示二次元动漫人物" class="headerlink" title="显示二次元动漫人物"></a>显示二次元动漫人物</h2><p>1.安装插件</p>
<p>进入hexo博客根目录执行以下命令安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>2.安装动画模型</p>
<p>动画原型地址<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p>
<p>动画原型下载模版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-haru/02 </span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>
<p>选择好对应的模型，使用npm install 模型的包名来安装，比如我选择的是<code>live2d-widget-model-hibiki</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure>
<p>3.配置</p>
<p>打开个人Hexo博客文件根目录下的 _config.yml 文件，在最后添加一下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>二次元</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko #这个是你要修改的</span><br><span class="line">  display:</span><br><span class="line">    position: right #在屏幕上的显示位置</span><br><span class="line">    width: 85 #显示宽度</span><br><span class="line">    height: 170 #显示高度</span><br><span class="line">  mobile:</span><br><span class="line">    show: false #手机端是否显示</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：当你换了动漫人物，发现在本地并没有展示出来的时候，或者明明设置了宽高时，不用慌，你可以hexo clean一下，再hexo g生成静态文件，hexo s启动本地服务看看，这样应该就行了。</p>
</blockquote>
<p>4.卸载</p>
<p>当你不想要的时候，可以enable设置为false，也可以卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>小玩意</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo insert images</title>
    <url>/2019/06/01/2019-06-01-hexo-insert-images/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于Hexo如何生成本地图片的教程</font></center>

<a id="more"></a>
<h1 id="hexo生成博文插入本地图片"><a href="#hexo生成博文插入本地图片" class="headerlink" title="hexo生成博文插入本地图片"></a>hexo生成博文插入本地图片</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p>
<p>在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p>
<p>等待一小段时间后，再运行hexo new “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹 （当然也可以自己手动建）</p>
<p>最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p>
<p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p>
<blockquote>
<p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p>
</blockquote>
<p>最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>遇到没能成功显示的问题，查看网页，结果是 <code>&lt;img src=&quot;2017/02/26/2017-02-23-c/图片名.jpg&quot;&gt;</code> 的形式，然后查看 hexo 的目录，发现路径是 /public/2017/02/26/c/a.jpg。</p>
<p>之前在 md 文件中引用时写作：</p>
<p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p>
<p>改为：</p>
<p><code>![](a.jpg)</code></p>
<p>就可以了。</p>
<p>效果查看 这篇文章 的图片显示。</p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>看上面的效果，出错原因是 /public/2017/02/26/c/ 文件夹中没有生成保存图片的同名文件夹，图片直接被拷贝到这个文件夹下了。</p>
<p>突然想起从 jekyll 转移到 hexo 的时候更改过文章路径与标题解析方式…</p>
<p>不知道有没有关联。</p>
<h2 id="hexo-修改文章路径"><a href="#hexo-修改文章路径" class="headerlink" title="hexo 修改文章路径"></a>hexo 修改文章路径</h2><p>产生的链接和两条属性相关。</p>
<p>permalink: :year/:month/:day/:title/ 链接格式</p>
<p>new_post_name: :title.md 解析标题方式</p>
<p>之前文章的命名方式都是 YYYY-MM-DD-title （jekyll 的文章格式），比如文件 2018-05-30-hexo-image.md 。</p>
<p>hexo 渲染时解析博文的标题为 2018-05-30-hexo-image 。</p>
<p>当如上设置 permalink 后，路径就是 <a href="http://hqweay.cn/2018/05/30/2018-05-30-hexo-image/" target="_blank" rel="noopener">http://hqweay.cn/2018/05/30/2018-05-30-hexo-image/</a> 这样。</p>
<p>时间出现了两次好诡异啊。</p>
<p>可以修改 permalink： ：title/ ，链接就直接用标题来区分。</p>
<p>效果是：<a href="http://hqweay.cn/2018-05-30-hexo-image/" target="_blank" rel="noopener">http://hqweay.cn/2018-05-30-hexo-image/</a></p>
<p>但是我想导入评论，链接最好和之前 jekyll 的一致。</p>
<p>于是就想办法改改后面。</p>
<p>hexo 提供了 new_post_name 。这条属性是定义 hexo 对文章标题的解析方式的。</p>
<p>默认为 new_post_name: :title.md 。</p>
<p>我们修改为 new_post_name: :year-:month-:day-:title.md 。</p>
<p>对比文件命名，很容易理解。</p>
<p>这样，hexo 就会把自动提取出文件的命名中的文章标题，而不是直接把文件的命名解析为标题。</p>
<p>路径就为：</p>
<p><a href="http://hqweay.cn/2018/05/30/hexo-image/" target="_blank" rel="noopener">http://hqweay.cn/2018/05/30/hexo-image/</a></p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>生成</tag>
        <tag>本地图片</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序法</title>
    <url>/2019/06/09/2019-06-08-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4" color="red">这是一篇关于插入排序的方法</font></center>

<a id="more"></a>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h2><ol>
<li><p>插入排序是将数组分成两个数组，左边的为有序数组，右边的为无序数组</p>
</li>
<li><p>第一步，选择数组的第一个选择作为有序数组，然后拿该无序数组的第一个元素和它比较</p>
</li>
<li><p>从有序数组的最大的元素进行比较，如果比其大，就直接跳出循环</p>
</li>
<li><p>否则，将数组向后移动，最后将该数值插入到比较的大的元素的右边</p>
</li>
</ol>
<h2 id="动图展示"><a href="#动图展示" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src="/2019/06/09/2019-06-08-插入排序法/InsertSort.gif" alt></p>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        该for循环把数组分成两部分</span></span><br><span class="line"><span class="comment">        左边已经排好的序，右边为未排好的序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">//记录排序与未排序的分割点temp(temp为下一个排序对象)</span></span><br><span class="line">            <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            第二个for循环</span></span><br><span class="line"><span class="comment">            将排序对象temp与已排序数组比较，这里遍历的是已排序的数组</span></span><br><span class="line"><span class="comment">            如果temp比最近左边的数大时，直接结束本次循环，进行下一个排序</span></span><br><span class="line"><span class="comment">            否则比左边这个数小时，将这个数右移，腾出这个数的位置</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (temp&gt;arr[j])&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li><p>最好的情况O(n)</p>
</li>
<li><p>最差的情况O(n²)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>插入</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven整合SSM</title>
    <url>/2019/06/12/2019-06-12-Maven%E6%95%B4%E5%90%88SSM/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于Maven整合SSM的依赖配置文件</font></center>

<a id="more"></a>
<h1 id="Maven中的SSM的项目依赖"><a href="#Maven中的SSM的项目依赖" class="headerlink" title="Maven中的SSM的项目依赖"></a>Maven中的SSM的项目依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加tomcat7插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：被锁定的jar包在dependencyManagement标签内和外部都要有一份，因为被锁定的jar包是不能生成真正的jar包的。只有在dependencyManagement外部的依赖配置文件才能生成真正的jar包。</p>
</blockquote>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2019/06/12/2019-06-12-Maven/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于Maven的文件</font></center>

<a id="more"></a>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="下载和安装Maven"><a href="#下载和安装Maven" class="headerlink" title="下载和安装Maven"></a>下载和安装Maven</h2><p>下载地址：<code>http://maven.apache.org/download.cgi</code></p>
<p>安装地址：<code>http://maven.apache.org/install.html</code></p>
<p>maven的中央仓库：<code>http://repo1.maven.org/maven2/</code></p>
<h2 id="修改maven中央仓库"><a href="#修改maven中央仓库" class="headerlink" title="修改maven中央仓库"></a>修改maven中央仓库</h2><p>输入<code>mvn --version</code>可以查看到maven的安装位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</span><br><span class="line">Maven home: /usr/local/Cellar/maven/3.6.0/libexec</span><br><span class="line">Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: "mac os x", version: "10.13.6", arch: "x86_64", family: "mac"</span><br></pre></td></tr></table></figure>
<p>然后cd到Maven home</p>
<p><code>$ cd /usr/local/Cellar/maven/3.6.0/libexec</code></p>
<p>maven的配置文件settings.xml在该目录下的conf下</p>
<p>然后在镜像的配置文件下添加以下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>具体如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Maven的目录介绍"><a href="#Maven的目录介绍" class="headerlink" title="Maven的目录介绍"></a>Maven的目录介绍</h2><p>bin目录 mvn.bat(以run方式运行项目)、mvnDebug.bat(以debug方式运行项目)</p>
<p>boot目录 maven运行需要的加载类</p>
<p>conf目录 settings.xml整个maven工具核心配置文件</p>
<p>lib目录 maven运行依赖jar包</p>
<h2 id="Maven本地仓库的配置"><a href="#Maven本地仓库的配置" class="headerlink" title="Maven本地仓库的配置"></a>Maven本地仓库的配置</h2><p>在MAVE_HOME/conf/settings.xml文件中配置本地仓库</p>
<p><code>&lt;localRepository&gt;/Users/wanghui/mvn/repository&lt;/localRepository&gt;</code></p>
<p>在控制台上输入<code>mvn --version</code>就可以看到MAVE_HOME</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> mvn --version</span><br><span class="line">Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-25T02:41:47+08:00)</span><br><span class="line">Maven home: /usr/local/Cellar/maven/3.6.0/libexec  //这里就是MAVE_HOME位置</span><br><span class="line">Java version: 1.8.0_202, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre</span><br><span class="line">Default locale: zh_CN, platform encoding: UTF-8</span><br><span class="line">OS name: "mac os x", version: "10.13.6", arch: "x86_64", family: "mac"</span><br></pre></td></tr></table></figure>
<h2 id="Maven项目工程目录约定"><a href="#Maven项目工程目录约定" class="headerlink" title="Maven项目工程目录约定"></a>Maven项目工程目录约定</h2><p>创建一个maven项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project</span><br><span class="line">  | src</span><br><span class="line">  |    | main</span><br><span class="line">  |    |     | java        ----存放项目的.java文件</span><br><span class="line">  |    |     | resources   ----存放项目资源文件，如spring，hibernate配置文件</span><br><span class="line">             | webapp      ----web工程的主目录</span><br><span class="line">                 | WEB-INF</span><br><span class="line">                     | web.xml</span><br><span class="line">       | test</span><br><span class="line">             | java       ----存放所有测试.java文件，入JUnit测试类</span><br><span class="line">             | resources  ----测试资源文件</span><br><span class="line">  | target</span><br><span class="line">  | pom.xml               ----maven项目核心配置文件</span><br></pre></td></tr></table></figure>
<h2 id="Maven的常用命令"><a href="#Maven的常用命令" class="headerlink" title="Maven的常用命令"></a>Maven的常用命令</h2><p>compile:编译，将.java文件编译为.class文件，并存放在target目录下</p>
<p>test：测试</p>
<p>clear：清理命令，删除target目录的内容</p>
<p>package：打包命令，对java工程打成jar包，对web工程打成war包</p>
<p>install：执行install将maven打成jar包或war包发布到本地仓库</p>
<h2 id="Maven在idea里的配置"><a href="#Maven在idea里的配置" class="headerlink" title="Maven在idea里的配置"></a>Maven在idea里的配置</h2><p><img src="/2019/06/12/2019-06-12-Maven/maven.jpg" alt="maven"></p>
<h2 id="maven工程的jar包冲突问题的解决方式"><a href="#maven工程的jar包冲突问题的解决方式" class="headerlink" title="maven工程的jar包冲突问题的解决方式"></a>maven工程的jar包冲突问题的解决方式</h2><p>maven的jar包冲突原理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A-&gt;B-&gt;C-&gt;D1(log 15.0)：A中包含对B的依赖，B中包含对C的依赖，C中包含对D1的依赖，假设是D1是日志jar包，version为15.0</span><br><span class="line"></span><br><span class="line">E-&gt;F-&gt;D2(log 16.0)：E中包含对F的依赖，F包含对D2的依赖，假设是D2是同一个日志jar包，version为16.0</span><br></pre></td></tr></table></figure>
<p>当pom.xml文件中引入A、E两个依赖后，根据Maven传递依赖的原则，D1、D2都会被引入，而D1、D2是同一个依赖D的不同版本。<br>当我们在调用D2中的method1()方法，而D1中是15.0版本（method1可能是D升级后增加的方法），可能没有这个方法，这样JVM在加载A中D1依赖的时候，找不到method1方法，就会报NoSuchMethodError的错误，此时就产生了jar包冲突。</p>
<p>注：<br>如果在调用method2()方法的时候，D1、D2都含有这个方法（且升级的版本D2没有改动这个方法，这样即使D有多个版本，也不会产生版本冲突的问题。）</p>
<p>解决jar包冲突的方案：</p>
<p>方案一：</p>
<p>第一声明优先原则：哪个jar包的坐标在靠上的位置，这个jar包就是先声明的。先声明的jar包坐标下的依赖包，可以优先进入项目中。</p>
<p>方案二：</p>
<p>直接依赖：项目中直接导入的jar包，就是该项目的直接依赖包<br>传递依赖：项目中没有直接导入的jar包，可以通过项目直接依赖jar包传递到项目中</p>
<p>路径就近优先原则。直接依赖路径比传递依赖路径近，那么最终项目进入的jar包会是路径近的直接依赖</p>
<p>方案三：(推荐使用)</p>
<p>直接排除法</p>
<p>当我们要排除某个jar包下的依赖包，在配置exclusions标签的时候，内部可以不写版本号。因为此时依赖包使用的版本和默认的本jar包的版本一样</p>
<p>例如以下配置：spring-beans使用的是5.1.5.RELEASE，其所依赖的spring-core版本也是5.1.5.RELEASE。spring-context版本4.3.22.RELEASE，其所依赖的spring-core版本也是4.3.22.RELEASE。根据就近原则spring-core版本应该是5.1.5.RELEASE。因为添加了spring-core的exclusion，所以5.1.5.RELEASE的版本失效。最终spring-core的版本为4.3.22.RELEASE。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.22.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<p>exclusion的实效权限最大，实效后就不在有对应的版本信息。然后是直接依赖，存在直接依赖时，直接依赖会&gt;就近原则，即是有直接依赖的话，无论近远，都用的直接依赖，如果都不存在直接依赖，存在的都是传递依赖，这时才使用就近原则。</p>
<h2 id="jar包的锁定"><a href="#jar包的锁定" class="headerlink" title="jar包的锁定"></a>jar包的锁定</h2><p><dependencymanagement>标签用于锁定jar包</dependencymanagement></p>
<p>例如B依赖A，A是父工程。此时如果不对A中的部分jar包锁定，如果B中有对应的其他版本的jar包，B工程中会优先使用自己的jar包。如果对A中的部分jar包采用dependencyManagement标签锁定，B只能使用A中被锁定的版本的jar包</p>
<p>锁定的写法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序法</title>
    <url>/2019/06/09/2019-06-08-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4" color="red">这是一篇关于冒泡排序的方法</font></center>

<a id="more"></a>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h2><p>对于一组包含n个数据的记录，冒泡排序在最坏的情况下需要进行n-1趟排序</p>
<ul>
<li><p>第1趟：依次比较0和1、1和2、2和3…（n-2）和（n-1）索引的元素，如果发现第1个数据大于第2个数据，交换他们，经过第1趟排序，最大的元素排到了最后</p>
</li>
<li><p>第2趟：依次比较0和1、1和2、2和3…（n-3）和（n-3）索引的元素，如果发现第1个数据大于第2个数据，交换他们，经过第2趟排序，第二大的元素排到了倒数第二个位置<br>…</p>
</li>
<li><p>第n-1趟：比较0和1索引的元素，如果发现第1个数据大于第2个数据，交换他们，经过第n-1趟排序，第二小的元素排到了第二个位置</p>
</li>
</ul>
<h2 id="动图展示"><a href="#动图展示" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src="/2019/06/09/2019-06-08-冒泡排序法/BubbleSort.gif" alt></p>
<h2 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;arr.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp=arr[j];</span><br><span class="line">                    arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度：O(n²)</p>
<ul>
<li><p>空间复杂度：O(1)，只需要一个额外空间用于交换</p>
</li>
<li><p>稳定性：冒泡排序是稳定的排序算法</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>冒泡</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序法</title>
    <url>/2019/06/13/2019-06-12-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/</url>
    <content><![CDATA[<center><font size="4" color="red">这是一篇关于选择排序的方法</font></center>

<a id="more"></a>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h2 id="动图展示"><a href="#动图展示" class="headerlink" title="动图展示"></a>动图展示</h2><p><img src="/2019/06/13/2019-06-12-选择排序法/SelectSort.gif" alt></p>
<h2 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] select(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="comment">//只需要执行arr.length-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">            min=arr[i];</span><br><span class="line">            <span class="comment">//比较次数逐次递减</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=arr.length-<span class="number">1</span>-i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                判断：</span></span><br><span class="line"><span class="comment">                如果min大小接下来的值，将接下来的值赋给min,并记下该索引的位置</span></span><br><span class="line"><span class="comment">                否则继续迭代</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (min&gt;arr[arr.length-j])&#123;</span><br><span class="line">                    min=arr[arr.length-j];</span><br><span class="line">                    index=arr.length-j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换索引为index和最初的那个值的位置</span></span><br><span class="line">            <span class="keyword">if</span> (index!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                temp=arr[i];</span><br><span class="line">                arr[i]=arr[index];</span><br><span class="line">                arr[index]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>选择排序的交换操作介于 0 和 (n - 1） 次之间。选择排序的比较操作为 n (n - 1） / 2 次之间</p>
<h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中两个5的相对前后顺序就被破坏了，所以选择排序是一个不稳定的排序算法。</p>
]]></content>
  </entry>
  <entry>
    <title>web.xml文件头声明</title>
    <url>/2019/06/12/2019-06-12-web-xml%E6%96%87%E4%BB%B6%E5%A4%B4%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于web.xml文件头声明的各个版本的总结</font></center>

<a id="more"></a>
<h1 id="web-xml文件头声明各个版本参考"><a href="#web-xml文件头声明各个版本参考" class="headerlink" title="web.xml文件头声明各个版本参考"></a>web.xml文件头声明各个版本参考</h1><ol>
<li>Servlet 3.1</li>
</ol>
<p>Java EE 7 XML schema, namespace is <a href="http://xmlns.jcp.org/xml/ns/javaee/" target="_blank" rel="noopener">http://xmlns.jcp.org/xml/ns/javaee/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Servlet 3.0</li>
</ol>
<p>Java EE 6 XML schema, namespace is <a href="http://java.sun.com/xml/ns/javaee" target="_blank" rel="noopener">http://java.sun.com/xml/ns/javaee</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Servlet 2.5</li>
</ol>
<p>Java EE 5 XML schema, namespace is <a href="http://java.sun.com/xml/ns/javaee" target="_blank" rel="noopener">http://java.sun.com/xml/ns/javaee</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Servlet 2.4</li>
</ol>
<p>J2EE 1.4 XML schema, namespace is <a href="http://java.sun.com/xml/ns/j2ee" target="_blank" rel="noopener">http://java.sun.com/xml/ns/j2ee</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">version</span>=<span class="string">"2.4"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet 2.4 Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>Servlet 2.3</li>
</ol>
<p>J2EE 1.3 DTDs schema. This web.xml file is too old, highly recommend you to upgrade it.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet 2.3 Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web.xml</category>
      </categories>
      <tags>
        <tag>文件头</tag>
        <tag>版本</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell基本命令</title>
    <url>/2019/06/19/2019-06-19-Shell%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于Shell脚本语言的基本命令文档</font></center>

<a id="more"></a>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-e filename 如果 filename存在，则为真</span><br><span class="line">-d filename 如果 filename为目录，则为真</span><br><span class="line">-f filename 如果 filename为常规文件，则为真</span><br><span class="line">-L filename 如果 filename为符号链接，则为真</span><br><span class="line">-r filename 如果 filename可读，则为真</span><br><span class="line">-w filename 如果 filename可写，则为真</span><br><span class="line">-x filename 如果 filename可执行，则为真</span><br><span class="line">-s filename 如果文件长度不为0，则为真</span><br><span class="line">-h filename 如果文件是软链接，则为真</span><br><span class="line">filename1 -nt filename2 如果 filename1比 filename2新，则为真。</span><br><span class="line">filename1 -ot filename2 如果 filename1比 filename2旧，则为真。</span><br><span class="line">-eq 等于</span><br><span class="line">-ne 不等于</span><br><span class="line">-gt 大于</span><br><span class="line">-ge 大于等于</span><br><span class="line">-lt 小于</span><br><span class="line">-le 小于等于</span><br><span class="line">至于！号那就是取非了呗！</span><br></pre></td></tr></table></figure>
<h2 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spawn 调用要执行的命令</span><br><span class="line">expect 等待命令提示信息的出现，也就是捕捉用户输入的提示：</span><br><span class="line">send 发送需要交互的值，替代了用户手动输入内容</span><br><span class="line">set 设置变量值</span><br><span class="line"></span><br><span class="line">interact 执行完成后保持交互状态，把控制权交给控制台</span><br><span class="line">expect eof 这个一定要加，与spawn对应表示捕获终端输出信息终止</span><br><span class="line">expect脚本必须以interact或expect eof结束，执行自动化任务通常expect eof就够了</span><br><span class="line"></span><br><span class="line">设置expect永不超时</span><br><span class="line">set timeout -1</span><br><span class="line">设置expect 300秒超时，如果超过300没有expect内容出现，则推出</span><br><span class="line">set timeout 300</span><br><span class="line"></span><br><span class="line">expect编写语法，expect使用的是tcl语法。</span><br><span class="line">一条Tcl命令由空格分割的单词组成. 其中, 第一个单词是命令名称, 其余的是命令参数</span><br><span class="line">cmd arg arg arg</span><br><span class="line">$符号代表变量的值. 在本例中, 变量名称是foo.</span><br><span class="line">$foo</span><br><span class="line">方括号执行了一个嵌套命令. 例如, 如果你想传递一个命令的结果作为另外一个命令的参数, 那么你使用这个符号</span><br><span class="line">[cmd arg]</span><br><span class="line">双引号把词组标记为命令的一个参数. &quot;$&quot;符号和方括号在双引号内仍被解释</span><br><span class="line">&quot;some stuff&quot;</span><br><span class="line">大括号也把词组标记为命令的一个参数. 但是, 其他符号在大括号内不被解释</span><br><span class="line">&#123;some stuff&#125;</span><br><span class="line"></span><br><span class="line">反斜线符号是用来引用特殊符号. 例如：n 代表换行. 反斜线符号也被用来关闭&quot;$&quot;符号, 引号,方括号和大括号的特殊含义</span><br></pre></td></tr></table></figure>
<h1 id="使用shell编写的科学上网的脚本"><a href="#使用shell编写的科学上网的脚本" class="headerlink" title="使用shell编写的科学上网的脚本"></a>使用shell编写的科学上网的脚本</h1><p>开启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/usr/bin/expect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>user login</span><br><span class="line"></span><br><span class="line">set user root</span><br><span class="line">set host 192.168.xx.x</span><br><span class="line">set password *******</span><br><span class="line">set timeout 60</span><br><span class="line"></span><br><span class="line">spawn ssh $user@$host</span><br><span class="line"></span><br><span class="line">expect "password:"</span><br><span class="line">send "$password\n"</span><br><span class="line"></span><br><span class="line">expect "~#"</span><br><span class="line">send "monlor\n"</span><br><span class="line"></span><br><span class="line">expect "请输入你的选择："</span><br><span class="line">send "04\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "1\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "~#"</span><br><span class="line">send "exit\n"</span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure>
<p>关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/usr/bin/expect</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> user layout</span><br><span class="line"></span><br><span class="line">set user root</span><br><span class="line">set host 192.168.xx.x</span><br><span class="line">set password *******</span><br><span class="line">set timeout 60</span><br><span class="line"></span><br><span class="line">spawn ssh $user@$host</span><br><span class="line"></span><br><span class="line">expect "password:"</span><br><span class="line">send "$password\n"</span><br><span class="line"></span><br><span class="line">expect "~#"</span><br><span class="line">send "monlor\n"</span><br><span class="line"></span><br><span class="line">expect "请输入你的选择："</span><br><span class="line">send "04\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "1/0"</span><br><span class="line">send "0\n"</span><br><span class="line"></span><br><span class="line">expect "~#"</span><br><span class="line">send "exit\n"</span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署项目-项目运行01</title>
    <url>/2019/06/22/2019-06-22-Jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<center><font size="4" color="red">持续集成，持续交付第二章-项目运行01</font></center>

<a id="more"></a>
<h2 id="GitLab连接Jenkins"><a href="#GitLab连接Jenkins" class="headerlink" title="GitLab连接Jenkins"></a>GitLab连接Jenkins</h2><h4 id="发布项目到gitlab上"><a href="#发布项目到gitlab上" class="headerlink" title="发布项目到gitlab上"></a>发布项目到gitlab上</h4><ol>
<li><p>创建项目</p>
</li>
<li><p>将本机项目中的.git文件删除</p>
</li>
<li><p>配置gitlab与本机连接的密钥</p>
</li>
<li><p>将本机里的项目发布到gitlab仓库中</p>
</li>
</ol>
<blockquote>
<p>注意的一个点:这里不能使用域名.只能使用ip地址.下面的jenkins克隆代码也是只能使用ip地址</p>
</blockquote>
<h4 id="GitLab连接Jenkins-1"><a href="#GitLab连接Jenkins-1" class="headerlink" title="GitLab连接Jenkins"></a>GitLab连接Jenkins</h4><ol>
<li><p>进入jenkins容器</p>
<p> <code>cd /usr/local/jenkins</code></p>
<p> <code>docker exec -it jenkins /bin/bash</code>:进入容器,并以bash呈现,其实就是进入了终端</p>
</li>
<li><p>在容器中进入具有可执行权限的jenkins_hone目录</p>
<p> <code>cd /var/jenkins_home/</code></p>
</li>
<li><p>在容器中生成一个SSH密钥</p>
<p> <code>ssh-keygen -t rsa -C &quot;hui@hui.com&quot; -b 4096</code></p>
<p> 查看秘钥</p>
<p> <code>cat /var/jenkins_home/.ssh/id_rsa.pub</code></p>
<p> 将查到的密钥粘贴到gitlab中,起名为Jenkins</p>
</li>
<li><p>将gitlab中的项目克隆到<code>/var/jenkins_home/</code>目录下</p>
<p> <code>git clone ssh://git@192.168.12.140:2222/hui/myshop.git</code></p>
</li>
<li><p>验证是否gitlab与jenkins连接</p>
<p> <code>cd .ssh/</code>,如果在.ssh目录下有known_hosts,则说明连接成功</p>
</li>
</ol>
<h2 id="新增一台机器"><a href="#新增一台机器" class="headerlink" title="新增一台机器"></a>新增一台机器</h2><p>这台机器我用于存放JDK(其实只需要JRE),Maven和tomcat。ip:192.168.12.146</p>
<p>需要在这台机器的/usr/local目录下新建一个jenkins,用于jenkins访问的目录</p>
<ol>
<li><p>进入Jenkins页面</p>
</li>
<li><p>系统管理–&gt;系统设置–&gt;Publish over SSH</p>
<p> 添加虚拟机的私钥</p>
<p> <code>cat /var/jenkins_home/.ssh/id_rsa.pub</code></p>
<p> 将秘钥复制到”key”中</p>
<p> 点击新增</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/01.png" alt></p>
<p> 这里需要把刚刚创建的一台虚拟机新增进来,访问方式是SSH方式访问</p>
<p> 点击”高级”,选上密码复选框,密码为新增这台虚拟机的开机密码.整体配置如下</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/02.jpg" alt></p>
<p> 点击<code>Test Configuration</code>进行测试,如果出现Success,则连接成功</p>
<p> 最后点击应用–&gt;保存</p>
</li>
</ol>
<h2 id="使用Jenkins构建项目"><a href="#使用Jenkins构建项目" class="headerlink" title="使用Jenkins构建项目"></a>使用Jenkins构建项目</h2><ol>
<li><p>新建任务,输入一个任务名称.我这里依然用了gitlab中的项目名称myshop,然后选择构建一个maven项目,点击确定</p>
</li>
<li><p>选择”丢弃旧的构建”,保持构建的最大个数填”10”,意思是每次都保留最新的10个构建,其他丢弃</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/03.png" alt></p>
<p> 选择”源码管理”</p>
<p> 选择git,”Repository URL”填写gitlab中的项目地址,要把域名改为ip</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/04.jpg" alt></p>
<p> 然后点击应用–&gt;保持</p>
</li>
<li><p>点击”立即构建”</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/05.jpg" alt></p>
<p> 可以通过构建历史查看记录</p>
<p> 也可以通过点击那个小红点查看控制台输出</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/06.jpg" alt></p>
<p> 这是个构建失败的例子,因为我没有配置maven和JDK</p>
</li>
<li><p>配置JDK和Maven</p>
<p> 系统管理–&gt;全局工具配置</p>
<p> JDK,JDK的下载我是从oracle公司下载的,因此需要登录</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/07.png" alt></p>
<p> Maven</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/08.jpg" alt></p>
<p> 应用–&gt;保存</p>
</li>
<li><p>再次回到”立即构建”,此时就会开始下载jdk和maven,然后构建项目</p>
<p> 在”我的视图”里可以查看是一下情况,则构建成功</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/09.jpg" alt></p>
</li>
</ol>
<h2 id="Jenkis连接gitlab中的项目标签"><a href="#Jenkis连接gitlab中的项目标签" class="headerlink" title="Jenkis连接gitlab中的项目标签"></a>Jenkis连接gitlab中的项目标签</h2><ol>
<li><p>在gitlab的myshop项目中新建一个标签</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/10.jpg" alt></p>
<p> 点击标签,然后新建,填入标签名称:1.0.0</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/11.png" alt></p>
</li>
<li><p>点击项目名称</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/12.jpg" alt></p>
<p> 进去后选择”配置”</p>
<p> 选择参数化构建过程,配置如下,这步必须已经装上了<code>Extended Choice Parameter plugin</code>插件</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/13.png" alt></p>
<p> Groovy Script的脚本文件</p>
<p> 注意:要保证<code>/var/jenkins_home/workspace/myshop</code>路径正确</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def ver_keys = [ 'bash', '-c', 'cd /var/jenkins_home/workspace/myshop;git pull&gt;/dev/null; git remote prune origin &gt;/dev/null; git tag -l|sort -r |head -10 ' ]</span><br><span class="line">ver_keys.execute().text.tokenize('\n')</span><br></pre></td></tr></table></figure>
<p> 配置这个是为了通过gitlab的标签进行参数化构建</p>
</li>
<li><p>“源码管理”从git改为无</p>
</li>
<li><p>添加shell自动构建脚本</p>
<p> <img src="/2019/06/22/2019-06-22-Jenkins部署项目-项目运行/14.png" alt></p>
<p> 注意<code>/var/jenkins_home/workspace/myshop</code>路径别错了</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $RELEASE_VERSION</span><br><span class="line">cd /var/jenkins_home/workspace/myshop</span><br><span class="line">git checkout $RELEASE_VERSION</span><br><span class="line">git pull origin $RELEASE_VERSION</span><br><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
</li>
<li><p>应用–&gt;保存</p>
</li>
<li><p>点击<code>Build with Parameters</code>开始构建,第一次需要同意运行脚本,同意后再次点击<code>Build with Parameters</code>开始构建</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>mysql</tag>
        <tag>redis</tag>
        <tag>nexus</tag>
        <tag>jekins</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>01_vue的入门</title>
    <url>/2019/11/21/2019-11-20-01-vue%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<center><font size="4" color="red">01_vue的入门</font></center>

<a id="more"></a>
<h2 id="MVC和MVVM关系图"><a href="#MVC和MVVM关系图" class="headerlink" title="MVC和MVVM关系图"></a>MVC和MVVM关系图</h2><p><img src="/2019/11/21/2019-11-20-01-vue的入门/01.png" alt></p>
<h4 id="MVVM详解"><a href="#MVVM详解" class="headerlink" title="MVVM详解"></a>MVVM详解</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/vue/2.2.2/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MVVM中的M --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; massage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        //MVVM中的MV</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',  //标记属性，指定是使用的哪个M</span><br><span class="line">            //MVVM中的V</span><br><span class="line">            data:&#123;     //数据交互</span><br><span class="line">                massage:'欢迎来到Vue'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Vue常用语法"><a href="#Vue常用语法" class="headerlink" title="Vue常用语法"></a>Vue常用语法</h4><ol>
<li>v-html  : 获取html格式的数据</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"massage"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="xml">                massage:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>v-bind: 用于绑定属性</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .testfont&#123;</span><br><span class="line">        font-size: 300%</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"haha"</span>&gt;</span>修改大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"use"</span> <span class="attr">id</span>=<span class="string">"haha"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'testfont':use&#125;"</span>&gt;</span></span><br><span class="line">            wanghui</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                use:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>字符串先拆分成数组，再反转，再合并</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        &#123;&#123; massage.split('').reverse().join('')&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                massage:'helloworld'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>v-if:用于做判断</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"haha"</span>&gt;</span>点击显示和消失<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"flag"</span> <span class="attr">id</span>=<span class="string">"haha"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">flag</span>&gt;</span>精忠报国<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                flag:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>参数</li>
</ol>
<p>参数要跟着指令后面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                url:'https://www.baidu.com'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>v-model</li>
</ol>
<p>用于数据的双向绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: &#123;</span><br><span class="line">        message: 'Runoob!'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-bind和v-model的区别"><a href="#v-bind和v-model的区别" class="headerlink" title="v-bind和v-model的区别"></a>v-bind和v-model的区别</h4><p>v-bind是数据的单向绑定，被v-bind绑定的数据，如果在M数据层修改了数据，那在V视图层也会被修改。v-bind可以省略，只写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; massage &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;input type="text" value="massage"&gt;  这样写没有吧massage绑定到value上--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单向绑定的解释：massage是显示在V视图层上的，此时修改text里的值，就是修改V视图上的值，因为数据没有同步到M数据层</span></span><br><span class="line"><span class="comment">             ，所以&lt;div&gt;&#123;&#123; massage &#125;&#125;&lt;/div&gt;中的massage不会改变</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"massage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                massage:'hellword!!!'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-model是数据的双向绑定，被v-model绑定的数据，在M数据层修改，在V视图层会被修改。在V视图层修改的数据，在M数据层也会被修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; massage &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;input type="text" value="massage"&gt;  这样写没有吧massage绑定到value上--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双向绑定的解释：massage是显示在V视图层上的，此时修改text里的值，就是修改V视图上的值，因为是双向绑定，数据同步到M数据层</span></span><br><span class="line"><span class="comment">                ，而&lt;div&gt;&#123;&#123; massage &#125;&#125;&lt;/div&gt;中的massage就是从M层获取的，所以也会跟着改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            写了v-model后，就不用写value了</span></span><br><span class="line"><span class="comment">            v-model使用场合：</span></span><br><span class="line"><span class="comment">            只能用于表单元素中，例如：</span></span><br><span class="line"><span class="comment">            input&#123;radio,text,address,email...&#125;   select   checkbox   textarea</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"massage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                massage:'hellword!!!'</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"cli"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-if是每次都是DOM的删除或者新增 相当于&lt;pre v-if="seen"&gt;&lt;h1&gt;HelloWorld&lt;/h1&gt;&lt;/pre&gt;被完全删除或者新增--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-if 有较高的切换性能消耗 使用场合：如果元素可能永远不会被显示出来被客户看到，推荐v-if --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-show不会删除DOM，只是把属性改成display=none --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-show有较高的初始渲染消耗 使用场合：元素频繁被切换，推荐v-show，而不用v-if --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">v-show</span>=<span class="string">"seen"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                seen:false</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                cli()&#123;</span><br><span class="line">                    this.seen=!this.seen</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通的循环 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"site in sites"</span>&gt;</span></span><br><span class="line">            &#123;&#123; site.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环出来key和value 数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(key,value) in sites"</span>&gt;</span></span><br><span class="line">            &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(key,value) in object"</span>&gt;</span></span><br><span class="line">            &#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- index为索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(key,value,index) in object"</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;:&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环数字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span></span><br><span class="line">            &#123;&#123;n&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                sites:[</span><br><span class="line">                    &#123;'name':"zhangsan"&#125;,</span><br><span class="line">                    &#123;'name':'lisi'&#125;,</span><br><span class="line">                    &#123;'name':'wangwu'&#125;</span><br><span class="line">                ],</span><br><span class="line">                object:&#123;</span><br><span class="line">                    name:'zhangsan',</span><br><span class="line">                    age:18,</span><br><span class="line">                    address:'中国'</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>MVVM</tag>
        <tag>vue base</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署项目-项目运行02</title>
    <url>/2019/06/26/2019-06-25-Jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C02/</url>
    <content><![CDATA[<center><font size="4" color="red">持续集成，持续交付第二章-项目运行02</font></center>

<a id="more"></a>
<h2 id="jenkins使用触发远程构建连接gitlab"><a href="#jenkins使用触发远程构建连接gitlab" class="headerlink" title="jenkins使用触发远程构建连接gitlab"></a>jenkins使用触发远程构建连接gitlab</h2><p>在jenkins中新建项目–&gt;选择pipeline</p>
<p>配置–&gt;Discard old builds(填写保留10)–&gt;选触发远程构建</p>
<p>身份令牌:123456(随便设置的)</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/01.png" alt></p>
<p>在全局安全设置里需要设置:</p>
<ol>
<li><p>匿名用户具有可读权限打钩</p>
</li>
<li><p>防止跨站点请求伪造去掉钩</p>
</li>
</ol>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/02.png" alt></p>
<p>进入gitlab,找到需要构建的项目–&gt;设置–&gt;集成(导入所有仓库)</p>
<p>URL:填写图1中的链接(填写ip地址,token为令牌密码)</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/03.png" alt></p>
<p>如果test不成功,则使用root用户登录gitlab</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/04.png" alt></p>
<p>如图设置</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/05.png" alt></p>
<p>设置一下网络</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/06.png" alt></p>
<p>配置pipeline脚本</p>
<p>在jenkins里选择项目–&gt;配置–&gt;流水线</p>
<p>然后在pipeline的脚本里写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    agent any</span><br><span class="line">    tools&#123;</span><br><span class="line">        maven 'Maven 3'</span><br><span class="line">    &#125;</span><br><span class="line">    environment&#123;</span><br><span class="line">        REPOSITORY="ssh://git@192.168.10.140:2222/my-shop/myshop-dependencies.git"</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages&#123;</span><br><span class="line">        stage('获取代码') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo "start fetch code from git:$&#123;REPOSITORY&#125;"</span><br><span class="line">                deleteDir()</span><br><span class="line">                git "$&#123;REPOSITORY&#125;"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('代码静态检查') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo "start code check"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('编译+单元测试') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo "start compile"</span><br><span class="line">                sh "mvn -B -DskipTests clean package"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('构建镜像') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo "start build image"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage('发布系统') &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo "start deploy"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意以下两点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent any</span><br><span class="line">    tools&#123;</span><br><span class="line">        maven 'Maven 3'</span><br><span class="line">    &#125;</span><br><span class="line">    environment&#123;</span><br><span class="line">        REPOSITORY="ssh://git@192.168.10.140:2222/my-shop/myshop-dependencies.git"</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>maven的名称来源于jenkins中maven的配置中的name</p>
<p>Manage Jenkins–&gt;全局工具配置</p>
<p><img src="/2019/06/26/2019-06-25-Jenkins部署项目-项目运行02/07.png" alt></p>
<p><code>REPOSITORY=&quot;ssh://git@192.168.10.140:2222/my-shop/</code>来源于gitlab中的项目</p>
<h4 id="设置docker的远程访问"><a href="#设置docker的远程访问" class="headerlink" title="设置docker的远程访问"></a>设置docker的远程访问</h4><p>凡是装有docker,并需要远程访问的虚拟机都要设置,我这里以设置jenkins虚拟机为例子</p>
<p><code>vi /etc/systemd/system/multi-user.target.wants/docker.service</code></p>
<p>将<code># for containers run by docker</code>下改为:</p>
<p><code>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p>
<p>关闭防火墙</p>
<p><code>ufw disable</code></p>
<p>重启docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> systemctl daemon-reload</span><br><span class="line"><span class="meta">$</span> sudo service docker restart</span><br></pre></td></tr></table></figure>
<p>在Jenkins中安装<code>docker插件</code></p>
<p>Manage Jenkins–&gt;系统设置–&gt;云–&gt;新增一个docker云</p>
<p>起个name,后面用的到.name:docker-jenkins</p>
<p><code>Docker Host URI:tcp://192.168.21.143:2375</code>:ip为开启的远程docekr的机器ip</p>
<p>测试–&gt;出现docker版本号就说明连接成功了</p>
<h4 id="jenkins连接harbor"><a href="#jenkins连接harbor" class="headerlink" title="jenkins连接harbor"></a>jenkins连接harbor</h4><p>Manage Jenkins–&gt;系统设置–&gt;Pipeline Model Definition</p>
<p><code>Docker Label:harbor</code></p>
<p><code>Docker registry URL:http://192.168.21.xx</code>(这个是harbor虚拟机的ip地址)</p>
<p>添加Jenkins</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>mysql</tag>
        <tag>redis</tag>
        <tag>nexus</tag>
        <tag>jekins</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>GitFlow工作流</title>
    <url>/2019/06/25/2019-06-24-GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<center><font size="4" color="red">GitFlow的分支介绍</font></center>

<a id="more"></a>
<h2 id="GitFlow分支介绍"><a href="#GitFlow分支介绍" class="headerlink" title="GitFlow分支介绍"></a>GitFlow分支介绍</h2><h4 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h4><p>master分支：是最终稳定能成型的代码分支。更新次数一月或者两月一次</p>
<p>develop分支：开发人员用的主分支，存放经过测试后没有问题的代码分支</p>
<p><img src="/2019/06/25/2019-06-24-GitFlow工作流/01.png" alt></p>
<h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><p>feature分支：是开发人员写功能的分支，开发人员在develop分支下新建一个feature分支，例如feature-login，然后开始编写功能，最后功能测试没有问题时，将其合并到develop分支中。</p>
<p><img src="/2019/06/25/2019-06-24-GitFlow工作流/02.png" alt></p>
<h4 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h4><p>release分支：一旦develop分支上有了一次发布的足够功能，从develop分支上fork一个release分支(基于develop分支创建)。</p>
<p>此后：</p>
<ol>
<li><p>该分支不能再添加新的功能，只能做Bug修复，文档生成和其它面向发布任务。</p>
</li>
<li><p>发布任务完成后，合并到master分支上，并打上tag</p>
</li>
<li><p>还有合并回develop分支一份</p>
</li>
</ol>
<h4 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h4><p>hotfix分支：修复Bug的分支，其是唯一一个可以从master分支fork的分支(基于master分支创建)。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个中央仓库。</p>
<h4 id="创建开发分支："><a href="#创建开发分支：" class="headerlink" title="创建开发分支："></a>创建开发分支：</h4><p>第一步为master分支配套一个develop分支。简单来做可以本地创建一个空的develop分支，push到服务器上：</p>
<p>git branch develop<br>git push -u origin develop</p>
<p>以后这个分支将会包含了项目的全部历史，而master分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好develop分支的跟踪分支：</p>
<p>git clone ssh://user@host/path/to/repo.git<br>git checkout -b develop origin/develop</p>
<p>现在每个开发都有了这些历史分支的本地拷贝。</p>
<h4 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h4><p>这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于master分支，而是应该基于develop分支：</p>
<p>git checkout -b feature-login develop</p>
<p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：<br>git status<br>git add<br>git commit</p>
<h4 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h4><p>添加了提交后，小红觉得她的功能OK了。如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。否则她可以直接合并到她本地的develop分支后push到中央仓库：</p>
<p>git pull origin develop<br>git checkout develop<br>git merge feature-login<br>git push<br>git branch -d feature-login</p>
<p>第一条命令在合并功能前确保develop分支是最新的。注意，功能决不应该直接合并到master分支。冲突解决方法和集中式工作流一样。</p>
<h4 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h4><p>这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p>
<p>git checkout -b release-0.1 develop</p>
<p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p>
<p>只要小红创建这个分支并push到中央仓库，这个发布就是功能冻结的。任何不在develop分支中的新功能都推到下个发布循环中。</p>
<h4 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h4><p>一旦准备好了对外发布，小红合并修改到master分支和develop分支上，删除发布分支。合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。另外，如果小红的团队要求Code Review，这是一个发起Pull Request的理想时机。</p>
<p>git checkout master<br>git merge release-0.1<br>git push<br>git checkout develop<br>git merge release-0.1<br>git push<br>git branch -d release-0.1</p>
<p>发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。只要有合并到master分支，就应该打好Tag以方便跟踪。</p>
<p>git tag -a 0.1 -m “Initial public release” master<br>git push –tags</p>
<p>Git有提供各种勾子（hook），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你push中央仓库的master分支时，自动构建好对外发布。</p>
<h4 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现Bug</h4><p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。为了处理Bug，小红（或小明）从master分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回master分支：<br>git checkout -b issue-#001 master<br># Fix the bug<br>git checkout master<br>git merge issue-#001<br>git push</p>
<p>就像发布分支，维护分支中新加这些重要修改需要包含到develop分支中，所以小红要执行一个合并操作。然后就可以安全地删除这个分支了：</p>
<p>git checkout develop<br>git merge issue-#001<br>git push<br>git branch -d issue-#001</p>
<h2 id="GitFlow的基本命令操作"><a href="#GitFlow的基本命令操作" class="headerlink" title="GitFlow的基本命令操作"></a>GitFlow的基本命令操作</h2><h4 id="Gitflow安装"><a href="#Gitflow安装" class="headerlink" title="Gitflow安装"></a>Gitflow安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 1.</span><br><span class="line">curl -L -O https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh</span><br><span class="line"><span class="meta">#</span> 2.</span><br><span class="line">sudo bash gitflow-installer.sh</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p><strong>初始化</strong>: git flow init</p>
</li>
<li><p><strong>开始新Feature</strong>: git flow feature start MYFEATURE</p>
</li>
<li><p><strong>Publish一个Feature(也就是push到远程)</strong>: git flow feature publish MYFEATURE</p>
</li>
<li><p><strong>获取Publish的Feature</strong>: git flow feature pull origin MYFEATURE</p>
</li>
<li><p><strong>完成一个Feature</strong>: git flow feature finish MYFEATURE</p>
</li>
<li><p><strong>开始一个Release</strong>: git flow release start RELEASE [BASE]</p>
</li>
<li><p><strong>Publish一个Release</strong>: git flow release publish RELEASE</p>
</li>
<li><p><strong>发布Release</strong>: git flow release finish RELEASE<br>　别忘了git push –tags</p>
</li>
<li><p><strong>开始一个Hotfix</strong>: git flow hotfix start VERSION [BASENAME]</p>
</li>
<li><p><strong>发布一个Hotfix</strong>: git flow hotfix finish VERSIO</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure>
<p>这个命令会进行一些默认的配置，可以自动创建上面介绍的所有分支：master、develop、feature、relase、hotfix等分支。</p>
<p>完成后当前所在分支就变成 develop. 任何开发都必须从 develop 开始</p>
<p>当进行新功能开发的时候：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow feature start some_awesome_feature</span><br></pre></td></tr></table></figure>
<p>完成功能开发之后:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow feature finish some_awesome_feature</span><br></pre></td></tr></table></figure>
<p>该命令将会把feature/some_awesome_feature合并到develope分支，然后删除功能(feature)分支。</p>
<p>将一个 feature 分支推到远程服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow feature publish some_awesome_feature 或者 git push origin feature/some_awesome_feature</span><br></pre></td></tr></table></figure>
<p>当你的功能点都完成时（需要发布新版本了），就基于develop创建一个发布(release)分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow release start v0.1.0</span><br></pre></td></tr></table></figure>
<p>当你在完成（finish)一个发布分支时，它会把你所作的修改合并到master分支，同时合并回develop分支，所以，你不需要担心你的master分支比develop分支更加超前。</p>
<p>当系统出现问题的时候，需要进行紧急修改的时候，就好基于master创建一个维护（hotfix）分支。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git flow hotfix start v0.1.0</span><br></pre></td></tr></table></figure>
<p>当你在完成（finish)一个维护分支时，它会把你所作的修改合并到master分支，同时合并回develop分支。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git flow</tag>
      </tags>
  </entry>
  <entry>
    <title>03_vue常用属性</title>
    <url>/2019/11/21/2019-11-20-03-vue%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<center><font size="4" color="red">03_vue常用属性</font></center>

<a id="more"></a>
<h2 id="vue常用属性"><a href="#vue常用属性" class="headerlink" title="vue常用属性"></a>vue常用属性</h2><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><font color="red">该概念的应用还不熟悉</font>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message | filter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                message:'helloworld'</span><br><span class="line">            &#125;,</span><br><span class="line">            filters:&#123;</span><br><span class="line">                filter:function(value)&#123;</span><br><span class="line">                    if(!value) return ''</span><br><span class="line">                    value=value.toString()</span><br><span class="line">                    return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; site &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                name:'google',</span><br><span class="line">                url:'http://www.google.com',</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            //计算属性使用get时可以这样写</span><br><span class="line">            // computed:&#123;</span><br><span class="line">            //     site:function()&#123;</span><br><span class="line">            //         return this.message + '==' + this.addredd</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;</span><br><span class="line">            computed:&#123;</span><br><span class="line">                site:&#123;</span><br><span class="line">                    get:function()&#123;</span><br><span class="line">                        return this.name + ':' + this.url</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set:function(newvalue)&#123;</span><br><span class="line">                        //split(' ')是按照空格分割</span><br><span class="line">                        var names=newvalue.split(' ')</span><br><span class="line">                        this.names=names</span><br><span class="line">                        this.name=names[0]</span><br><span class="line">                        this.url = names[names.length - 1]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;)</span><br><span class="line">        //在运行 vm.site = '菜鸟教程 http://www.runoob.com'; 时，setter 会被调用， vm.name 和 vm.url 也会被对应更新</span><br><span class="line">        vm.site='菜鸟教程 http://www.runoob.com';</span><br><span class="line">        document.write('names:'+vm.names);</span><br><span class="line"><span class="xml">        document.write('<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span></span><br><span class="line">        document.write('name:'+vm.name);</span><br><span class="line"><span class="xml">        document.write('<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span></span><br><span class="line">        document.write('url: ' + vm.url);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="计算属性和不带返回值方法以及带返回值方法的使用"><a href="#计算属性和不带返回值方法以及带返回值方法的使用" class="headerlink" title="计算属性和不带返回值方法以及带返回值方法的使用"></a>计算属性和不带返回值方法以及带返回值方法的使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fun"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;func()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;funcom&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                //带有返回值的</span><br><span class="line">                func:function()&#123;</span><br><span class="line">                    return '你好'</span><br><span class="line">                &#125;,</span><br><span class="line">                //不带返回值的</span><br><span class="line">                fun:function()&#123;</span><br><span class="line">                    this.msg=this.msg+1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                funcom:function()&#123;</span><br><span class="line">                    return '你好啊'</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        米：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"meters"</span>&gt;</span></span><br><span class="line">        千米：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"kilometers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        var vm=new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                meters : 0,</span><br><span class="line">                kilometers : 0</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line">                meters:function(val)&#123;</span><br><span class="line">                    this.kilometers=val/1000;</span><br><span class="line">                    this.meters=kilometers;</span><br><span class="line">                &#125;,</span><br><span class="line">                kilometers:function(val)&#123;</span><br><span class="line">                    this.meters=val*1000;</span><br><span class="line">                    this.kilometers=meters</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //$watch是一个实例方法</span><br><span class="line">        //function(newValue,oldValue)留意一下newValue和oldValue的位置，不能反</span><br><span class="line">        vm.$watch('meters',function(newValue,oldValue)&#123;</span><br><span class="line">            alert('米修改前：'+oldValue+'    '+'米修改后:'+newValue)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>过滤器</tag>
        <tag>计算属性</tag>
        <tag>监听</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>02_vue的class属性绑定</title>
    <url>/2019/11/21/2019-11-20-02-vue%E7%9A%84class%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<center><font size="4" color="red">02_vue的class属性绑定</font></center>

<a id="more"></a>
<h2 id="vue的calss属性绑定"><a href="#vue的calss属性绑定" class="headerlink" title="vue的calss属性绑定"></a>vue的calss属性绑定</h2><p>vue一共有四种属性绑定的方式</p>
<ul>
<li><ol>
<li>使用数组</li>
</ol>
</li>
<li><ol start="2">
<li>使用三元表达式</li>
</ol>
</li>
<li><ol start="3">
<li>使用对象</li>
</ol>
</li>
<li><ol start="4">
<li>将对象写到data里</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .color&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .font&#123;</span><br><span class="line">        font-size: 300%</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :class实际上是v-bind:class --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.数组的形式 数组里要是字符串的形式，所以加'' --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.使用数组<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">:class</span>=<span class="string">"['color','font']"</span>&gt;</span>&#123;&#123;massage&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于改变flag的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"haha"</span>&gt;</span>点击查看样式<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"flag"</span> <span class="attr">id</span>=<span class="string">"haha"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.数组中写三元表达式的形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2.三元表达式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">:class</span>=<span class="string">"['color',flag?'font':'']"</span>&gt;</span>&#123;&#123;massage&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3.使用对象,使用对象时，''可加可不加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>3.使用对象<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">:class</span>=<span class="string">"&#123;color:true,font:flag&#125;"</span>&gt;</span>&#123;&#123;massage&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4.对象写到data里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>4.对象写到data里<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">:class</span>=<span class="string">"classStyle"</span>&gt;</span>&#123;&#123;massage&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:&#123;</span><br><span class="line">                massage:'精忠报国',</span><br><span class="line">                flag:false,</span><br><span class="line">                //&#123;color:true,font:true&#125;是对象，不能加''</span><br><span class="line">                classStyle:&#123;color:true,font:true&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>05_webpack</title>
    <url>/2019/11/21/2019-11-20-05-webpack/</url>
    <content><![CDATA[<center><font size="4" color="red">05_webpack</font></center>

<a id="more"></a>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h4 id="webpack的安装方法"><a href="#webpack的安装方法" class="headerlink" title="webpack的安装方法"></a>webpack的安装方法</h4><ol>
<li><p>运行<code>npm i webpack -g</code>,全局安装webpack，这样可以在全局使用webpack的命令</p>
</li>
<li><p>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</p>
</li>
</ol>
<h4 id="使用npm在根目录下安装Jquery"><a href="#使用npm在根目录下安装Jquery" class="headerlink" title="使用npm在根目录下安装Jquery"></a>使用npm在根目录下安装Jquery</h4><ol>
<li><p>先init一下<code>npm init -y</code></p>
</li>
<li><p>安装Jquery <code>npm i jquery -s</code></p>
</li>
</ol>
<h4 id="使用webpack打包"><a href="#使用webpack打包" class="headerlink" title="使用webpack打包"></a>使用webpack打包</h4><p>方式一：</p>
<p><code>webpack ./src/main.js ./dist/bundle.js</code></p>
<p>方式二：</p>
<p>在webpack.config.js中配置打包的路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//设置文件入口</span></span><br><span class="line">    entry:path.join(__dirname,<span class="string">'./src/main.js'</span>),</span><br><span class="line">    <span class="comment">//设置文件出口</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.join(__dirname,<span class="string">'./dist'</span>),  <span class="comment">//指定打包好的文件，输出到哪个目录中</span></span><br><span class="line">        filename:<span class="string">'bundle.js'</span>   <span class="comment">//指定输出文件的名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>目的：使用了html-webpack-plugin后，在index.html中可以不再导入bundle.js</li>
</ol>
<p>即<code>&lt;script src=&quot;./bundle.js&quot;&gt;&lt;/script&gt;</code>可以去掉</p>
<blockquote>
<p>注意：__dirname前面是两个_</p>
</blockquote>
<p>如果使用第二种方式，在控制台只需要输入<code>webpack</code>就可以实现打包</p>
<h4 id="使用webpack-dev-server工具实现自动打包编译"><a href="#使用webpack-dev-server工具实现自动打包编译" class="headerlink" title="使用webpack-dev-server工具实现自动打包编译"></a>使用webpack-dev-server工具实现自动打包编译</h4><ol>
<li><p>在本地项目下执行<code>npm i webpack-dev-server -D</code>,安装</p>
</li>
<li><p>但是由于我们是在本地项目中安装的webpack-dev-server，所以无法把它当作脚本文件执行（只有安装到全局-g的才能在powershell中执行）</p>
</li>
<li><p>此时如果想要执行该脚本，在package.json中添加上webpack-dev-server，然后在本地项目下运行<code>npm run dev</code></p>
</li>
</ol>
<p><img src="/2019/11/21/2019-11-20-05-webpack/01.png" alt></p>
<ol start="4">
<li>如果无法运行的话，需要本地项目下安装webpack</li>
<li>webpack打包好的bundle.js文件没有放到硬盘中，而是放到了内存中</li>
<li>在浏览器中输入<code>http://localhost:8080/</code></li>
</ol>
<p><img src="/2019/11/21/2019-11-20-05-webpack/02.png" alt></p>
<h4 id="webpack-dev-server下的一些参数"><a href="#webpack-dev-server下的一些参数" class="headerlink" title="webpack-dev-server下的一些参数"></a>webpack-dev-server下的一些参数</h4><ul>
<li>–open:执行完<code>npm run dev</code>自动打开浏览器</li>
<li>–port 3000:修改端口为3000</li>
<li>–contenBase src:打开的浏览器为index.html页面内容</li>
<li><p>–hot：有两个作用</p>
<ul>
<li><ol>
<li>修改样式是不会再创建一个bundle.js，而是保留原有bundle.js，然后做些修改</li>
</ol>
</li>
<li><ol start="2">
<li>修改样式时浏览器页面不刷新</li>
</ol>
</li>
</ul>
</li>
<li><p>参数加的位置</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open --prot 3000 --contenBase src --hot"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li>然后重新执行<code>npm run dev</code></li>
</ul>
<h4 id="html-webpack-plugin的作用"><a href="#html-webpack-plugin的作用" class="headerlink" title="html-webpack-plugin的作用"></a>html-webpack-plugin的作用</h4><ol>
<li><p>安装插件，在项目下执行<code>npm i html-webpack-plugin -D</code></p>
</li>
<li><p>配置</p>
</li>
</ol>
<p><img src="/2019/11/21/2019-11-20-05-webpack/03.png" alt></p>
<p>第一步：在webpack.config.js中导入插件</p>
<p><code>const htmlWebpackPlugin=require(&#39;html-webpack-plugin&#39;)</code></p>
<p>第二步：在webpack.config.js中配置插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="comment">//指定模板路径，将来会根据指定的页面路径，生成内存中的页面</span></span><br><span class="line">    template:path.join(__dirname,<span class="string">'./src/index.html'</span>),</span><br><span class="line">    <span class="comment">//指定在内存中生成的页面的名称</span></span><br><span class="line">    filename:<span class="string">'index.html'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack-dev-server</tag>
        <tag>html-webpack-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>06_vue</title>
    <url>/2019/11/21/2019-11-20-06-vue/</url>
    <content><![CDATA[<center><font size="4" color="red">06_vue</font></center>

<a id="more"></a>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h4 id="安装vue"><a href="#安装vue" class="headerlink" title="安装vue"></a>安装vue</h4><p><code>npm i vue -D</code></p>
<h4 id="vue包的查找规则"><a href="#vue包的查找规则" class="headerlink" title="vue包的查找规则"></a>vue包的查找规则</h4><p><code>import Vue from &#39;vue&#39;</code>讲解</p>
<ol>
<li><p>先找项目根目录中node_modules的文件夹</p>
</li>
<li><p>在node_modules中找vue（包名）文件</p>
</li>
<li><p>在vue文件中，找package.json的配置文件</p>
</li>
<li><p>在package.json的配置文件中，找main属性，这个main指定的就是导入的包</p>
</li>
</ol>
<p>而vue中的main指定的是<code>&quot;main&quot;: &quot;dist/vue.runtime.common.js&quot;</code>,这个包不是很完整，完整的应该是<code>vue.js</code></p>
<p>如果想导入的是<code>vue.js</code>这个包，有两个方式</p>
<p>一. 在main.js中导入包为<code>import vue from &#39;../node_modules/vue/dist/vue.js&#39;</code></p>
<p>二. 在webpack.config.js中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//设置文件入口</span></span><br><span class="line">    entry:path.join(__dirname,<span class="string">'./src/main.js'</span>),</span><br><span class="line">    <span class="comment">//设置文件出口</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.join(__dirname,<span class="string">'./dist'</span>),  <span class="comment">//指定打包好的文件，输出到哪个目录中</span></span><br><span class="line">        filename:<span class="string">'bundle.js'</span>   <span class="comment">//指定输出文件的名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[   <span class="comment">//所有webpack插件配置节点</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>:&#123;     <span class="comment">//配置所有第三方loader模块的...</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        alias:&#123;</span><br><span class="line">            <span class="comment">//在main.js中导入的vue实际变成了vue/dist/vue.js，这是的import Vue from 'vue'中的vue只是个别名</span></span><br><span class="line">            <span class="comment">//"vue$"的意思是以vue结尾  </span></span><br><span class="line">            <span class="string">"vue$"</span>:<span class="string">"vue/dist/vue.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>07_loader加载器处理css样式</title>
    <url>/2019/11/21/2019-11-20-07-loader%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%A4%84%E7%90%86css%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<center><font size="4" color="red">07_loader加载器处理css样式</font></center>

<a id="more"></a>
<h2 id="loader加载器处理css样式"><a href="#loader加载器处理css样式" class="headerlink" title="loader加载器处理css样式"></a>loader加载器处理css样式</h2><h4 id="下载loader加载器"><a href="#下载loader加载器" class="headerlink" title="下载loader加载器"></a>下载loader加载器</h4><p>在组件中可以使用<code>import &#39;./css/index.css&#39;</code>的方式导入样式，但是webpack不能打包</p>
<p>webpack只能打包js的文件，不能打包css文件，所以如果想把css文件打包，需要安装loader加载器</p>
<p><code>cnpm i style-loader css-loader -D</code></p>
<p>然后打开webpack.config.js配置文件，在里面新增一个配置节点，叫做module，它是一个对象，在这个对象中，有个rules属性，这是个数组，这个数组里存放了所有第三方文件的匹配和处理规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;     <span class="comment">//配置所有第三方loader模块的加载器</span></span><br><span class="line">    rules:[</span><br><span class="line">        <span class="comment">//   test:/\.css$/  这个是处理什么类型的文本    /  \.css$   /    \.是转义字符.   $ 是结尾  这句话意思是处理以.css结尾的文件</span></span><br><span class="line">        <span class="comment">//   use:['style-loader','css-loader']  使用什么插件处理</span></span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="loader加载器处理less样式"><a href="#loader加载器处理less样式" class="headerlink" title="loader加载器处理less样式"></a>loader加载器处理less样式</h4><p>除了安装style-loader和css-loader外，还需要安装less-loader</p>
<p>安装less-loader：<code>cnpm i less-loader -D</code></p>
<p>另外可能还需要安装less：<code>cnpm i less -D</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;     <span class="comment">//配置所有第三方loader模块的...</span></span><br><span class="line">        rules:[</span><br><span class="line">            <span class="comment">//   test:/\.css$/  这个是处理什么类型的文本    /  \.css$   /    \.是转义字符.   $ 是结尾  这句话意思是处理以.css结尾的文件</span></span><br><span class="line">            <span class="comment">//   use:['style-loader','css-loader']  使用什么插件处理</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;,</span><br><span class="line">            <span class="comment">//处理less文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="loader加载器处理scss样式"><a href="#loader加载器处理scss样式" class="headerlink" title="loader加载器处理scss样式"></a>loader加载器处理scss样式</h4><p>除了安装style-loader和css-loader外，还需要安装sacc-loader</p>
<p>安装less-loader：<code>cnpm i sass-loader -D</code></p>
<p>另外可能还需要安装less：<code>cnpm i node-sacc -D</code>  这个npm可能装不了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;     <span class="comment">//配置所有第三方loader模块的...</span></span><br><span class="line">        rules:[</span><br><span class="line">            <span class="comment">//   test:/\.css$/  这个是处理什么类型的文本    /  \.css$   /    \.是转义字符.   $ 是结尾  这句话意思是处理以.css结尾的文件</span></span><br><span class="line">            <span class="comment">//   use:['style-loader','css-loader']  使用什么插件处理</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]&#125;,</span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]&#125;,</span><br><span class="line">            <span class="comment">//处理scss文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.scss$/</span>,<span class="attr">use</span>:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>less</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>vue注意事项</title>
    <url>/2019/11/21/2019-11-20-vue%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<center><font size="4" color="red">vue注意事项</font></center>

<a id="more"></a>
<h2 id="符号的作用"><a href="#符号的作用" class="headerlink" title="$符号的作用"></a>$符号的作用</h2><ul>
<li>vue中使用$表示一些有用的实例属性与方法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#example',</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">//$data表示data: data中‘：’前的data</span><br><span class="line">vm.$data === data // =&gt; true</span><br><span class="line">vm.$el === document.getElementById('example') // =&gt; true</span><br><span class="line"></span><br><span class="line">// $watch 是一个实例方法</span><br><span class="line">vm.$watch('a', function (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="使用render渲染组件"><a href="#使用render渲染组件" class="headerlink" title="使用render渲染组件"></a>使用render渲染组件</h2><p>一般在vue实例中使用render渲染组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params">createElements</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//login为import导入的组件</span></span><br><span class="line">	<span class="keyword">return</span> createElements(login)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面导入组件的方式可以简写为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render: <span class="function"><span class="params">c</span> =&gt;</span> c(login)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:如果使用了render，render会把el指定的容器给删除，自己又创建了一个容器</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>$符号</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>acticiti_任务分配和流程变量</title>
    <url>/2020/01/02/2020-01-02-acticiti-%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D%E5%92%8C%E6%B5%81%E7%A8%8B%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<center><font size="4" color="red">acticiti_任务分配和流程变量</font></center>

<a id="more"></a>
<h2 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h2><h4 id="UEL表达式分配任务"><a href="#UEL表达式分配任务" class="headerlink" title="UEL表达式分配任务"></a>UEL表达式分配任务</h4><p>需求：真实环境中bpmn中的执行人是不能写死的，可以使用UEL表达式占位符</p>
<p>如果是对象可以写成<code>${user.assiginee0}</code>。其中的user是一个对象</p>
<p><img src="/2020/01/02/2020-01-02-acticiti-任务分配和流程变量/uel.jpg" alt="uel"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">UEL表达式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//assiginee0、assiginee1、assiginee2分别对应bpmn中执行流程的assiginee</span></span><br><span class="line">variables.put(<span class="string">"assiginee0"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">variables.put(<span class="string">"assiginee1"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">variables.put(<span class="string">"assiginee2"</span>,<span class="string">"wangwu"</span>);</span><br><span class="line">runtimeService.startProcessInstanceByKey(<span class="string">"test"</span>,variables);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">System.out.println(processEngine.getName());</span><br></pre></td></tr></table></figure>
<h4 id="监听器分配任务"><a href="#监听器分配任务" class="headerlink" title="监听器分配任务"></a>监听器分配任务</h4><p><img src="/2020/01/02/2020-01-02-acticiti-任务分配和流程变量/listener.jpg" alt="listener"></p>
<ul>
<li>Create：任务创建后触发</li>
<li>Assignment：任务分配后触发</li>
<li>Delete：任务完成后触发</li>
<li>All：所有事件发生都触发</li>
</ul>
<p>监听器分配任务方式：1.编写要监听的类实现TaskListener  2.在bpmn中设置这个类</p>
<p><img src="/2020/01/02/2020-01-02-acticiti-任务分配和流程变量/mylistener.jpg" alt="mylistener"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.DelegateTask;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.TaskListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">TaskListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(DelegateTask delegateTask)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定任务负责人</span></span><br><span class="line">        delegateTask.setAssignee(<span class="string">"zhangsan"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="流程变量"><a href="#流程变量" class="headerlink" title="流程变量"></a>流程变量</h2><h4 id="流程变量的作用域"><a href="#流程变量的作用域" class="headerlink" title="流程变量的作用域"></a>流程变量的作用域</h4><p>流程变量默认作用于一个流程实例，称为Global变量。也可以作用于一个结点，称为Local变量</p>
<p>Global变量：变量名不可以相同，否则后面设置的会覆盖掉前面设置的</p>
<p>Local变量：变量名可以相同，因为作用域互不影响</p>
<h2 id="Global流程变量的使用"><a href="#Global流程变量的使用" class="headerlink" title="Global流程变量的使用"></a>Global流程变量的使用</h2><p>流程变量直接点击连接然后在Condition中设置条件即可。图中是对象的形式设置的。如果不是对象，直接<code>num&lt;=3</code>设置即可</p>
<p><img src="/2020/01/02/2020-01-02-acticiti-任务分配和流程变量/processvariable.jpg" alt="processvariable"></p>
<p>实体类的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请假实体类</span></span><br><span class="line"><span class="comment"> * 注意：如果是pojo类型存储到流程变量中，一定要实现Serializable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test0</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String testName;  <span class="comment">//申请人名称</span></span><br><span class="line">    <span class="keyword">private</span> Date beginDate;   <span class="comment">//开始日期</span></span><br><span class="line">    <span class="keyword">private</span> Date enddate;     <span class="comment">//结束日期</span></span><br><span class="line">    <span class="keyword">private</span> Float num;        <span class="comment">//请假天数</span></span><br><span class="line">    <span class="keyword">private</span> String reason;    <span class="comment">//请假事由</span></span><br><span class="line">    <span class="keyword">private</span> String type;      <span class="comment">//请假类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="启动流程携带流程变量"><a href="#启动流程携带流程变量" class="headerlink" title="启动流程携带流程变量"></a>启动流程携带流程变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流程启动时携带变量信息</span></span><br><span class="line"><span class="comment">Test0对象存到了act_ru_variable表中</span></span><br><span class="line"><span class="comment">流程变量存到了act_ge_bytearray</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.得到运行实例</span></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//2.这次根据key来启动   得到key，获取方法前面结束的有</span></span><br><span class="line">String key=<span class="string">"myProcess_1"</span>;</span><br><span class="line"><span class="comment">//3.设置流程实例变量</span></span><br><span class="line">Test0 test0=<span class="keyword">new</span> Test0();</span><br><span class="line">test0.setNum(<span class="number">1F</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(key, variables);</span><br><span class="line"><span class="comment">//打印看一下结果</span></span><br><span class="line">System.out.println(processInstance.getName());</span><br><span class="line">System.out.println(processInstance.getProcessDefinitionId());</span><br></pre></td></tr></table></figure>
<h4 id="任务办理后携带流程变量"><a href="#任务办理后携带流程变量" class="headerlink" title="任务办理后携带流程变量"></a>任务办理后携带流程变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">任务办理时携带变量信息</span></span><br><span class="line"><span class="comment">Test0对象存到了act_ru_variable表中</span></span><br><span class="line"><span class="comment">流程变量存到了act_ge_bytearray</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.得到任务实例</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">//2.得到key，获取方法前面介绍的有</span></span><br><span class="line">String key=<span class="string">"myProcess_1"</span>;</span><br><span class="line"><span class="comment">//3.查询当前任务实例是否有任务</span></span><br><span class="line">Task task = taskService.createTaskQuery().processDefinitionKey(key)</span><br><span class="line">    .taskAssignee(<span class="string">"wangwu"</span>).singleResult();</span><br><span class="line"><span class="comment">//4.设置流程实例变量</span></span><br><span class="line">Test0 test0=<span class="keyword">new</span> Test0();</span><br><span class="line">test0.setNum(<span class="number">1F</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (task!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    taskService.complete(task.getId(),variables);</span><br><span class="line">    System.out.println(<span class="string">"任务执行完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="通过当前流程设置流程变量"><a href="#通过当前流程设置流程变量" class="headerlink" title="通过当前流程设置流程变量"></a>通过当前流程设置流程变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过当前流程设置流程变量</span></span><br><span class="line"><span class="comment">Test0对象存到了act_ru_variable表中</span></span><br><span class="line"><span class="comment">流程变量存到了act_ge_bytearray</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.得到运行实例</span></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.设置流程实例变量的值</span></span><br><span class="line">Test0 test0=<span class="keyword">new</span> Test0();</span><br><span class="line">test0.setNum(<span class="number">1F</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是流程实例id，2501是流程实例id</span></span><br><span class="line"><span class="comment">//第二个参数是bpmn文件里设置的流程变量的名称$&#123;test0.num&#125;，因为是对象，所在这里写对象的名称</span></span><br><span class="line"><span class="comment">//第三个值是流程变量的值，就是上面创建对象，赋值后的test0</span></span><br><span class="line"><span class="comment">//这种一次只能设置一个值</span></span><br><span class="line">runtimeService.setVariable(<span class="string">"2501"</span>,<span class="string">"test0"</span>,test0);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这种可以一次设置多个值。variables是个map集合</span></span><br><span class="line"><span class="comment">//runtimeService.setVariable("2501",variables);</span></span><br></pre></td></tr></table></figure>
<h4 id="通过当前任务设置流程变量"><a href="#通过当前任务设置流程变量" class="headerlink" title="通过当前任务设置流程变量"></a>通过当前任务设置流程变量</h4><p>注意：任务taskId必须是当前待办任务id。act_ru_task表中存在，如果任务已结束，会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过当前任务设置流程变量信息</span></span><br><span class="line"><span class="comment">Test0对象存到了act_ru_variable表中</span></span><br><span class="line"><span class="comment">流程变量存到了act_ge_bytearray</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.得到运行实例</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.设置流程实例变量的值</span></span><br><span class="line">Test0 test0=<span class="keyword">new</span> Test0();</span><br><span class="line">test0.setNum(<span class="number">1F</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是任务taskId</span></span><br><span class="line"><span class="comment">//第二个参数是bpmn文件里设置的流程变量的名称$&#123;test0.num&#125;，因为是对象，所在这里写对象的名称</span></span><br><span class="line"><span class="comment">//第三个值是流程变量的值，就是上面创建对象，赋值后的test0</span></span><br><span class="line"><span class="comment">//这种一次只能设置一个值</span></span><br><span class="line">taskService.setVariable(<span class="string">"1404"</span>,<span class="string">"test0"</span>,test0);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这种可以一次设置多个值。variables是个map集合</span></span><br><span class="line"><span class="comment">//taskService.setVariable("1404",variables);</span></span><br></pre></td></tr></table></figure>
<h2 id="Local流程变量的使用"><a href="#Local流程变量的使用" class="headerlink" title="Local流程变量的使用"></a>Local流程变量的使用</h2><p>代码和Global的使用方式一样，唯一不同的是setVariableLocal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">taskService.setVariableLocal(<span class="string">"1404"</span>,<span class="string">"test0"</span>,test0);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>工作流</tag>
        <tag>activiti</tag>
        <tag>任务分配</tag>
        <tag>流程变量</tag>
      </tags>
  </entry>
  <entry>
    <title>activiti_组和网关</title>
    <url>/2020/01/03/2020-01-02-activiti-%E7%BB%84%E5%92%8C%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<center><font size="4" color="red">activiti_组和网关</font></center>

<a id="more"></a>
<h2 id="组任务"><a href="#组任务" class="headerlink" title="组任务"></a>组任务</h2><h4 id="设置任务执行的候选人"><a href="#设置任务执行的候选人" class="headerlink" title="设置任务执行的候选人"></a>设置任务执行的候选人</h4><p><img src="/2020/01/03/2020-01-02-activiti-组和网关/candidate.jpg" alt="candidate"></p>
<h4 id="组任务办理流程"><a href="#组任务办理流程" class="headerlink" title="组任务办理流程"></a>组任务办理流程</h4><ul>
<li><p>第一步：查询组任务</p>
<ul>
<li>指定候选人，查询该候选人当前的待办任务</li>
<li>候选人不能办理任务（拾取后才能办理）</li>
</ul>
</li>
<li><p>第二步：拾取（claim）任务</p>
<ul>
<li>该组任务的所有候选人都能拾取</li>
<li>将候选人的组任务，变成个人任务。原来候选人就变成了该任务的负责人</li>
</ul>
<blockquote>
<p>如果拾取任务后不想办理该任务，需要将已经拾取的个人任务归还到组里面，将个人任务变成了组任务</p>
</blockquote>
</li>
<li><p>第三步：查询个人任务</p>
<ul>
<li>查询方式同个人任务部分，根据assignee查询用户负责的个人任务</li>
</ul>
</li>
<li><p>第四步：办理个人任务</p>
</li>
</ul>
<h4 id="组任务的拾取、归还、交接"><a href="#组任务的拾取、归还、交接" class="headerlink" title="组任务的拾取、归还、交接"></a>组任务的拾取、归还、交接</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*act_ru_task</span></span><br><span class="line"><span class="comment">*act_ru_identitylink</span></span><br><span class="line"><span class="comment">*act_hi_identitylink</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//得到TaskService对象</span></span><br><span class="line">TaskService taskService=processEngine.getTaskService();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置一些参数，流程定义的key，候选用户</span></span><br><span class="line">String key=<span class="string">"myProcess_1"</span>;</span><br><span class="line"><span class="comment">//候选人</span></span><br><span class="line">String candidate_users=<span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行查询  根据流程定义和候选用户查询</span></span><br><span class="line">Task task=taskService.createTaskQuery()</span><br><span class="line">    .processDefinitionKey(key)</span><br><span class="line">    .taskCandidateUser(candidate_users)</span><br><span class="line">    .singleResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出查询结果,这个是按照list查询得到的</span></span><br><span class="line"><span class="comment">//        for (Task task:list)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(task.getProcessDefinitionId());</span></span><br><span class="line"><span class="comment">//            System.out.println(task.getId());</span></span><br><span class="line"><span class="comment">//            System.out.println(task.getName());</span></span><br><span class="line"><span class="comment">//            //task.getAssignee()为null，说明zhangsan目前只是任务的候选人，还不是任务的执行人</span></span><br><span class="line"><span class="comment">//            System.out.println(task.getAssignee());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//让zhangsan来拾取任务</span></span><br><span class="line"><span class="keyword">if</span>(task!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//第一个参数是任务id，第二个参数是具体的候选用户名</span></span><br><span class="line">    taskService.claim(task.getId(),candidate_users);</span><br><span class="line">    System.out.println(<span class="string">"任务拾取完毕"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务拾取完毕后，候选人就成为了任务的执行人，执行任务...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果候选人不想执行任务了，可以归还任务</span></span><br><span class="line"><span class="comment">//先检验userId是否是taskId的负责人，如果是负责人才可以归还任务</span></span><br><span class="line">String taskId=task.getId();</span><br><span class="line">String userId=<span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line">Task task1=taskService.createTaskQuery()</span><br><span class="line">    .taskId(taskId)</span><br><span class="line">    .taskAssignee(userId)</span><br><span class="line">    .singleResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//归还或者交接任务</span></span><br><span class="line"><span class="keyword">if</span> (task1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//第二个参数为null是归还任务</span></span><br><span class="line">    taskService.setAssignee(taskId,<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//第二个参数指定具体的人为交接任务给别人</span></span><br><span class="line">    taskService.setAssignee(taskId,<span class="string">"lisi"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><h4 id="排他网关"><a href="#排他网关" class="headerlink" title="排他网关"></a>排他网关</h4><p><img src="/2020/01/03/2020-01-02-activiti-组和网关/exclusive.png" alt="exclusive"></p>
<p>如果一个是num&gt;3,流程结点id=_5。一个是num&gt;=1,流程结点id=_7。这时如果传的流程变量是5。就会走id=_5的结点，走结点数字小的那个。</p>
<p>注意:如果条件都不满足，排他网关会报错。例如前面的例子传的流程变量是0。</p>
<p>排他网关的目的:当多个条件都达到满足的条件时，会一定选择一个来走，按照id小的来选择</p>
<h4 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关"></a>并行网关</h4><p><img src="/2020/01/03/2020-01-02-activiti-组和网关/parallel.png" alt="parallel"></p>
<p>作用:使用了并行网关后，接下来的分支都要执行。当所有的分支执行结束后，使用并行网关合并到一起，完全合并结束后，才会执行后面的流程</p>
<p>注意:并行网关会忽视设置的条件</p>
<h4 id="包含网关"><a href="#包含网关" class="headerlink" title="包含网关"></a>包含网关</h4><p><img src="/2020/01/03/2020-01-02-activiti-组和网关/inclusive.png" alt></p>
<p>作用:具有排他网关的设置条件功能和并行网关的同时走多个分支的功能。包含网关和并行网关的区别在于，并行网关会忽视设置的条件，但包含网关不会，并行网关后面的分支都要走，包含网关只有满足条件的所有分支</p>
<p>注意:包含网关也要有分支和汇聚。如果包含网关中设置的条件都不满足，会报异常</p>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>工作流</tag>
        <tag>activiti</tag>
        <tag>组任务</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>activiti入门02</title>
    <url>/2020/01/02/2020-01-02-activiti%E5%85%A5%E9%97%A802/</url>
    <content><![CDATA[<center><font size="4" color="red">activiti入门02</font></center>

<a id="more"></a>
<h2 id="使用zip格式文件部署"><a href="#使用zip格式文件部署" class="headerlink" title="使用zip格式文件部署"></a>使用zip格式文件部署</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">zip格式文件的部署</span></span><br><span class="line"><span class="comment">虽然部署上去的是zip文件，但是在表格中会给自动解压</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//GenerateActivitiTable这个是自己定义的类   test.zip为把bpmn和png文件压缩成的zip格式文件</span></span><br><span class="line">InputStream is = GenerateActivitiTable.class.getClassLoader().getResourceAsStream("/process/test.zip");</span><br><span class="line"><span class="comment">//将InputStream流转化为ZipInputStream流</span></span><br><span class="line">ZipInputStream zipInputStream=<span class="keyword">new</span> ZipInputStream(is);</span><br><span class="line"><span class="comment">//部署</span></span><br><span class="line">Deployment deploymentZip = repositoryService.createDeployment()</span><br><span class="line">    .addZipInputStream(zipInputStream)</span><br><span class="line">    .name(<span class="string">"请假流程审批"</span>)     <span class="comment">//设置名称</span></span><br><span class="line">    .deploy();</span><br><span class="line"><span class="comment">//输出部署信息 act_re_deployment表中</span></span><br><span class="line">System.out.println(deploymentZip.getName());</span><br><span class="line">System.out.println(deploymentZip.getId());</span><br></pre></td></tr></table></figure>
<h2 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h2><h4 id="流程定义的查询和删除"><a href="#流程定义的查询和删除" class="headerlink" title="流程定义的查询和删除"></a>流程定义的查询和删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流程定义的查询 查询表</span></span><br><span class="line"><span class="comment">act_re_procdef:(流程定义的信息)，发布的流程都在这里，每一个流程就是每一张图</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//得到ProcessDefinitionQuery对象，可以认为是一个查询器</span></span><br><span class="line">ProcessDefinitionQuery processDefinitionQuery=repositoryService.createProcessDefinitionQuery();</span><br><span class="line"></span><br><span class="line">List&lt;ProcessDefinition&gt; processDefinitionList = processDefinitionQuery.processDefinitionKey(<span class="string">"test"</span>)      <span class="comment">//指定查询哪一个流程</span></span><br><span class="line">.orderByProcessDefinitionVersion()               <span class="comment">//指定该流程定义的排序规则。按版本号</span></span><br><span class="line">.desc().list();<span class="comment">//降序List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ProcessDefinition processDefinition:processDefinitionList)&#123;</span><br><span class="line">System.out.println(<span class="string">"流程定义ID:"</span>+processDefinition.getId());</span><br><span class="line">System.out.println(<span class="string">"流程定义名称:"</span>+processDefinition.getName());</span><br><span class="line">System.out.println(<span class="string">"流程定义的key:"</span>+processDefinition.getKey());</span><br><span class="line">System.out.println(<span class="string">"流程定义的版本号:"</span>+processDefinition.getVersion());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流程的删除，根据流程部署id删除.影响的表和部署的表一样</span></span><br><span class="line"><span class="comment">注意：当正在执行的流程没有完全执行完后，执行删除会失败。例如：流程只走到了部门经理审批，这时候是不能删除流程</span></span><br><span class="line"><span class="comment">如果还想删除，可以设置级联删除</span></span><br><span class="line"><span class="comment">act_re_procdef:(流程定义的信息)</span></span><br><span class="line"><span class="comment">act_ge_bytearray：(流程定义的文件)</span></span><br><span class="line"><span class="comment">act_re_deployment：(部署信息)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(<span class="string">"流程部署的ID:"</span>+processDefinition.getDeploymentId());</span><br><span class="line">repositoryService.deleteDeployment(processDefinition.getDeploymentId());</span><br><span class="line"><span class="comment">//设置级联删除，即使流程未走完，也给删除掉</span></span><br><span class="line"><span class="comment">//repositoryService.deleteDeployment(processDefinition.getDeploymentId(),true);</span></span><br></pre></td></tr></table></figure>
<h4 id="流程定义资源的读取"><a href="#流程定义资源的读取" class="headerlink" title="流程定义资源的读取"></a>流程定义资源的读取</h4><p>需求：从act_ge_bytearray表中读取bpmn文件和png文件</p>
<ul>
<li><p>方法：</p>
<ul>
<li><ol>
<li>使用activiti的api</li>
</ol>
</li>
<li><ol start="2">
<li>使用原理层面，可以使用jdbc的blob、clob类型数据的读取，并保存</li>
</ol>
</li>
<li><ol start="3">
<li>IO流转换，最好使用commons-io.jar包轻松处理IO</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取act_ge_bytearray里的bpmn和png资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.获取流程部署ID。通过流程定义的查询可以查出流程部署的ID</span></span><br><span class="line">String deployId=processDefinition.getDeploymentId();</span><br><span class="line"><span class="comment">//2.通过repositoryService读取bpmn和png信息(输入流)</span></span><br><span class="line"><span class="comment">//getResourceAsStream有两个参数：第一个是部署id，第二个是资源名称</span></span><br><span class="line"><span class="comment">//processDefinition.getDiagramResourceName()是png图片的名称test.png</span></span><br><span class="line">InputStream pngIs=repositoryService</span><br><span class="line">                    .getResourceAsStream(deployId,processDefinition.getDiagramResourceName());</span><br><span class="line"><span class="comment">//processDefinition.getResourceName()是bpmn文件的名称test.bpmn</span></span><br><span class="line">InputStream bpmnIs=repositoryService</span><br><span class="line">                    .getResourceAsStream(deployId,processDefinition.getResourceName());</span><br><span class="line"><span class="comment">//3.构建出OutputStream输出流</span></span><br><span class="line">OutputStream pngOs</span><br><span class="line">                    =<span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\wanghui\\resources"</span>+processDefinition.getDiagramResourceName());</span><br><span class="line">OutputStream bpmnOs</span><br><span class="line">                    =<span class="keyword">new</span> FileOutputStream(<span class="string">"C:\\wanghui\\resources"</span>+processDefinition.getResourceName());</span><br><span class="line"><span class="comment">//4.使用common-io实现输入流、输出流的转换</span></span><br><span class="line">IOUtils.copy(pngIs,pngOs);</span><br><span class="line">IOUtils.copy(bpmnIs,bpmnOs);</span><br><span class="line"><span class="comment">//5.关流</span></span><br><span class="line">pngOs.close();</span><br><span class="line">bpmnOs.close();</span><br><span class="line">pngIs.close();</span><br><span class="line">bpmnIs.close();</span><br></pre></td></tr></table></figure>
<h2 id="历史信息的查询"><a href="#历史信息的查询" class="headerlink" title="历史信息的查询"></a>历史信息的查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//历史管理类</span></span><br><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查询历史记录，从act_hi_actinst表中查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//得到查询对象HistoricActivityInstanceQuery</span></span><br><span class="line">HistoricActivityInstanceQuery historicActivityInstanceQuery = historyService.createHistoricActivityInstanceQuery();</span><br><span class="line"><span class="comment">//设置要查询的实例：2502是实例的id，查询方法前面已有介绍</span></span><br><span class="line">historicActivityInstanceQuery.processInstanceId(<span class="string">"2502"</span>);</span><br><span class="line">List&lt;HistoricActivityInstance&gt; list = historicActivityInstanceQuery</span><br><span class="line">.orderByHistoricActivityInstanceStartTime().asc()     <span class="comment">//根据时间排序</span></span><br><span class="line">.list();</span><br><span class="line"><span class="keyword">for</span> (HistoricActivityInstance instance:list)&#123;</span><br><span class="line">System.out.println(<span class="string">"流程结点Id:"</span>+instance.getActivityId());</span><br><span class="line">System.out.println(<span class="string">"流程结点名称:"</span>+instance.getActivityName());</span><br><span class="line">System.out.println(<span class="string">"流程定义的Id:"</span>+instance.getProcessDefinitionId());</span><br><span class="line">System.out.println(<span class="string">"流程实例的Id:"</span>+instance.getProcessInstanceId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="businessKey"><a href="#businessKey" class="headerlink" title="businessKey"></a>businessKey</h2><p>为了让activiti和业务相结合，在表act_ru_execution中有个BUSINESSKEY字段，这样可以把业务和流程分开，如果要执行zhangsan的流程，只需要把zhangsan的businessKey入act_ru_execution表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//流程运行管理类</span></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">//这里的key就是流程定义bpmn文件起的id名称</span></span><br><span class="line"><span class="comment">//1001是业务系统中的businessKey</span></span><br><span class="line"><span class="comment">//启动流程时把1001入到businessKey</span></span><br><span class="line">ProcessInstance test = runtimeService.startProcessInstanceByKey(<span class="string">"test"</span>,<span class="string">"1001"</span>);</span><br><span class="line">System.out.println(<span class="string">"获取存入到表中的businessKey："</span>+test.getBusinessKey());</span><br></pre></td></tr></table></figure>
<h2 id="挂起和激活"><a href="#挂起和激活" class="headerlink" title="挂起和激活"></a>挂起和激活</h2><p>需求：如果公司制度修改，未执行完的流程怎么处理？这时可以让流程挂起或者激活。</p>
<h4 id="流程定义的挂起和激活"><a href="#流程定义的挂起和激活" class="headerlink" title="流程定义的挂起和激活"></a>流程定义的挂起和激活</h4><p>如果流程定义挂起，则不能再执行流程实例，而且其下的所有流程实例都是挂起状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流程定义的挂起和激活</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//查询流程定义的对象</span></span><br><span class="line">ProcessDefinition processDefin = repositoryService.createProcessDefinitionQuery()</span><br><span class="line">    .processDefinitionKey(<span class="string">"test"</span>).singleResult();</span><br><span class="line"><span class="comment">//得到当前流程的实例是否都为暂停状态.ture是暂停</span></span><br><span class="line"><span class="keyword">boolean</span> suspended = processDefin.isSuspended();</span><br><span class="line">String processDefinitionId = processDefin.getId();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span> (suspended)&#123;</span><br><span class="line">    <span class="comment">//说明是暂停，可以使用激活操作</span></span><br><span class="line">    repositoryService.activateProcessDefinitionById(processDefinitionId,<span class="keyword">true</span>,<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">"流程定义："</span>+processDefinitionId+<span class="string">"：激活"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//挂起</span></span><br><span class="line">    repositoryService.suspendProcessDefinitionById(processDefinitionId,<span class="keyword">true</span>,<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">"流程定义："</span>+processDefinitionId+<span class="string">"：挂起"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="流程实例的挂起和激活"><a href="#流程实例的挂起和激活" class="headerlink" title="流程实例的挂起和激活"></a>流程实例的挂起和激活</h4><p>挂起状态再执行流程，会抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流程实例的挂起和激活</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//查询流程定义的对象</span></span><br><span class="line">ProcessInstance processInstance = runtimeService.createProcessInstanceQuery()</span><br><span class="line">    .processInstanceId(<span class="string">"2501"</span>).singleResult();  <span class="comment">//2501是实例id</span></span><br><span class="line"><span class="comment">//得到当前流程的实例是否都为暂停状态.ture是暂停</span></span><br><span class="line"><span class="keyword">boolean</span> suspended = processInstance.isSuspended();</span><br><span class="line">String processInstanceId = processInstance.getId();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span> (suspended)&#123;</span><br><span class="line">    <span class="comment">//说明是暂停，可以使用激活操作</span></span><br><span class="line">    runtimeService.activateProcessInstanceById(processInstanceId);</span><br><span class="line">    System.out.println(<span class="string">"流程实例："</span>+processInstanceId+<span class="string">"：激活"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//挂起</span></span><br><span class="line">    runtimeService.suspendProcessInstanceById(processInstanceId);</span><br><span class="line">    System.out.println(<span class="string">"流程实例："</span>+processInstanceId+<span class="string">"：挂起"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>工作流</tag>
        <tag>activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置多个ssh-key</title>
    <url>/2020/01/03/2020-01-02-git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAssh-key/</url>
    <content><![CDATA[<center><font size="4" color="red">git配置多个ssh-key</font></center>

<a id="more"></a>
<h2 id="git配置多个ssh-key"><a href="#git配置多个ssh-key" class="headerlink" title="git配置多个ssh-key"></a>git配置多个ssh-key</h2><blockquote>
<p>我们在工作当中，经常遇到自己有个gitlab账号，然而公司也有个gitlab账号，或者再有个github账号，或者gitee账号，这么多的账号，每次拉取项目都是个很麻烦的问题，因为需要配置多个ssh-key来管理。</p>
</blockquote>
<h4 id="生成公司和个人的ssh-key"><a href="#生成公司和个人的ssh-key" class="headerlink" title="生成公司和个人的ssh-key"></a>生成公司和个人的ssh-key</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>生成公司的ssh-key</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C 'youremail@yourcompany.com' -f ~/.ssh/gitlab_company_rsa</span><br><span class="line"><span class="meta">#</span>生成个人的ssh-key</span><br><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C 'youremail@your.com' -f ~/.ssh/gitlab_myself_rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>生成公司的ssh-key</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C 'wanghui_isf@si-tech.com.cn' -f ~/.ssh/gitlab_company_rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Created directory '/c/Users/wanghui/.ssh'.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/wanghui/.ssh/gitlab_company_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/wanghui/.ssh/gitlab_company_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:wPCl9enJ2v43bFr3ZeMQuAP9o9An8jzSiCI8/XRfnso wanghui_isf@si-tech.com.cn</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|    .   o        |</span><br><span class="line">|     + + . .     |</span><br><span class="line">|      =   o      |</span><br><span class="line">|       . o...    |</span><br><span class="line">|        S.+o .   |</span><br><span class="line">|         oo o .  |</span><br><span class="line">|  . .  .o++= B..+|</span><br><span class="line">|   + o...+BoB.Xo+|</span><br><span class="line">|    o o.  oE=* o.|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
<ul>
<li>生成个人的ssh-key</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C 'emcderm2@students.solano.edu' -f ~/.ssh/gitlab_myself_rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/wanghui/.ssh/gitlab_myself_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/wanghui/.ssh/gitlab_myself_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:jqYu2k9TddzlwpNLzvXXkJBfhldXbaZzsPsiLz7P4JQ emcderm2@students.solano.edu</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+---[RSA 3072]----+</span><br><span class="line">|            ....B|</span><br><span class="line">|         . o.=o.O|</span><br><span class="line">|        . o B.=X |</span><br><span class="line">|       . . + ==oo|</span><br><span class="line">|      . S   +  ++|</span><br><span class="line">|     . o     .. .|</span><br><span class="line">|    o o .   E  . |</span><br><span class="line">| ... +     o+o. .|</span><br><span class="line">|...++      .o*+. |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
<ul>
<li>查看公司和个人的ssh-key</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>查看公司的ssh-key</span><br><span class="line"><span class="meta">$</span> cat /c/Users/wanghui/.ssh/gitlab_company_rsa.pub</span><br><span class="line"><span class="meta">#</span>查看个人的ssh-key</span><br><span class="line"><span class="meta">$</span> cat  /c/Users/wanghui/.ssh/gitlab_myself_rsa.pub</span><br></pre></td></tr></table></figure>
<h4 id="添加ssh-key到gitlab中"><a href="#添加ssh-key到gitlab中" class="headerlink" title="添加ssh-key到gitlab中"></a>添加ssh-key到gitlab中</h4><p><img src="/2020/01/03/2020-01-02-git配置多个ssh-key/addsshkey.jpg" alt="addsshkey"></p>
<h4 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-agent bash</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/gitlab_company_rsa</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/gitlab_myself_rsa</span><br><span class="line"><span class="meta">$</span> ssh-add -l</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注：如果<code>ssh-add ~/.ssh/gitlab_company_rsa</code>不行，就改成<code>ssh-add ~/.ssh/gitlab_company.rsa</code></p>
</blockquote>
<p>具体操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wanghui@DESKTOP-H6A9OVE MINGW64 /c/wanghui/persion/blog (master)</span><br><span class="line"><span class="meta">$</span> ssh-agent bash</span><br><span class="line"></span><br><span class="line">wanghui@DESKTOP-H6A9OVE MINGW64 /c/wanghui/persion/blog (master)</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/gitlab_company_rsa</span><br><span class="line">Identity added: /c/Users/wanghui/.ssh/gitlab_company_rsa (wanghui_isf@si-tech.com.cn)</span><br><span class="line"></span><br><span class="line">wanghui@DESKTOP-H6A9OVE MINGW64 /c/wanghui/persion/blog (master)</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/gitlab_myself_rsa</span><br><span class="line">Identity added: /c/Users/wanghui/.ssh/gitlab_myself_rsa (emcderm2@students.solano.edu)</span><br><span class="line"></span><br><span class="line">wanghui@DESKTOP-H6A9OVE MINGW64 /c/wanghui/persion/blog (master)</span><br><span class="line"><span class="meta">$</span> ssh-add -l</span><br><span class="line">3072 SHA256:wPCl9enJ2v43bFr3ZeMQuAP9o9An8jzSiCI8/XRfnso wanghui_isf@si-tech.com.cn (RSA)</span><br><span class="line">3072 SHA256:jqYu2k9TddzlwpNLzvXXkJBfhldXbaZzsPsiLz7P4JQ emcderm2@students.solano.edu (RSA)</span><br></pre></td></tr></table></figure>
<h4 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建config文件</h4><p>文件所在路径 <code>~/.ssh</code>，配置信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gitlab_company</span><br><span class="line">Host git.si-tech.com.cn</span><br><span class="line">    HostName git.si-tech.com.cn</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_company_rsa</span><br><span class="line"># gitlab_myself</span><br><span class="line">Host gitlab.com</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_myself_rsa</span><br></pre></td></tr></table></figure>
<p>config配置文件讲解,以公司ssh-key为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gitlab_company</span><br><span class="line">Host git.si-tech.com.cn</span><br><span class="line">    HostName git.si-tech.com.cn</span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_company_rsa</span><br></pre></td></tr></table></figure>
<p>例如拉取的项目是：<a href="mailto:`git@git.si-tech.com.cn" target="_blank" rel="noopener">`git@git.si-tech.com.cn</a>:chengwei/woapp-dev.git`</p>
<p>配置文件<code>User+HostName = git@git.si-tech.com.cn</code></p>
<p>其中</p>
<ul>
<li>User = git</li>
<li>HostName = <a href="mailto:git@git.si-tech.com.cn" target="_blank" rel="noopener">git@git.si-tech.com.cn</a></li>
</ul>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>验证公司的是否连接</span><br><span class="line"><span class="meta">$</span> ssh -T git@git.si-tech.com.cn</span><br><span class="line"><span class="meta">#</span>验证个人的是否连接</span><br><span class="line"><span class="meta">$</span> ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>
<p>如果连接，会显示出用户名</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh-key</tag>
      </tags>
  </entry>
  <entry>
    <title>json-server</title>
    <url>/2020/01/12/2020-01-12-json-server/</url>
    <content><![CDATA[<center><font size="4" color="red">json-server入门</font></center>

<a id="more"></a>
<h2 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h2><h4 id="http-server"><a href="#http-server" class="headerlink" title="http-server"></a>http-server</h4><p>用于模拟http请求，安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm i http<span class="literal">-server</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure>
<p>查看是否安装完成。其中的<code>hs</code>是<code>http-server</code>的简写</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hs <span class="literal">-V</span></span><br><span class="line">Starting up http<span class="literal">-server</span>, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">31.235</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">120.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">88.88</span>.<span class="number">88.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">25.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></span><br><span class="line">Hit CTRL<span class="literal">-C</span> to stop the server</span><br></pre></td></tr></table></figure>
<p>启动http-server。其中的<code>-o</code>意思是启动时打开浏览器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hs <span class="literal">-o</span></span><br><span class="line">Starting up http<span class="literal">-server</span>, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">31.235</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">120.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">88.88</span>.<span class="number">88.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">192.168</span>.<span class="number">25.1</span>:<span class="number">8080</span></span><br><span class="line">  http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span></span><br><span class="line">Hit CTRL<span class="literal">-C</span> to stop the server</span><br></pre></td></tr></table></figure>
<h4 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h4><ul>
<li>面向资源编程</li>
<li>地址即资源</li>
<li>所有的东西都是资源，所有操作都通过对资源的增删改查实现</li>
<li>对资源的增删改查对应URL的操作分别是POST,DELETE,PUT,GET</li>
<li>如果要测试POST,DELETE,PUT，使用postman即可，浏览器只能查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/users          -&gt; 所有的用户数据</span><br><span class="line">http://localhost:8080/products       -&gt; 所有的产品数据</span><br><span class="line">http://localhost:8080/users/1/name   -&gt; 编号为1的用户的名称</span><br><span class="line">http://localhost:8080/products/iphone-&gt; 特指iphone这个商品</span><br></pre></td></tr></table></figure>
<h4 id="第三方模拟数据工具"><a href="#第三方模拟数据工具" class="headerlink" title="第三方模拟数据工具"></a>第三方模拟数据工具</h4><ul>
<li><p>mock.js:无法持久化数据。 <a href="http://mockjs.com/" target="_blank" rel="noopener">http://mockjs.com/</a> </p>
<ul>
<li>mock的使用文档： <a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a> </li>
<li>mock拦截请求，返回假数据的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.引入mock.js文件</span></span><br><span class="line"><span class="comment">//2.使用Mock.mock()</span></span><br><span class="line"><span class="comment">//3个参数。'/users'：拦截http://localhost:8080/users的请求；'get'：拦截的请求方式是get方式；&#123;hello:'mock.js'&#125;：返回的假数据 </span></span><br><span class="line">Mock.mock(<span class="string">'/users'</span>,<span class="string">'get'</span>,&#123;</span><br><span class="line">    hello:<span class="string">'mock.js'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>json-server </p>
</li>
</ul>
<h4 id="json-server-1"><a href="#json-server-1" class="headerlink" title="json-server"></a>json-server</h4><p>安装json-server</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> npm install <span class="literal">-g</span> json<span class="literal">-server</span></span><br></pre></td></tr></table></figure>
<p>启动json-server。其中的<code>db.json</code>是数据文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> json<span class="literal">-server</span> -<span class="literal">-watch</span> db.json</span><br></pre></td></tr></table></figure>
<h4 id="json-server基本特性"><a href="#json-server基本特性" class="headerlink" title="json-server基本特性"></a>json-server基本特性</h4><p>具体的基本特性使用方式参考：<a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">https://github.com/typicode/json-server</a></p>
<p>db.json测试数据库，访问地址： <a href="http://localhost:3000/student" target="_blank" rel="noopener">http://localhost:3000/student</a> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"student"</span>: [</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">1</span>, <span class="attr">"name"</span>:<span class="string">"zhangsan"</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">2</span>, <span class="attr">"name"</span>:<span class="string">"lisi"</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">3</span>, <span class="attr">"name"</span>:<span class="string">"wangwu"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>标准的RESTful API</p>
</li>
<li><p>支持过滤，访问地址： <a href="http://localhost:3000/student?q=zhangsan" target="_blank" rel="noopener">http://localhost:3000/student?q=zhangsan</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>支持分页,访问地址：<a href="http://localhost:3000/student?_limit=2&amp;_page=1。意思是访问第一页page，该页显示两条数据" target="_blank" rel="noopener">http://localhost:3000/student?_limit=2&amp;_page=1。意思是访问第一页page，该页显示两条数据</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"zhangsan"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"lisi"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>支持排序</p>
</li>
<li><p>支持全文检索</p>
</li>
<li><p>支持关系</p>
</li>
<li><p>支持数据分割</p>
</li>
<li><p>支持操作符（大于小于）</p>
</li>
<li><p>支持JSONP</p>
</li>
<li><p>支持CORS</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Json-server</category>
      </categories>
      <tags>
        <tag>json-server</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Nginx做代理</title>
    <url>/2020/02/02/2020-02-02-02-Nginx%E5%81%9A%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<center><font size="4" color="red">02_Nginx做代理</font></center>

<a id="more"></a>
<h2 id="Ngnix做代理"><a href="#Ngnix做代理" class="headerlink" title="Ngnix做代理"></a>Ngnix做代理</h2><h3 id="Nginx做静态资源的代理"><a href="#Nginx做静态资源的代理" class="headerlink" title="Nginx做静态资源的代理"></a>Nginx做静态资源的代理</h3><p>nginx做静态资源的代理有端口设置和域名绑定两种方式</p>
<h4 id="端口设置"><a href="#端口设置" class="headerlink" title="端口设置"></a>端口设置</h4><blockquote>
<p>特点：一个服务就要配置一个端口</p>
</blockquote>
<p>端口设置时一个端口就复制一个server。对server讲解如下：</p>
<p>我的虚拟机是：192.168.25.151，访问时访问：<a href="http://192.168.25.151:80/" target="_blank" rel="noopener">http://192.168.25.151:80/</a> ,指定访问80端口时，就去找对应的location，由于location的命名空间是<code>/</code>,所以会直接查找<code>/usr/local/nginx</code>文件夹下的<code>html</code>文件夹下的index.html文件</p>
<p>再配置一个81端口的服务，然后在<code>/usr/local/nginx</code>下创建一个文件夹<code>hello</code>，在该文件夹下创建一个文件hello.html,使用<code>sudo ./nginx -s reload</code>重新加载配置文件后，访问<a href="http://192.168.25.151:81/" target="_blank" rel="noopener">http://192.168.25.151:81/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    	#指定服务的端口</span><br><span class="line">        listen       80;   </span><br><span class="line">        #指定服务的名称，就是访问时的域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        #执行端口后面要访问的html位置</span><br><span class="line">        location / &#123;</span><br><span class="line">        	#访问的文件夹</span><br><span class="line">            root   html;</span><br><span class="line">            #访问的该文件夹下的文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   hello;</span><br><span class="line">            index  hello.html hello.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h4><blockquote>
<p>特点：多个服务可以共用一个端口</p>
</blockquote>
<p>其中的server_name就是指定的域名，我这里做测试，就用的SwitchHost配置的域名和ip对应。实际生产中需要购买域名和特定ip。访问时直接通过域名就可以访问。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        #配置域名</span><br><span class="line">        server_name  www.mynginx.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        #配置域名</span><br><span class="line">        server_name  www.hello.com;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   hello;</span><br><span class="line">            index  hello.html hello.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Nginx做动态代理"><a href="#Nginx做动态代理" class="headerlink" title="Nginx做动态代理"></a>Nginx做动态代理</h3><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    	#指定服务的端口</span><br><span class="line">        listen       80;   </span><br><span class="line">        #指定服务的名称，就是访问时的域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        #执行端口后面要访问的html位置</span><br><span class="line">        location / &#123;</span><br><span class="line">        	#访问的文件夹</span><br><span class="line">            root   html;</span><br><span class="line">            #访问的该文件夹下的文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #动态代理的配置</span><br><span class="line">    upstream helloworld&#123;</span><br><span class="line">    	#这个是配置的反向代理的服务，一般是tomcat服务</span><br><span class="line">    	server 192.168.25.151:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        #这个就指向的upstream中的服务地址192.168.25.151:8080</span><br><span class="line">        proxy_pass  http://helloworld;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   hello;</span><br><span class="line">            index  hello.html hello.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>多部署几个tomcat并配置进来就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">    	#指定服务的端口</span><br><span class="line">        listen       80;   </span><br><span class="line">        #指定服务的名称，就是访问时的域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        #执行端口后面要访问的html位置</span><br><span class="line">        location / &#123;</span><br><span class="line">        	#访问的文件夹</span><br><span class="line">            root   html;</span><br><span class="line">            #访问的该文件夹下的文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #动态代理的配置</span><br><span class="line">    upstream helloworld&#123;</span><br><span class="line">    	#这个是配置的反向代理的服务，一般是tomcat服务</span><br><span class="line">    	#如果要让服务192.168.25.151:8180出现次数是其它的2倍，可以配置为：</span><br><span class="line">    	#server 192.168.25.151:8180 weight=2;</span><br><span class="line">    	server 192.168.25.151:8080;</span><br><span class="line">    	server 192.168.25.151:8180;</span><br><span class="line">    	server 192.168.25.151:8280;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        #这个就指向的upstream中的服务地址192.168.25.151:8080</span><br><span class="line">        proxy_pass  http://helloworld;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   hello;</span><br><span class="line">            index  hello.html hello.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>反向代理</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中使用json-server</title>
    <url>/2020/01/12/2020-01-12-Vue%E4%B8%AD%E4%BD%BF%E7%94%A8json-server/</url>
    <content><![CDATA[<center><font size="4" color="red">Vue中使用json-server</font></center>

<a id="more"></a>
<h2 id="Vue中使用json-server"><a href="#Vue中使用json-server" class="headerlink" title="Vue中使用json-server"></a>Vue中使用json-server</h2><h4 id="安装json-server"><a href="#安装json-server" class="headerlink" title="安装json-server"></a>安装json-server</h4><p>全局安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> json<span class="literal">-server</span></span><br></pre></td></tr></table></figure>
<p>局部安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span> json<span class="literal">-server</span></span><br></pre></td></tr></table></figure>
<h4 id="提供json数据文件"><a href="#提供json数据文件" class="headerlink" title="提供json数据文件"></a><strong>提供json数据文件</strong></h4><p> 在项目根目录下，新建一个 JSON 文件db.json </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"student"</span>: [</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">1</span>, <span class="attr">"name"</span>:<span class="string">"zhangsan"</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">2</span>, <span class="attr">"name"</span>:<span class="string">"lisi"</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">"id"</span>:<span class="number">3</span>, <span class="attr">"name"</span>:<span class="string">"wangwu"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="配置json-server"><a href="#配置json-server" class="headerlink" title="配置json-server"></a><strong>配置json-server</strong></h4><p> 在build\webpack.dev.conf.js下配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*----------------jsonServer---------*/</span></span><br><span class="line"><span class="comment">/*引入json-server*/</span></span><br><span class="line"><span class="keyword">const</span> jsonServer = <span class="built_in">require</span>(<span class="string">'json-server'</span>)</span><br><span class="line"><span class="comment">/*搭建一个server*/</span></span><br><span class="line"><span class="keyword">const</span> apiServer = jsonServer.create()</span><br><span class="line"><span class="comment">/*将db.json关联到server*/</span></span><br><span class="line"><span class="keyword">const</span> apiRouter = jsonServer.router(<span class="string">'db.json'</span>)</span><br><span class="line"><span class="keyword">const</span> middlewares = jsonServer.defaults()</span><br><span class="line">apiServer.use(middlewares)</span><br><span class="line">apiServer.use(apiRouter)</span><br><span class="line"><span class="comment">/*监听端口*/</span></span><br><span class="line">apiServer.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'JSON Server is running'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a><strong>访问数据</strong></h4><p> 配置完成后，要npm dev run 重启项目，然后再地址栏输入<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 就可以访问到数据。</p>
<h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a><strong>设置代理</strong></h4><p> 最后做一下浏览器代理设置，因为json-server的访问端口是3000，Vue的访问端口是8000，为了使用json-server时端口也用8000，所以设置一下代理。在 config/index.js中 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*代理配置表，在这里可以配置特定的请求代理到对应的API接口*/</span></span><br><span class="line"><span class="comment">/* 下面的例子将代理请求 /api/student  到 http://localhost:3000/student*/</span></span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,<span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">    target: <span class="string">'http://localhost:3000'</span>,<span class="comment">// 接口的域名</span></span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">'^/api'</span>: <span class="string">''</span><span class="comment">//后面可以使重写的新路径，一般不做更改</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="验证代理是否成功"><a href="#验证代理是否成功" class="headerlink" title="验证代理是否成功"></a><strong>验证代理是否成功</strong></h4><p> 在浏览器输入地址：<a href="http://localhost:8080/api/" target="_blank" rel="noopener">http://localhost:8080/api/</a></p>
<p><img src="/2020/01/12/2020-01-12-Vue中使用json-server/jsonServer.png" alt></p>
<h4 id="Vue中-使用"><a href="#Vue中-使用" class="headerlink" title="Vue中 使用"></a>Vue中 <strong>使用</strong></h4><p> 使用vue-resouce发送Ajax获取数据 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/api/student'</span>)<span class="comment">//代替http://localhost:3000/student</span></span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.newsList = res.data</span><br><span class="line">  &#125;, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Json-server</category>
      </categories>
      <tags>
        <tag>json-server</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Nginx的安装和启动</title>
    <url>/2020/02/02/2020-02-02-01-Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<center><font size="4" color="red">01_Nginx的安装和启动</font></center>

<a id="more"></a>
<h2 id="Nginx的安装和启动"><a href="#Nginx的安装和启动" class="headerlink" title="Nginx的安装和启动"></a>Nginx的安装和启动</h2><p>介绍两种安装方式</p>
<h4 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h4><p><strong>安装Ngnix</strong></p>
<p><code>sudo apt-get install nginx</code></p>
<p>查看是否安装成功</p>
<p><code>nginx -V</code></p>
<p>Ubuntu安装之后的文件结构大致为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</span><br><span class="line"></span><br><span class="line">主程序文件在/usr/sbin/nginx   //可以使用which nginx查看</span><br><span class="line"></span><br><span class="line">全局配置文件/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">日志放在了/var/log/nginx中，日志文件的位置可以在 /etc/nginx/nginx.conf文件中配置</span><br><span class="line">access_log /var/log/nginx/access.log; ## 访问日志文件路径名</span><br><span class="line">error_log /var/log/nginx/error.log; ## 访问日志文件错误路径名</span><br><span class="line"></span><br><span class="line">并已经在/etc/init.d/下创建了启动脚本nginx</span><br><span class="line"></span><br><span class="line">默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本 默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</span><br></pre></td></tr></table></figure>
<p><strong>启动Ngnix</strong></p>
<p><code>sudo /etc/init.d/nginx start</code></p>
<p>然后就可以访问了，<code>http://localhost/</code> ， 一切正常！<br>启动时候若显示端口80被占用：<code>Starting nginx: [emerg]: bind() to 0.0.0.0:80 failed (98: Address already in use)</code>，修改文件：<code>/etc/nginx/sites-available/default</code>,去掉 listen 前面的 # 号 , # 号在该文件里是注释的意思 , 并且把 listen 后面的 80 端口号改为自己的端口，访问是需要添加端口号。</p>
<h4 id="源代码安装"><a href="#源代码安装" class="headerlink" title="源代码安装"></a>源代码安装</h4><p>环境准备</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>1.安装gcc g++的依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install build-essential</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libtool</span><br><span class="line"><span class="meta">#</span>2.安装pcre依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line"><span class="meta">#</span>3.安装zlib依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install zlib1g-dev</span><br><span class="line"><span class="meta">#</span>4.安装ssl依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install openssl</span><br></pre></td></tr></table></figure>
<p>安装Nginx <a href="http://nginx.org/" target="_blank" rel="noopener">官网地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 下载1.8.0版本：</span><br><span class="line">sudo wget http://nginx.org/download/nginx-1.8.0.tar.gz</span><br><span class="line"><span class="meta">#</span> 解压：</span><br><span class="line">tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line"><span class="meta">#</span>进入解压目录：</span><br><span class="line">cd nginx-1.8.0</span><br></pre></td></tr></table></figure>
<p>编译Nginx</p>
<ul>
<li><ol>
<li>创建Makefile文件 <code>--prefix=/usr/local/nginx</code>指向的是安装目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock  \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log  \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log  \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/tmp/nginx/client/ \</span><br><span class="line">--http-proxy-temp-path=/var/tmp/nginx/proxy/ \</span><br><span class="line">--http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \</span><br><span class="line">--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/tmp/nginx/scgi \</span><br><span class="line"><span class="meta">#</span>下面的配置可以不要</span><br><span class="line">--sbin-path=/usr/local/nginx/sbin/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-pcre</span><br></pre></td></tr></table></figure>
</li>
<li><ol start="2">
<li>编译</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>1.生成脚本和配置文件</span><br><span class="line"><span class="meta">$</span> make</span><br><span class="line"><span class="meta">#</span>2.安装，安装的路径就是Makefile里的--prefix=/usr/local/nginx</span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装目录（/usr/local/nginx）下主要目录介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conf：保存nginx所有的配置文件，其中nginx.conf是nginx服务器的最核心最主要的配置文件，其他的.conf则是用来配置nginx相关的功能的，例如fastcgi功能使用的是fastcgi.conf和fastcgi_params两个文件，配置文件一般都有个样板配置文件，是文件名.default结尾，使用的使用将其复制为并将default去掉即可。</span><br><span class="line"></span><br><span class="line">html目录中保存了nginx服务器的web文件，但是可以更改为其他目录保存web文件,另外还有一个50x的web文件是默认的错误页面提示页面。</span><br><span class="line"></span><br><span class="line">logs：用来保存nginx服务器的访问日志错误日志等日志，logs目录可以放在其他路径，比如/var/logs/nginx里面。</span><br><span class="line"></span><br><span class="line">sbin：保存nginx二进制启动脚本，可以接受不同的参数以实现不同的功能。</span><br></pre></td></tr></table></figure>
<p>源代码安装的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 进入nginx下的sbin目录</span><br><span class="line"><span class="meta">$</span> cd /usr/local/nginx/sbin </span><br><span class="line"><span class="meta">#</span> 创建--http-client-body-temp-path=/var/tmp/nginx/client/ 执行的目录</span><br><span class="line"><span class="meta">$</span> mkdir /var/tmp/nginx/client/ -p</span><br><span class="line"><span class="meta">#</span> 启动</span><br><span class="line"><span class="meta">$</span> sudo ./nginx</span><br><span class="line"><span class="meta">#</span> 停止</span><br><span class="line"><span class="meta">$</span> sudo ./nginx -s stop</span><br><span class="line"><span class="meta">#</span> 进行一些配置更改后重新加载</span><br><span class="line"><span class="meta">$</span> sudo ./nginx -s reload</span><br><span class="line"><span class="meta">#</span> 查看进程</span><br><span class="line"><span class="meta">$</span> ps aux | grep nginx</span><br></pre></td></tr></table></figure>
<h4 id="使用systemctl管理Nginx服务"><a href="#使用systemctl管理Nginx服务" class="headerlink" title="使用systemctl管理Nginx服务"></a>使用systemctl管理Nginx服务</h4><blockquote>
<p>使用安装包安装的可以直接使用systemctl管理Nginx服务，但是使用源代码安装的需要配置</p>
</blockquote>
<p>您可以像任何其他systemd单位一样管理Nginx服务。 要停止Nginx服务，请运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl stop nginx</span><br></pre></td></tr></table></figure>
<p>要再次启动，请键入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start nginx</span><br></pre></td></tr></table></figure>
<p>重新启动Nginx服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>在进行一些配置更改后重新加载Nginx服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>
<p>如果你想禁用Nginx服务在启动时启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl disable nginx</span><br></pre></td></tr></table></figure>
<p>并重新启用它：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl enable nginx</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用源代码安装的Nginx配置systemctl管理Nginx.service</p>
</blockquote>
<p>创建配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 源码安装的nginx在/etc/systemd/system/multi-user.target.wants/目录下是没有nginx.service这个文件的，所以要新建。但是我在systemd下并没有看到system（Ubuntu18.04.3），这个后续再研究</span><br><span class="line"><span class="meta">$</span> vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>
<p>写入内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx - high performance web server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx/nginx.pid</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s TERM $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>设置开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure>
<p>关闭之前启动的nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pkill -9 nginx</span><br></pre></td></tr></table></figure>
<p>重载修改过的所有配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>重新启动nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start nginx</span><br></pre></td></tr></table></figure>
<h4 id="Ubuntu下卸载nginx"><a href="#Ubuntu下卸载nginx" class="headerlink" title="Ubuntu下卸载nginx"></a>Ubuntu下卸载nginx</h4><p>先停止nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl stop nginx</span><br></pre></td></tr></table></figure>
<p>删除nginx，–purge包括配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure>
<p>自动移除全部不使用的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get autoremove</span><br></pre></td></tr></table></figure>
<p>列出与nginx相关的软件 并删除显示的软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> sudo apt-get --purge remove nginx</span><br><span class="line"><span class="meta">$</span> sudo apt-get --purge remove nginx-common</span><br><span class="line"><span class="meta">$</span> sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure>
<p>再次执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> which nginx  #不再显示nginx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Pagehelper</title>
    <url>/2020/04/02/2020-04-01-Pagehelper/</url>
    <content><![CDATA[<center><font size="4" color="red">Pagehelper的使用</font></center>

<a id="more"></a>
<h2 id="Pagehelper的使用"><a href="#Pagehelper的使用" class="headerlink" title="Pagehelper的使用"></a>Pagehelper的使用</h2><p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--pageHelper版本5以前的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;plugins&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;plugin interceptor="com.github.pagehelper.PageHelper"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name="dialect" value="mysql"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/plugin&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/plugins&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--pageHelper版本5以后的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>依赖jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis分页相关的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.miemiedev<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-paginator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设置分页信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取第1页，10条内容，默认查询总数count</span></span><br><span class="line">Pagehelper.startPage(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//紧跟着的第一个select方法会被分页</span></span><br><span class="line">List&lt;User&gt; list=userMapper.selectIf(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>获取分页信息有两种方法</p>
<p>第一种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页后，实际返回的结果list类型是Page&lt;E&gt;，如果想取出分页信息，需要强制转换为Page&lt;E&gt;</span></span><br><span class="line">Page&lt;User&gt; userList=(Page&lt;User&gt;)list;</span><br><span class="line">userList.getTotal();</span><br></pre></td></tr></table></figure>
<p>第二种方法，<strong>推荐使用第二种</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用PageInfo对结果进行包装</span></span><br><span class="line">PageInfo page=<span class="keyword">new</span> PageInfo(list);</span><br><span class="line"><span class="comment">//获取PageInfo全部属性，PageInfo包含了非常全面的分页属性</span></span><br><span class="line">assertEquals(<span class="number">1</span>,page.getPageNum());</span><br><span class="line">assertEquals(<span class="number">10</span>,page.getPageSize());</span><br><span class="line">assertEquals(<span class="number">1</span>,page.getStartRow());</span><br><span class="line">assertEquals(<span class="number">10</span>,page.getEndRow());</span><br><span class="line">assertEquals(<span class="number">183</span>,page.getTotal());</span><br><span class="line">assertEquals(<span class="number">19</span>,page.getPages());</span><br><span class="line">assertEquals(<span class="number">1</span>,page.getFirstPage());</span><br><span class="line">assertEquals(<span class="number">8</span>,page.getLastPage());</span><br><span class="line">assertEquals(<span class="keyword">true</span>,page.isFirstPage());</span><br><span class="line">assertEquals(<span class="keyword">false</span>,page.isLastPage());</span><br><span class="line">assertEquals(<span class="keyword">true</span>,page.isHasNextPage());</span><br><span class="line">assertEquals(<span class="keyword">false</span>,page.isHasPreviousPage());</span><br></pre></td></tr></table></figure>
<p>java代码实践</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testhelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化spring容器</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取mapper代理对象</span></span><br><span class="line">        UserMapper userMapper = context.getBean(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出第一页，一页2个信息</span></span><br><span class="line">        PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        UserExample example = <span class="keyword">new</span> UserExample();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//去掉查询条件，是查询所有</span></span><br><span class="line">		<span class="comment">//UserExample.Criteria criteria = example.createCriteria();</span></span><br><span class="line">		<span class="comment">//criteria.andUseridEqualTo(1);</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByExample(example);</span><br><span class="line">        PageInfo&lt;User&gt; info=<span class="keyword">new</span> PageInfo&lt;User&gt;(users);</span><br><span class="line">        <span class="comment">//Assert.assertEquals(info.getPages(),3,null)的使用，第一个参数是实际参数，第二个是期望参数，第3个是报错信息</span></span><br><span class="line">        <span class="comment">//Assert.assertEquals(info.getPages(),3,null);</span></span><br><span class="line">        System.out.println(info.getTotal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pagehelper</category>
      </categories>
      <tags>
        <tag>分布式案例</tag>
        <tag>Pagehelper</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu常用压缩和解压命令</title>
    <url>/2020/09/18/2020-09-17-Ubuntu%E5%B8%B8%E7%94%A8%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<center><font size="4" color="red">Ubuntu常用压缩和解压命令</font></center>

<a id="more"></a>
<h1 id="Ubuntu-常用解压与压缩命令"><a href="#Ubuntu-常用解压与压缩命令" class="headerlink" title="Ubuntu 常用解压与压缩命令"></a>Ubuntu 常用解压与压缩命令</h1><h3 id="tar-文件"><a href="#tar-文件" class="headerlink" title=".tar 文件"></a>.tar 文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅打包，并非压缩</span></span><br><span class="line">tar <span class="literal">-xvf</span> FileName.tar         <span class="comment"># 解包</span></span><br><span class="line">tar <span class="literal">-cvf</span> FileName.tar DirName <span class="comment"># 将DirName和其下所有文件（夹）打包</span></span><br></pre></td></tr></table></figure>
<h3 id="gz文件"><a href="#gz文件" class="headerlink" title=".gz文件"></a>.gz文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .gz</span></span><br><span class="line">gunzip FileName.gz  <span class="comment"># 解压1</span></span><br><span class="line">gzip <span class="literal">-d</span> FileName.gz <span class="comment"># 解压2</span></span><br><span class="line">gzip FileName       <span class="comment"># 压缩，只能压缩文件</span></span><br></pre></td></tr></table></figure>
<h2 id="tar-gz文件、-tgz文件"><a href="#tar-gz文件、-tgz文件" class="headerlink" title=".tar.gz文件、 .tgz文件"></a>.tar.gz文件、 .tgz文件</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .tar.gz 和 .tgz</span></span><br><span class="line">tar <span class="literal">-zxvf</span> FileName.tar.gz               <span class="comment"># 解压</span></span><br><span class="line">tar <span class="literal">-zcvf</span> FileName.tar.gz DirName       <span class="comment"># 将DirName和其下所有文件（夹）压缩</span></span><br><span class="line">tar <span class="literal">-C</span> DesDirName <span class="literal">-zxvf</span> FileName.tar.gz <span class="comment"># 解压到目标路径</span></span><br></pre></td></tr></table></figure>
<h3 id="zip文件"><a href="#zip文件" class="headerlink" title=".zip文件"></a>.zip文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 感觉.zip占用空间比.tar.gz大</span></span><br><span class="line">unzip FileName.zip          <span class="comment"># 解压</span></span><br><span class="line">zip FileName.zip DirName    <span class="comment"># 将DirName本身压缩</span></span><br><span class="line">zip <span class="literal">-r</span> FileName.zip DirName <span class="comment"># 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩</span></span><br></pre></td></tr></table></figure>
<h3 id="rar文件"><a href="#rar文件" class="headerlink" title=".rar文件"></a>.rar文件</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac和linux并没有自带rar，需要去下载</span></span><br><span class="line">rar x FileName.rar      <span class="comment"># 解压</span></span><br><span class="line">rar a FileName.rar DirName <span class="comment"># 压缩</span></span><br></pre></td></tr></table></figure>
<p>.tar是打包，.tar.gz才是压缩过的文件，.tar.gz常见于unix系统，在ubuntu或macos可以直接解压，而.zip常见于windows系统。</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>压缩</tag>
        <tag>解压</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04 VM</title>
    <url>/2019/05/28/Ubuntu18-04-VM/</url>
    <content><![CDATA[<center><font size="4" color="red">配置Ubuntu 18.04基础镜像</font></center>

<a id="more"></a>
<h1 id="在Windows上安装Ubuntu18-04虚拟机"><a href="#在Windows上安装Ubuntu18-04虚拟机" class="headerlink" title="在Windows上安装Ubuntu18.04虚拟机"></a>在Windows上安装Ubuntu18.04虚拟机</h1><h2 id="下载Ubuntu18-04的镜像"><a href="#下载Ubuntu18-04的镜像" class="headerlink" title="下载Ubuntu18.04的镜像"></a>下载Ubuntu18.04的镜像</h2><p>下载链接<br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/</a></p>
<p>下载的版本<br>ubuntu-18.04.2-live-server-amd64.iso</p>
<h2 id="在VMware里安装虚拟机"><a href="#在VMware里安装虚拟机" class="headerlink" title="在VMware里安装虚拟机"></a>在VMware里安装虚拟机</h2><p>安装过程省略,这里主要讲解开启虚拟机后的一些设置</p>
<p>修改镜像地址,改成阿里云的.<br><a href="https://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">https://mirrors.aliyun.com/ubuntu/</a></p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/aaa.jpg" alt></p>
<p>选择：Use An Entire Disk And Set Up LVM</p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/03.jpg" alt></p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/05.jpg" alt></p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/07.jpg" alt></p>
<p>选择安装openSSH,如果这个没有安装,进入到系统后,要执行以下命令安装<br><code>$ apt install openssh-server</code></p>
<p>其它的都不用配置,直接done</p>
<h2 id="开启虚拟机root用户权限"><a href="#开启虚拟机root用户权限" class="headerlink" title="开启虚拟机root用户权限"></a>开启虚拟机root用户权限</h2><p>设置root的密码并开启root权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo passwd</span><br><span class="line"><span class="meta">$</span> su root</span><br></pre></td></tr></table></figure>
<p>修改root的权限配置文件<br><code>vi /etc/ssh/sshd_config</code></p>
<p>修改如下</p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/01.jpg" alt></p>
<p>重启ssh服务<br><code>service ssh restart</code></p>
<p>在Xshell里使用root用户登录</p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/04.jpg" alt></p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/06.jpg" alt></p>
<h2 id="设置静态ip和DNS"><a href="#设置静态ip和DNS" class="headerlink" title="设置静态ip和DNS"></a>设置静态ip和DNS</h2><p>编辑配置文件</p>
<p><code>/etc/netplan/50-cloud-init.yaml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">         addresses: [192.168.10.129/24]</span><br><span class="line">         gateway4: 192.168.10.2</span><br><span class="line">         nameservers:</span><br><span class="line">           addresses:</span><br><span class="line">           - 114.114.114.114</span><br><span class="line">           - 114.114.115.115</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure>
<p>使其生效<br><code>netplan apply</code></p>
<p>配置文件里的ens33是和<code>ip a</code>里得到的一致</p>
<p><img src="/2019/05/28/Ubuntu18-04-VM/02.jpg" alt></p>
<blockquote>
<p>注意这个配置文件的格式,一个空格都可能导致配置出错</p>
</blockquote>
<p>启动service<br><code>systemctl start systemd-resolved.service</code></p>
<p>设置为开机自启动<br><code>systemctl enable systemd-resolved.service</code></p>
<p>重启<br><code>reboot</code></p>
<p>试验网络<br><code>ping www.baidu.com</code></p>
<p>检查ip地址是否是自己设置的静态ip<br><code>ip a</code></p>
<p>做个快照<br><code>鼠标右键虚拟机--&gt;快照--&gt;拍摄快照</code></p>
<h2 id="交换空间的设置"><a href="#交换空间的设置" class="headerlink" title="交换空间的设置"></a>交换空间的设置</h2><p>关闭交换空间<br><code>swapoff -a</code></p>
<p>避免开机启动交换空间<br><code>vi /etc/fstab</code><br>修饰掉带swap的一行</p>
<p>关闭防火墙<br><code>ufw disable</code></p>
<p>关机<br><code>shotdown -h now</code></p>
<p>开机做个快照<br><code>鼠标右键虚拟机--&gt;快照--&gt;拍摄快照</code></p>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>使用APT安装docker,方法来源:</p>
<p><a href="https://funtl.com/zh/service-mesh-kubernetes/%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87.html#%E4%BD%BF%E7%94%A8-apt-%E5%AE%89%E8%A3%85-docker" target="_blank" rel="noopener">https://funtl.com/zh/service-mesh-kubernetes/%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87.html#%E4%BD%BF%E7%94%A8-apt-%E5%AE%89%E8%A3%85-docker</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 更新软件源</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span> 安装所需依赖</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span> 安装 GPG 证书</span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span> 新增软件源信息</span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span> 再次更新软件源</span><br><span class="line">sudo apt-get -y update</span><br><span class="line"><span class="meta">#</span> 安装 Docker CE 版</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>
<p>验证<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@yytubuntu:~# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.6</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        481bc77</span><br><span class="line"> Built:             Sat May  4 02:35:57 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.6</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       481bc77</span><br><span class="line">  Built:            Sat May  4 01:59:36 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure></p>
<h2 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h2><p>方法来源地址:</p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors?accounttraceid=9b8e4567-a62c-4723-95e0-6fcb5b44c87f" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors?accounttraceid=9b8e4567-a62c-4723-95e0-6fcb5b44c87f</a></p>
<p>逐条输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://veoukc4z.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>查看是否配置成功</p>
<p>输入<code>docker info</code>,出现以下信息就是配置成功了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line">https://veoukc4z.mirror.aliyuncs.com/</span><br></pre></td></tr></table></figure>
<h2 id="使用pip安装docker-compose"><a href="#使用pip安装docker-compose" class="headerlink" title="使用pip安装docker-compose"></a>使用pip安装docker-compose</h2><p>获取get-pip.py方法来源,安装这个是为了安装pip:</p>
<p><a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">https://pip.pypa.io/en/stable/installing/</a></p>
<p>获取get-pip.py命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure>
<p>要安装get-pip.py需要python,get-pip.py不能和本机自带的python相和谐,所以要自己安装python</p>
<p>使用ppa安装python</p>
<p>安装ppa</p>
<p><code>sudo add-apt-repository ppa:deadsnakes/ppa</code></p>
<p>安装python</p>
<p><code>apt install python3.7</code></p>
<p>安装get-pip.py</p>
<p><code>python3.7 get-pip.py</code></p>
<p>更改pip的镜像源</p>
<p>更改方式的地址来源:</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/pypi</a></p>
<p>使用临时镜像升级pip,提高网速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br></pre></td></tr></table></figure>
<p>升级pip到最新版本后进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pip install pip -U</span><br><span class="line"><span class="meta">$</span> pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>安装docker-compose</p>
<p><code>$ pip install -U docker-compose</code></p>
<p>删除get-pip.py</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls</span><br><span class="line"><span class="meta">$</span> rm -fr get-pip.py</span><br></pre></td></tr></table></figure>
<p>关机</p>
<p><code>$ reboot</code></p>
<p>开机做个快照</p>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆不是新创建一个虚拟机,而是在原有虚拟机上做改变,不会影响最初的base虚拟机</p>
<p><code>鼠标右键--&gt;管理--&gt;克隆</code></p>
<h2 id="导出OVF格式文件"><a href="#导出OVF格式文件" class="headerlink" title="导出OVF格式文件"></a>导出OVF格式文件</h2><p>导出的文件删除了DVD驱动,导入到新的VMware后要添加DVD驱动和镜像</p>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>ubuntu18.04</tag>
        <tag>install</tag>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Install Oracle</title>
    <url>/2019/05/30/Ubuntu-Install-Oracle/</url>
    <content><![CDATA[<center><font size="4" color="red">Ubuntu 18.04 Docker 安装 Oracle Database</font></center>

<a id="more"></a>
<h1 id="使用docker安装oracle"><a href="#使用docker安装oracle" class="headerlink" title="使用docker安装oracle"></a>使用docker安装oracle</h1><h2 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
<p>相应的输入注册的docker用户名和密码，如果没有注册，先去docker官网注册</p>
<p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p>
<h2 id="下载oracle镜像"><a href="#下载oracle镜像" class="headerlink" title="下载oracle镜像"></a>下载oracle镜像</h2><p>拉取oracle镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull deepdiver/docker-oracle-xe-11g</span><br></pre></td></tr></table></figure>
<p>运行oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 49160:22 -p 49161:1521 deepdiver/docker-oracle-xe-11g</span><br></pre></td></tr></table></figure>
<p>查询oracle镜像是否已经存在</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>显示如下就说明镜像已经存在了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                                                      NAMES</span><br><span class="line">cc6bc8d8aa17        deepdiver/docker-oracle-xe-11g   "/bin/sh -c 'sed -i …"   16 seconds ago      Up 11 seconds       8080/tcp, 0.0.0.0:49160-&gt;22/tcp, 0.0.0.0:49161-&gt;1521/tcp   hardcore_engelbart</span><br></pre></td></tr></table></figure>
<p>将容器的名称重新命名为oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rename hardcore_engelbart oracle</span><br></pre></td></tr></table></figure>
<p>进入oracle的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it oracle bash</span><br></pre></td></tr></table></figure>
<p>进入oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br></pre></td></tr></table></figure>
<p>使用system进入oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">connect system</span><br></pre></td></tr></table></figure>
<p>会提示输入密码，密码为：oracle</p>
<p>然后出现以下信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR:</span><br><span class="line">ORA-28002: the password will expire within 7 days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connected.</span><br></pre></td></tr></table></figure>
<p>这个密码只能适用7天，因此需要修改密码,退出oracle的system，在oracle容器里：</p>
<p>先给oracle权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su oracle</span><br></pre></td></tr></table></figure>
<p>以sysdba的方式进入oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>
<p>修改密码时间权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> profile <span class="keyword">default</span> <span class="keyword">limit</span> password_life_time <span class="keyword">unlimited</span>;</span><br></pre></td></tr></table></figure>
<p>查询修改后的密码配置情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_profiles s <span class="keyword">where</span> s.profile=<span class="string">'DEFAULT'</span> <span class="keyword">and</span> resource_name=<span class="string">'PASSWORD_LIFE_TIME'</span>;</span><br></pre></td></tr></table></figure>
<p>如果DEFAULT为unlimit就是配置成功了</p>
<h2 id="远程登录方式"><a href="#远程登录方式" class="headerlink" title="远程登录方式"></a>远程登录方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Connection Type:Basic</span><br><span class="line">port:49161</span><br><span class="line">Service Name:xe</span><br><span class="line">Service Name的类型:SID</span><br><span class="line">Role:Default</span><br><span class="line">User name:system</span><br><span class="line">password:oracle</span><br></pre></td></tr></table></figure>
<h2 id="Mac下载SQL-Plus和Basic"><a href="#Mac下载SQL-Plus和Basic" class="headerlink" title="Mac下载SQL*Plus和Basic"></a>Mac下载SQL*Plus和Basic</h2><p>默认Mac下已经下载了连接oracle的工具，我下载的是Navicat Premium</p>
<p>下载SQL*Plus和Basic链接：</p>
<p><a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html</a></p>
<p>下载内容：</p>
<p>instantclient-basic-macos.x64–11.2.0.4.0.zip<br>instantclient-sqlplus-macos.x64–11.2.0.4.0.zip</p>
<p>cd到下载内容所在的文件夹下</p>
<p>把下载好的文件放到~/Library/Caches/Homebrew下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv instantclient-basic-macos.x64-18.1.0.0.0.zip ~/Library/Caches/Homebrew</span><br><span class="line">mv instantclient-sqlplus-macos.x64-18.1.0.0.0.zip ~/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure>
<p>执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> brew tap InstantClientTap/instantclient</span><br><span class="line"><span class="meta">$</span> brew install instantclient-basic</span><br><span class="line"><span class="meta">$</span> brew install instantclient-sqlplus</span><br></pre></td></tr></table></figure>
<p>在运行brew install instantclient-basic和brew install instantclient-sqlplus命令时，也许会出现错误提示信息，要求对instantclient-basic-macos.x64–11.2.0.4.0.zip和instantclient-sqlplus-macos.x64–11.2.0.4.0.zip改名并移动到~/Library/Caches/Homebrew/Download下。复制要修改的名称改名并复制就可</p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">To this location (a specific filename in homebrew cache directory):</span><br><span class="line"></span><br><span class="line">  /Users/wanghui/Library/Caches/Homebrew/downloads/1ace9ca784e431112e837a769fc89eae38ad1489165c38aa698139d25d8fd96b--instantclient-basic-macos.x64-18.1.0.0.0.zip</span><br></pre></td></tr></table></figure>
<p>进入~/Library/Caches/Homebrew，将instantclient-basic-macos.x64–11.2.0.4.0.zip修改为1ace9ca784e431112e837a769fc89eae38ad1489165c38aa698139d25d8fd96b–instantclient-basic-macos.x64-18.1.0.0.0.zip，然后移动到~/Library/Caches/Homebrew/downloads</p>
<h2 id="配置Navicat-Premium"><a href="#配置Navicat-Premium" class="headerlink" title="配置Navicat Premium"></a>配置Navicat Premium</h2><p>Navicat Premium –&gt; Preferences –&gt; Environment</p>
<p>默认的安装路径</p>
<p><code>/usr/local/Cellar/instantclient-sqlplus/18.1.0.0.0</code></p>
<p>将其填入</p>
<p><img src="/2019/05/30/Ubuntu-Install-Oracle/oracle.png" alt></p>
<p>这个是我本人的</p>
<p>个人oracle账号：</p>
<p>Connect database with following setting:</p>
<pre><code>hostname: localhost
port: 1521
sid: EE
service name: EE.oracle.docker
username: system
password: oracle
</code></pre><p>To connect using sqlplus:</p>
<pre>
sqlplus system/oracle@//localhost:1521/EE.oracle.docker
</pre>

<p>Password for SYS &amp; SYSTEM:</p>
<pre><code>oracle
</code></pre>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>install</tag>
        <tag>ubuntu</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-05_理解需求</title>
    <url>/2019/05/15/2019-05-15-05-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于进行需求分析的文章</font></center>

<a id="more"></a>
<h1 id="理解需求"><a href="#理解需求" class="headerlink" title="理解需求"></a>理解需求</h1><h2 id="需求工程"><a href="#需求工程" class="headerlink" title="需求工程"></a>需求工程</h2><p>需求工程致力于不断理解需求的大量任务和技术</p>
<ul>
<li><p>起始：建立基本的理解，包括对问题，谁需要解决方案，所期望解决方案的性质，与利益相关者和开发人员之间达成初步交流合作的效果。</p>
</li>
<li><p>导出</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">问题：</span><br><span class="line">系统或者产品目标是什么？</span><br><span class="line">想要实现什么？</span><br><span class="line">系统和产品如何满足业务的要求？</span><br><span class="line">最终系统或产品如何用于日常工作？</span><br><span class="line"></span><br><span class="line">需求导出困难的原因：</span><br><span class="line">范围问题</span><br><span class="line">理解问题</span><br><span class="line">易变问题</span><br></pre></td></tr></table></figure>
<ul>
<li><p>精化：集中开发一个精确的需求模型，用以说明软件的功能，特征和信息</p>
</li>
<li><p>协商：调节冲突</p>
</li>
<li><p>规格说明：图形，文档，模型，只要是易于表达意思的都行，另外这个是有模版的,模版参考Process Impact公司的需求规格说明书</p>
</li>
<li><p>确认</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">需求确认检查表：</span><br><span class="line">需求说明清晰吗？有没有可能造成误解？</span><br><span class="line">需求的来源弄清楚了吗？需求的最终说明是否已经根据或对照最初来源检查过？</span><br><span class="line">需求是否用定量的术语界定？</span><br><span class="line">其它哪些需求和此需求相关？是否已经使用交叉索引矩阵或其它机制弄清楚加以说明？</span><br><span class="line">需求是否违背某个系统领域的约束？</span><br><span class="line">需求是否可测试？如果可以，能否说明检测需求的测试？</span><br><span class="line">对已经创建的任何系统模型，需求是否可跟踪？</span><br><span class="line">对整体系统/产品目标，需求是否可跟踪？</span><br><span class="line">规格说明的构造方式是否有助于理解，轻松引用和翻译成更技术型的工作产品？</span><br><span class="line">对已创建的规格说明是否建立了索引？</span><br><span class="line">与系统性能，行为及运行特征相关需求的说明是否清楚？哪些需求是隐含出现的？</span><br></pre></td></tr></table></figure>
<ul>
<li>管理:追踪需求的变更</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">需求工具：</span><br><span class="line">全面的需求工具列表：https://www.volere.org/requirements-tools/</span><br><span class="line">需求管理工具：</span><br><span class="line">www-306.ibm.com/software/awdtools/reqpro/</span><br></pre></td></tr></table></figure>
<h2 id="建立根基"><a href="#建立根基" class="headerlink" title="建立根基"></a>建立根基</h2><h4 id="确认利益相关者"><a href="#确认利益相关者" class="headerlink" title="确认利益相关者"></a>确认利益相关者</h4><ul>
<li><p>业务运行管理人员</p>
</li>
<li><p>产品管理人员</p>
</li>
<li><p>市场销售人员</p>
</li>
<li><p>内部和外部客户</p>
</li>
<li><p>最终用户</p>
</li>
<li><p>顾问</p>
</li>
<li><p>产品工程师</p>
</li>
<li><p>支持和维护工程师</p>
</li>
<li><p>其它人员</p>
</li>
</ul>
<h4 id="识别多重观点"><a href="#识别多重观点" class="headerlink" title="识别多重观点"></a>识别多重观点</h4><ul>
<li>不同的利益相关者会从他们自己的角度来寻找需求，需求工程师应该把所有人的需求进行分类整理。</li>
</ul>
<h4 id="协同合作"><a href="#协同合作" class="headerlink" title="协同合作"></a>协同合作</h4><p>如何协作</p>
<ul>
<li>需求工程师将工作标识为公共区域，矛盾区域和不一致区域。不一致区域，也是各利益相关者需求出现冲突的区域是最具有挑战性的。</li>
</ul>
<p>方法</p>
<ul>
<li>使用“优先点”，利益相关者投票决定，确定需求优先点</li>
</ul>
<h4 id="首次提问"><a href="#首次提问" class="headerlink" title="首次提问"></a>首次提问</h4><p>需求导出前应该问一些与环境无关的问题，以下问题有助于识别所有对构建软件感兴趣的利益相关者：</p>
<ul>
<li><p>谁是这项工作的最初请求者？</p>
</li>
<li><p>谁将使用该方案？</p>
</li>
<li><p>成功的解决方案能带来什么样的经济效益？</p>
</li>
</ul>
<p>以下问题有助于软件开发组更好的理解问题：</p>
<ul>
<li><p>如何描述由成功的解决方案产生的“良好”输出的特征？</p>
</li>
<li><p>该解决方案强调解决了什么问题？</p>
</li>
<li><p>能向我们展示解决方案使用的商业环境吗？</p>
</li>
<li><p>存在将影响解决方案中特殊的性能问题或约束吗？</p>
</li>
</ul>
<p>以下问题关注与沟通活动本身的效率，也叫“元问题”</p>
<ul>
<li><p>你是回答这些问题的合适人选吗？你的回答是“正式的”吗？</p>
</li>
<li><p>我的提问和你想解决的问题相关吗？</p>
</li>
<li><p>我的问题是否太多了？</p>
</li>
<li><p>还有其他人员可以提供更多的信息吗？</p>
</li>
<li><p>还有我应该问的问题吗？</p>
</li>
</ul>
<h2 id="导出需求"><a href="#导出需求" class="headerlink" title="导出需求"></a>导出需求</h2><h4 id="协作收集需求"><a href="#协作收集需求" class="headerlink" title="协作收集需求"></a>协作收集需求</h4><p>步骤：</p>
<ul>
<li><p>1.有了基本问题和答案，并确定了问题的范围和对解决方案的整体理解</p>
</li>
<li><p>2.拟定会议地点，会议“调解人”，采用“方案论证手段“(工作表，活动挂图，电子公告牌，聊天室或者虚拟论坛)。开发人员和客户写1～2页的“产品要求”。</p>
</li>
<li><p>3.启会前，将“产品要求”分发给所有参会者</p>
</li>
<li><p>4.参会者讨论，并制定项目对象，服务列表，约束列表，性能标准列表</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">项目对象:使用的具体对象</span><br><span class="line">服务列表：该项目所应该具有的服务</span><br><span class="line">约束列表：考虑软件所面临和会出现的意外情况，然后提前由解决方案解决</span><br><span class="line">性能标准列表：页面的响应速度，以及一些优先级事件</span><br></pre></td></tr></table></figure>
<ul>
<li><p>5.该专题的各个列表被提出后，生成组合列表，删除冗余项，可添加新的想法</p>
</li>
<li><p>注意点：对象和服务，这需要更多的解释，利益相关者需要为列表的条目编写规格说明。该规格要说明到对象的具体情况，例如对页面的具体要求，多高，多宽。服务要非常清晰。</p>
</li>
<li><p>保留那些还不能解决的问题</p>
</li>
</ul>
<h4 id="质量功能部署"><a href="#质量功能部署" class="headerlink" title="质量功能部署"></a>质量功能部署</h4><p>质量功能部署(Quality Function Deployment QFD)：将用户要求转换为软件技术需求的质量管理技术。QDF确认了三类需求：</p>
<ul>
<li><p>正常需求：必须为客户实现的需求</p>
</li>
<li><p>期望需求：如果不实现，客户可能不满的一些需求</p>
</li>
<li><p>令人兴奋的需求：如果实现了，客户会非常兴奋的一些需求</p>
</li>
</ul>
<h4 id="用户场景"><a href="#用户场景" class="headerlink" title="用户场景"></a>用户场景</h4><p>用户场景就是在研究用户使用某个功能时的场景，我们必须知道用户使用某项功能的具体场景，需要什么东西，打开什么样的页面，页面上都有什么，用户是点击按钮还是做些其它动作。用户场景也叫“用例场景”。</p>
<h4 id="导出工作产品"><a href="#导出工作产品" class="headerlink" title="导出工作产品"></a>导出工作产品</h4><p>工作产品包括：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">要求和可行性陈述</span><br><span class="line">系统或产品范围的界限说明</span><br><span class="line">参与需求导出的客户，用户和其他利益相关者的名单</span><br><span class="line">系统技术环境的说明</span><br><span class="line">需求列表(最好按功能组织)以及每个需求使用的领域限制</span><br><span class="line">一系列使用场景，有助于深入了解系统或产品在不同运行环境下的使用</span><br><span class="line">任何能够更好地定义需求的原型</span><br></pre></td></tr></table></figure>
<p>所有参与需求导出的人员需要评审以上的每一个工作产品</p>
<h2 id="开发用例"><a href="#开发用例" class="headerlink" title="开发用例"></a>开发用例</h2><p>开发用例</p>
<ul>
<li><p>1.确定参与者</p>
</li>
<li><p>2.有了参与者后，才能开发用例，以下是开发用例应该回答的问题</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">谁是主要参与者，次要参与者？</span><br><span class="line">参与者的目标是什么？</span><br><span class="line">故事开始前有什么前提条件？</span><br><span class="line">参与者完成的主要工作或功能是什么？</span><br><span class="line">按照故事所描述的还可能需要考虑什么异常？</span><br><span class="line">参与者的交互中有什么可能的变化？</span><br><span class="line">参与者将获得，产生或改变哪些系统信息？</span><br><span class="line">参与者必须通知系统有关外部环境的改变吗？</span><br><span class="line">参与者希望从系统获取什么信息？</span><br><span class="line">参与者希望得知会有意料之外的变更吗？</span><br></pre></td></tr></table></figure>
<h2 id="构建需求模型"><a href="#构建需求模型" class="headerlink" title="构建需求模型"></a>构建需求模型</h2><h4 id="需求模型的元素"><a href="#需求模型的元素" class="headerlink" title="需求模型的元素"></a>需求模型的元素</h4><p>基于场景的元素</p>
<ul>
<li><p>从用户的视角描述系统</p>
</li>
<li><p>详情参考：<a href="https://www.cnblogs.com/xiaolongbao-lzh/p/4590897.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaolongbao-lzh/p/4590897.html</a></p>
</li>
</ul>
<p>基于类的元素</p>
<ul>
<li>UML类图，第7天时具体分析</li>
</ul>
<p>行为元素</p>
<ul>
<li>UML状态图，第7天时具体分析</li>
</ul>
<p>面向数据流的元素</p>
<ul>
<li>数据流模型，第7天时具体分析</li>
</ul>
<h4 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h4><p>分析需求的目的是因为在特定的应用领域内某些事情在所有的项目中重复发生，这些分析模式在许多应用项目建模时可以重复使用。</p>
<h2 id="协商需求"><a href="#协商需求" class="headerlink" title="协商需求"></a>协商需求</h2><p>协商需求要做的一系列活动</p>
<ul>
<li><p>1.识别系统或子系统关键的利益相关者</p>
</li>
<li><p>2.确认利益相关者“赢”的条件</p>
</li>
<li><p>3.就利益相关者“赢”的条件进行协商，以便使其与所有涉及人的一些双赢条件一致</p>
</li>
</ul>
<h2 id="确认需求"><a href="#确认需求" class="headerlink" title="确认需求"></a>确认需求</h2><p>确认需求时应该提出以下问题：</p>
<ul>
<li><p>1.每项需求都和系统或产品的整体目标一致吗？</p>
</li>
<li><p>2.需求是真正必须的吗？</p>
</li>
<li><p>3.每项需求都有界定且无歧义的吗？</p>
</li>
<li><p>4.每项需求都标记了来源吗？</p>
</li>
<li><p>5.有需求发生冲突吗？</p>
</li>
<li><p>6.需求能保证一定可以实现吗？</p>
</li>
<li><p>7.实现的需求是可测试的吗？</p>
</li>
<li><p>8.需求模型有恰当的反映将要构建系统的信息，功能和行为吗？</p>
</li>
<li><p>9.需求模型有详细分割，能逐步揭示详细的系统信息吗？</p>
</li>
<li><p>10.每项需求模式都符合客户要求吗？</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>软件工程</tag>
        <tag>需求</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-06_需求建模：场景、信息、与类分析</title>
    <url>/2019/05/16/2019-05-16-06-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于需求建模的文章</font></center>

<a id="more"></a>
<h1 id="需求建模：场景、信息、与类分析"><a href="#需求建模：场景、信息、与类分析" class="headerlink" title="需求建模：场景、信息、与类分析"></a>需求建模：场景、信息、与类分析</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>需求建模：</p>
<ul>
<li><p>1.场景建模</p>
</li>
<li><p>2.数据建模</p>
</li>
<li><p>3.面向类的模型</p>
</li>
<li><p>4.面向流程的模型</p>
</li>
<li><p>5.行为模型</p>
</li>
</ul>
<h4 id="总体目标和原理"><a href="#总体目标和原理" class="headerlink" title="总体目标和原理"></a>总体目标和原理</h4><p>需求建模必须实现3个主要目标：</p>
<ul>
<li><p>1.描述客户需要什么</p>
</li>
<li><p>2.为软件设计奠定基础</p>
</li>
<li><p>3.定义在软件完成后可以被确认的一组需求</p>
</li>
</ul>
<h4 id="分析的经验原则"><a href="#分析的经验原则" class="headerlink" title="分析的经验原则"></a>分析的经验原则</h4><p>模型的经验原则</p>
<ul>
<li><p>1.模型应关注在问题域或业务域内可见的需求，不要陷入细节</p>
</li>
<li><p>2.每个元素都应该增加对软件需求的整体理解，以及对信息域、功能和系统行为的深入理解</p>
</li>
<li><p>3.基础结构和其它非功能的模型应推延到设计阶段再考虑</p>
</li>
<li><p>4.最小化整个系统内的关联</p>
</li>
<li><p>5.确认需求模型为整个利益相关者都带来价值</p>
</li>
<li><p>6.尽可能保持模型简洁</p>
</li>
</ul>
<h4 id="域分析"><a href="#域分析" class="headerlink" title="域分析"></a>域分析</h4><p>域分析师：发现和定义可复用的分析模式，分析类和相关的信息</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd6454448646866.jpg" alt></p>
<h4 id="建立模型的方法"><a href="#建立模型的方法" class="headerlink" title="建立模型的方法"></a>建立模型的方法</h4><p>结构化分析</p>
<ul>
<li>将数据对象抽取为一个Model，由该Model来对数据结果进行分析</li>
</ul>
<p>面向对象的分析</p>
<ul>
<li>定义类和影响客户需求的类之间的协作关系</li>
</ul>
<p>目的：</p>
<ul>
<li>不管采用什么分析方法，我们最终都是为了为利益相关者提供最好的软件需求模型和过渡到软件设计的最有效方法。</li>
</ul>
<p>需求模型的元素：</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbe5172a8f195961.jpg" alt></p>
<h2 id="基于场景的建模"><a href="#基于场景的建模" class="headerlink" title="基于场景的建模"></a>基于场景的建模</h2><h4 id="新建初始用例"><a href="#新建初始用例" class="headerlink" title="新建初始用例"></a>新建初始用例</h4><p>开发用例问题：</p>
<ul>
<li><p>1.编写什么？</p>
</li>
<li><p>2.写多少？</p>
</li>
<li><p>3.编写说明应该多详细？</p>
</li>
<li><p>4.如何组织说明？</p>
</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">编写：</span><br><span class="line">1.起始和导出</span><br><span class="line">2.定义问题范围</span><br><span class="line">3.说明整体的运行目标</span><br><span class="line">4.建立优先级顺序</span><br><span class="line">5.概述所有已知的功能需求</span><br><span class="line">6.描述系统将处理的信息</span><br></pre></td></tr></table></figure>
<p>对用例的分析可以采用两种形式，一种是模拟利益相关者来陈述用例故事，另外一种是以列表的形式逐条列出执行的步骤。</p>
<h4 id="细化初始用例"><a href="#细化初始用例" class="headerlink" title="细化初始用例"></a>细化初始用例</h4><p>细化问题：</p>
<ul>
<li><p>1.在这一状态点上，参与者能进行一些其它的动作吗？</p>
</li>
<li><p>2.在这一状态点上，参与者有没有可能遇到一些错误的条件？如果有可能，这些错误会是什么？</p>
</li>
<li><p>3.在这一状态点上，参与者有没有可能遇到一些其他的行为？是什么？</p>
</li>
</ul>
<p>还应该考虑的问题：</p>
<ul>
<li><p>1.应答失败，如用户是等待一个应答，但应答超时了</p>
</li>
<li><p>2.性能差，如页面渲染速度贼慢</p>
</li>
</ul>
<p>如何解决：</p>
<ul>
<li>看下一小节，编写正规的用例</li>
</ul>
<h4 id="编写正规的用例"><a href="#编写正规的用例" class="headerlink" title="编写正规的用例"></a>编写正规的用例</h4><p><strong>干货：规范的用例模版</strong></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">用例：购买零食</span><br><span class="line">迭代：2，最新更新记录：hui XXXX年YY月RR日</span><br><span class="line">主演参与者：顾客</span><br><span class="line">情景目标：任何时候，任何地点用户通过互联网购买零食</span><br><span class="line">前提条件：客户已经申请了一个会员号，并且用户已经使用正确的会员号登陆</span><br><span class="line">起动：客户在想买零食的时候，打开电脑买零食</span><br><span class="line">场景：</span><br><span class="line">1.客户登陆零食网站</span><br><span class="line">2.客户输入他的会员号  </span><br><span class="line">3.客户输入他的密码     </span><br><span class="line">4.系统显示网站的零食首页信息</span><br><span class="line">5.客户选择零食加入购物车或者直接购买 </span><br><span class="line">6.客户选择完后开始点击“购买”</span><br><span class="line">7.系统显示出客户所购买零食的清单以及零食总价</span><br><span class="line">8.客户选择付款方式，然后点击“支付”</span><br><span class="line">9.系统提示付款成功     </span><br><span class="line">异常：</span><br><span class="line">1.会员号或者密码不正确——————参看用例：“确认用户名和密码”</span><br><span class="line">2.客户忘记了密码——————参看用例：“找回密码”</span><br><span class="line">3.还没有购物车——————参看用例：“购物车”</span><br><span class="line">4.支付失败——————参考用例：“支付”</span><br><span class="line">优先级：属于基础功能，高优先级</span><br><span class="line">何时可用：第X个增量，因为增量没有完全的设计，所以这里用X代替</span><br><span class="line">使用频率：高等频率</span><br><span class="line">使用方式：通过基于个人计算机的浏览器和互联网连接到零食网站</span><br><span class="line">次要参与者：系统管理员，客服</span><br><span class="line">次要参与者使用方式：</span><br><span class="line">1.系统管理员：基于个人计算机的系统</span><br><span class="line">2.客服：客服页面系统</span><br><span class="line">未解决的问题：</span><br><span class="line">1.有其他的登陆方式吗？如手机扫码登陆，手机短信登陆</span><br><span class="line">2.当购买人数出现高峰期时，怎样才能保证系统不崩溃？</span><br><span class="line">3.网络崩溃时，用户刷新后继续显示当前页面吗？</span><br></pre></td></tr></table></figure>
<p>下一节结束用例的UML图，为了应对较复杂的用例情况</p>
<h2 id="补充用例的UML模型"><a href="#补充用例的UML模型" class="headerlink" title="补充用例的UML模型"></a>补充用例的UML模型</h2><p>购买零食功能活动图</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbfc49be07082712.jpg" alt></p>
<p>泳道图</p>
<ul>
<li>参考一下blog学习：<a href="https://blog.csdn.net/fly_zxy/article/details/80939806" target="_blank" rel="noopener">https://blog.csdn.net/fly_zxy/article/details/80939806</a></li>
</ul>
<h2 id="数据建模概念"><a href="#数据建模概念" class="headerlink" title="数据建模概念"></a>数据建模概念</h2><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><p>数据对象由复合信息表示。</p>
<ul>
<li><p>复合信息：具有若干不同的特征或属性的事物</p>
</li>
<li><p>数据对象只封装数据</p>
</li>
</ul>
<h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>数据属性定义了数据对象的性质，有三个不同的特征</p>
<ul>
<li><p>1.为数据对象实例命名</p>
</li>
<li><p>2.描述这个实例</p>
</li>
<li><p>3.建立对另一个表中的另一个实例的引用</p>
</li>
</ul>
<p>区别于数据属性：</p>
<ul>
<li>数据对象与数据属性的区别？car是一个数据对象，里面封装的颜色，大小，价格等是数据属性</li>
</ul>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>有些数据对象之间是有关系的，E-R关系</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">一些常用的数据建模工具：</span><br><span class="line">AllFusion ERWin : https://erwin.com/?gclid=EAIaIQobChMI2-fG9ted4gIVmCCtBh0GoQBMEAAYASAAEgK8ePD_BwE</span><br><span class="line">ER/Studio : https://www.embarcadero.com/er-studio-editions</span><br><span class="line">Oracle Designer : https://www.oracle.com/technetwork/developer-tools/designer/overview/index-082236.html</span><br><span class="line">Visible Analyst : http://www.visiblesystemscorp.com/Products/Analyst/index.htm</span><br></pre></td></tr></table></figure>
<h2 id="基于类的建模"><a href="#基于类的建模" class="headerlink" title="基于类的建模"></a>基于类的建模</h2><h4 id="识别分析类"><a href="#识别分析类" class="headerlink" title="识别分析类"></a>识别分析类</h4><p>分析过程，寻找名词和动词，分析类表现为以下方式之一：</p>
<ul>
<li><p>1.外部实体，产生或使用基于计算机系统的信息</p>
</li>
<li><p>2.事物，问题信息域的一部分</p>
</li>
<li><p>3.偶尔事件或事件，在系统操作环境内发生</p>
</li>
<li><p>4.角色，由和系统交互的人员扮演</p>
</li>
<li><p>5.组织单元，和某个应用系统相关</p>
</li>
<li><p>6.场地，建立问题的环境和系统的整体功能</p>
</li>
<li><p>7.结构，定义了对象的类或与对象相关的类</p>
</li>
</ul>
<p>最初找出的有用的名词或者动词只能称为潜在类，还需要考虑这些潜在类是否有以下特性</p>
<ul>
<li><p>1.保留信息：只有记录潜在类的信息，系统才能正常工作，这类潜在类是有用的</p>
</li>
<li><p>2.所需服务：潜在类必须具有一组可确认的操作，这组操作能用某种方式改变类的属性值</p>
</li>
<li><p>3.多个属性：需求分析过程中，焦点应在于“主”信息，事实上，只有一个属性的类可能在设计中有用，但在分析活动阶段，最好把它作为另一个类的某个属性.意思是如果是单一属性，就没必须为这个属性创建类，而是考虑其是不是其他类的属性。</p>
</li>
<li><p>4.公共属性：可以为潜在类定义一组属性，这些属性适用于类的所有实例</p>
</li>
<li><p>5.公共操作：可以为潜在类定义一组操作，这些操作使用与类的所有实例</p>
</li>
<li><p>6.必要需求：在问题空间中出现的外部实体，和任何系统解决方案运行时所必须的生产或消费信息，几乎都被定义为需求模型中的类</p>
</li>
</ul>
<h4 id="描述属性"><a href="#描述属性" class="headerlink" title="描述属性"></a>描述属性</h4><p>属性描述了已经包含在需求模型中的类。实质上，属性是定义类以澄清类在问题空间的环境下意味着什么</p>
<p>可以采用一些组合项来描述数据：</p>
<ul>
<li>用户登陆=登陆账号+登陆密码</li>
</ul>
<h4 id="定义操作"><a href="#定义操作" class="headerlink" title="定义操作"></a>定义操作</h4><p>操作定义了某个对象的行为，粗略的划分为4种：</p>
<ul>
<li><ol>
<li>以某种方式操作数据(例如：添加，删除，重新格式化，选择)</li>
</ol>
</li>
<li><p>2.执行计算的操作</p>
</li>
<li><p>3.请求某个对象的状态的操作</p>
</li>
<li><p>4.监视某个对象发生某个控制事件的操作</p>
</li>
</ul>
<h4 id="类-职责-协作者建模"><a href="#类-职责-协作者建模" class="headerlink" title="类-职责-协作者建模"></a>类-职责-协作者建模</h4><p>Class-Responsibility-Collaborator,CRC卡</p>
<p><img src="https://i.loli.net/2019/05/16/5cdcc06adb2ef45071.jpg" alt></p>
<p>类：</p>
<ul>
<li><p>1.实体类</p>
</li>
<li><p>2.边界类</p>
</li>
<li><p>3.控制类</p>
</li>
</ul>
<p>职责：</p>
<ul>
<li><p>1.智能系统应分布在所有类中以求最佳地满足问题的需求</p>
</li>
<li><p>2.每个职责的说明应尽可能具有普遍性</p>
</li>
<li><p>3.信息和与之相关的行为应放在同一个类中</p>
</li>
<li><p>4.某个事物的信息应局限于一个类中而不要分布在多个类中</p>
</li>
<li><p>5.适合时，职责应由相关类分享</p>
</li>
</ul>
<p>协作：</p>
<ul>
<li>是客户和服务器之间契约的具体实现，识别协作的方法是通过确认类本身是否实现自身的每个职责，如果不能，就需要和其他类协作</li>
</ul>
<p>CRC的使用：</p>
<ul>
<li>CRC的使用很简单，就是先有一种主CRC卡，然后到达相应的职责时会有对应的协作者，然后再由这个协作者的类进行分析，依次类推。</li>
</ul>
<h4 id="关联和依赖"><a href="#关联和依赖" class="headerlink" title="关联和依赖"></a>关联和依赖</h4><p>这个关联说的有些想数据库中的E-R关系图，就一对一，一对多，多对多的关系</p>
<p>依赖，依赖是一个类获得另外一个类的请求后才能执行其对应的功能</p>
<h4 id="分析包"><a href="#分析包" class="headerlink" title="分析包"></a>分析包</h4><p>类似于java中的“package”</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>需求建模</tag>
        <tag>场景</tag>
        <tag>信息</tag>
        <tag>类</tag>
      </tags>
  </entry>
  <entry>
    <title>Vagrant-自动部署虚拟机、JDK、Mysql</title>
    <url>/2019/05/22/2019-05-21_Vagrant/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于使用vagrant自动部署虚拟机、JDK、Mysql</font></center>

<a id="more"></a>
<h1 id="使用vagrant自动部署虚拟机、JDK、Mysql"><a href="#使用vagrant自动部署虚拟机、JDK、Mysql" class="headerlink" title="使用vagrant自动部署虚拟机、JDK、Mysql"></a>使用vagrant自动部署虚拟机、JDK、Mysql</h1><h2 id="这里主要介绍Vagrantfile的配置文件"><a href="#这里主要介绍Vagrantfile的配置文件" class="headerlink" title="这里主要介绍Vagrantfile的配置文件"></a>这里主要介绍Vagrantfile的配置文件</h2><ul>
<li>Vagrantfile文件配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> -*- mode: ruby -*-</span><br><span class="line"><span class="meta">#</span> vi: set ft=ruby :</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> All Vagrant configuration is done below. The "2" in Vagrant.configure</span><br><span class="line"><span class="meta">#</span> configures the configuration version (we support older styles for</span><br><span class="line"><span class="meta">#</span> backwards compatibility). Please don't change it unless you know what</span><br><span class="line"><span class="meta">#</span> you're doing.</span><br><span class="line">Vagrant.configure("2") do |config|</span><br><span class="line"><span class="meta">  #</span> The most common configuration options are documented and commented below.</span><br><span class="line"><span class="meta">  #</span> For a complete reference, please see the online documentation at</span><br><span class="line"><span class="meta">  #</span> https://docs.vagrantup.com.</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Every Vagrant development environment requires a box. You can search for</span><br><span class="line"><span class="meta">  #</span> boxes at https://vagrantcloud.com/search.</span><br><span class="line"><span class="meta">  #</span>config.vm.box = "centos7"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span>config.vm.hostname = "host1"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Disable automatic box update checking. If you disable this, then</span><br><span class="line"><span class="meta">  #</span> boxes will only be checked for updates when the user runs</span><br><span class="line"><span class="meta">  #</span> `vagrant box outdated`. This is not recommended.</span><br><span class="line"><span class="meta">  #</span> config.vm.box_check_update = false</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Create a forwarded port mapping which allows access to a specific port</span><br><span class="line"><span class="meta">  #</span> within the machine from a port on the host machine. In the example below,</span><br><span class="line"><span class="meta">  #</span> accessing "localhost:8080" will access port 80 on the guest machine.</span><br><span class="line"><span class="meta">  #</span> NOTE: This will enable public access to the opened port</span><br><span class="line"><span class="meta">  #</span> config.vm.network "forwarded_port", guest: 80, host: 8080</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Create a forwarded port mapping which allows access to a specific port</span><br><span class="line"><span class="meta">  #</span> within the machine from a port on the host machine and only allow access</span><br><span class="line"><span class="meta">  #</span> via 127.0.0.1 to disable public access</span><br><span class="line"><span class="meta">  #</span> config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Create a private network, which allows host-only access to the machine</span><br><span class="line"><span class="meta">  #</span> using a specific IP.</span><br><span class="line"><span class="meta">  #</span>config.vm.network "private_network", ip: "192.168.31.10"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Create a public network, which generally matched to bridged network.</span><br><span class="line"><span class="meta">  #</span> Bridged networks make the machine appear as another physical device on</span><br><span class="line"><span class="meta">  #</span> your network.</span><br><span class="line"><span class="meta">  #</span> config.vm.network "public_network"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Share an additional folder to the guest VM. The first argument is</span><br><span class="line"><span class="meta">  #</span> the path on the host to the actual folder. The second argument is</span><br><span class="line"><span class="meta">  #</span> the path on the guest to mount the folder. And the optional third</span><br><span class="line"><span class="meta">  #</span> argument is a set of non-required options.</span><br><span class="line"><span class="meta">  #</span> config.vm.synced_folder "../data", "/vagrant_data"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Provider-specific configuration so you can fine-tune various</span><br><span class="line"><span class="meta">  #</span> backing providers for Vagrant. These expose provider-specific options.</span><br><span class="line"><span class="meta">  #</span> Example for VirtualBox:</span><br><span class="line"><span class="meta">  #</span></span><br><span class="line"><span class="meta">  #</span> config.vm.provider "virtualbox" do |vb|</span><br><span class="line"><span class="meta">  #</span>   # Display the VirtualBox GUI when booting the machine</span><br><span class="line"><span class="meta">  #</span>   vb.gui = true</span><br><span class="line"><span class="meta">  #</span></span><br><span class="line"><span class="meta">  #</span>   # Customize the amount of memory on the VM:</span><br><span class="line"><span class="meta">  #</span>   vb.memory = "1024"</span><br><span class="line"><span class="meta">  #</span> end</span><br><span class="line"><span class="meta">  #</span></span><br><span class="line"><span class="meta">  #</span> View the documentation for the provider you are using for more</span><br><span class="line"><span class="meta">  #</span> information on available options.</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Enable provisioning with a shell script. Additional provisioners such as</span><br><span class="line"><span class="meta">  #</span> Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span><br><span class="line"><span class="meta">  #</span> documentation for more information about their specific syntax and use.</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> 定义应用服务器</span><br><span class="line">  config.vm.define :web do |web|</span><br><span class="line">    web.vm.provider "virtualbox" do |v|</span><br><span class="line">          v.customize ["modifyvm", :id, "--name", "web", "--memory", "512"]</span><br><span class="line">    end</span><br><span class="line">    web.vm.box = "centos7"</span><br><span class="line">    web.vm.hostname = "web"</span><br><span class="line">    web.vm.network :private_network, ip: "10.0.2.19"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<ul>
<li>JDK的shell脚本配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">  echo "================= START install-jdk.sh $(date +"%r") ================="</span><br><span class="line">  echo " "</span><br><span class="line">  echo "BEGIN installing JDK"</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span>################################################################</span><br><span class="line"><span class="meta">  #</span># JDK Installation</span><br><span class="line"><span class="meta">  #</span>################################################################</span><br><span class="line">  JDK_VERSION="8u51"</span><br><span class="line">  JDK_LONGVERSION="1.8.0_51"</span><br><span class="line">  JDK_FILE="jdk-$JDK_VERSION-linux-x64.gz"</span><br><span class="line">  JDK_FORCE=0</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Check if we have this JDK installed</span><br><span class="line">  if [ ! -d "/usr/lib/jvm/jdk1.8.0_51" ] || [ $JDK_FORCE -eq 1 ]; then</span><br><span class="line">    </span><br><span class="line">    # Don't download if we've already got it locally</span><br><span class="line">    if [ ! -f "/vagrant/artifacts/$JDK_FILE" ]; then</span><br><span class="line">      echo "... Downloading JDK: $JDK_VERSION, standby ..."</span><br><span class="line">      wget -O /vagrant/artifacts/$JDK_FILE http://downloads.ortussolutions.com/oracle/jdk/$JDK_VERSION/$JDK_FILE &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    # Install JDK</span><br><span class="line">    sudo gunzip -c /vagrant/artifacts/$JDK_FILE &gt; jdk-$JDK_VERSION-linux-x64.tar</span><br><span class="line">    sudo tar -xvf jdk-$JDK_VERSION-linux-x64.tar &amp;&gt;&gt; /vagrant/log/install.txt</span><br><span class="line">    #sudo gzip /vagrant/artifacts/jdk-$JDK_VERSION-linux-x64.tar &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line">    </span><br><span class="line">    # Move to install directory</span><br><span class="line">    echo "Moving JDK to installation directory at /usr/lib/jvm/jdk$JDK_LONGVERSION"</span><br><span class="line">    sudo mkdir -p /usr/lib/jvm/jdk$JDK_LONGVERSION</span><br><span class="line">    sudo mv jdk$JDK_LONGVERSION/* /usr/lib/jvm/jdk$JDK_LONGVERSION/</span><br><span class="line"></span><br><span class="line">    echo "Linking JDK to 'current' JDK"</span><br><span class="line">    cd /usr/lib/jvm</span><br><span class="line">    sudo ln -s /usr/lib/jvm/jdk$JDK_LONGVERSION/ current</span><br><span class="line"></span><br><span class="line">    sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk$JDK_LONGVERSION/bin/java" 1</span><br><span class="line">    sudo update-alternatives --install "/usr/bin/javac" "javac" "/usr/lib/jvm/jdk$JDK_LONGVERSION/bin/javac" 1 </span><br><span class="line">    sudo update-alternatives --install "/usr/bin/javaws" "javaws" "/usr/lib/jvm/jdk$JDK_LONGVERSION/bin/javaws" 1</span><br><span class="line">    #sudo update-alternatives --config java</span><br><span class="line">    </span><br><span class="line">    echo "Updated java locations successfully"</span><br><span class="line">    </span><br><span class="line">  else</span><br><span class="line">    echo "JDK is already installed, skipping"</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span> Move in environment</span><br><span class="line">  sudo /bin/cp -f /vagrant/configs/.bash_profile /etc/environment</span><br><span class="line"></span><br><span class="line">  echo "... END installing JDK."</span><br><span class="line">  echo " "</span><br><span class="line">  echo "================= FINISH install-jdk.sh $(date +"%r") ================="</span><br><span class="line">  echo " "</span><br><span class="line">  SHELL</span><br><span class="line">  end</span><br></pre></td></tr></table></figure>
<ul>
<li>Mysql的脚本配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 定义DB服务器</span><br><span class="line">config.vm.define :db do |db|</span><br><span class="line">  db.vm.provider "virtualbox" do |v|</span><br><span class="line">        v.customize ["modifyvm", :id, "--name", "db", "--memory", "512"]</span><br><span class="line">  end</span><br><span class="line">  db.vm.box = "mysqlVM"</span><br><span class="line">  db.vm.hostname = "db"</span><br><span class="line">  db.vm.network :private_network, ip: "10.0.2.20"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  config.vm.provision "shell", inline: &lt;&lt;-SHELL</span><br><span class="line">   </span><br><span class="line"><span class="meta">   #</span>!/bin/bash</span><br><span class="line">  echo "-----------update system--------"</span><br><span class="line"><span class="meta">  #</span>sudo yum -y update</span><br><span class="line"><span class="meta">  #</span> y   y</span><br><span class="line">  echo "-------install wget---------"</span><br><span class="line">  sudo yum -y install wget &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line"><span class="meta">  #</span> y</span><br><span class="line">  echo "------install mysql--------"</span><br><span class="line">  wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line">  sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">  sudo yum -y update &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line"></span><br><span class="line">  echo "------search expect-------"</span><br><span class="line">  rpm -qa | grep expect</span><br><span class="line">  echo "--------install expect-------"</span><br><span class="line">  sudo yum -y install expect &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line"><span class="meta">  #</span> which expect    ---&gt;/usr/bin/expect  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  echo "-------install mysql-server-------"</span><br><span class="line">  sudo yum -y install mysql-server &amp;&gt;&gt; /vagrant/log/install.sh</span><br><span class="line">  sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span>sudo mysql_secure_installation</span><br><span class="line"><span class="meta">  #</span>1.输入当前密码：enter</span><br><span class="line"><span class="meta">  #</span>sudo grep 'temporary password' /var/log/mysqld.log可以查询到。一般密码为空，按enter就行</span><br><span class="line"><span class="meta">  #</span>2.是否更改密码：y or enter</span><br><span class="line"><span class="meta">  #</span>3.新密码：123456</span><br><span class="line"><span class="meta">  #</span>4.再此输入密码：123456</span><br><span class="line"><span class="meta">  #</span>5.删除匿名用户：y</span><br><span class="line"><span class="meta">  #</span>6.禁止远程登陆：n</span><br><span class="line"><span class="meta">  #</span>7.删除测试数据库：y or enter</span><br><span class="line"><span class="meta">  #</span>8.是否重新加载权限表：y or enter</span><br><span class="line"></span><br><span class="line">  echo "------------config mysql----------"</span><br><span class="line">  set timeout 100</span><br><span class="line">  set firstpassword </span><br><span class="line">  set newpassword 123456</span><br><span class="line">  expect&lt;&lt;-END</span><br><span class="line">  spawn sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">  expect "enter for none:"</span><br><span class="line">  send "$firstpassword\n"</span><br><span class="line"></span><br><span class="line">  expect "Y/n"</span><br><span class="line">  send "\n"</span><br><span class="line">  expect "New password"</span><br><span class="line">  send "$newpassword\n"</span><br><span class="line">  expect "Re-enter new password:"</span><br><span class="line">  send "$newpassword\n"</span><br><span class="line">  expect "Y/n"</span><br><span class="line">  send "\n"</span><br><span class="line">  expect "Y/n"</span><br><span class="line">  send "n\n"</span><br><span class="line">  expect "Y/n"</span><br><span class="line">  send "\n"</span><br><span class="line">  expect "Y/n"</span><br><span class="line">  send "\n"</span><br><span class="line"></span><br><span class="line">  expect eof</span><br><span class="line">  exit</span><br><span class="line">  END</span><br><span class="line"></span><br><span class="line">  SHELL</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vargrant</category>
      </categories>
      <tags>
        <tag>自动部署</tag>
        <tag>虚拟机</tag>
        <tag>JDK</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程-09_体系结构设计</title>
    <url>/2019/05/25/2019-05-25-09-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">本文是一篇关于软件体系结构的文章</font></center>

<a id="more"></a>
<h1 id="体系结构设计"><a href="#体系结构设计" class="headerlink" title="体系结构设计"></a>体系结构设计</h1><h2 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h2><h4 id="什么是体系结构"><a href="#什么是体系结构" class="headerlink" title="什么是体系结构"></a>什么是体系结构</h4><p>程序或计算系统的软件体系结构是指系统的一个或者多个结构，它包括软件构件、构件的外部可见属性以及它们之间的相互关系</p>
<p>体系结构并非可运行的软件，确切说，它是一种表达，能够：</p>
<ul>
<li><p>1.对设计在满足既定需求方面的有效性进行分析</p>
</li>
<li><p>2.在设计变更相对容易的阶段，考虑体系结构可能的选择方案</p>
</li>
<li><p>3.降低与软件构造相关的风险</p>
</li>
</ul>
<p>“体系结构”和”设计”的区别:类与对象之间的区别</p>
<p>例如：使用Java和.NET对同一个项目进行设计，其设计方法是不一样的，但其体系结构是一样的。只有对一个项目的体系结构想的越明白，设计就越容易</p>
<h4 id="体系结构为什么重要"><a href="#体系结构为什么重要" class="headerlink" title="体系结构为什么重要"></a>体系结构为什么重要</h4><ul>
<li><p>软件体系结构的表示有助于对计算机系统开发感兴趣的各方(利益相关者)开展交流</p>
</li>
<li><p>体系结构突出了早期的设计决策，这些决策对随后所有的软件工程工作有深远的影响，同时对系统作为一个可运行实体的最后成功有重要作用</p>
</li>
<li><p>体系结构“构建了一个相对小的、易于理解的模型，该模型描述了系统如何构成以及其构件如何一起工作”</p>
</li>
</ul>
<h4 id="体系结构描述"><a href="#体系结构描述" class="headerlink" title="体系结构描述"></a>体系结构描述</h4><p>不同利益相关者会从不同的角度理解体系结构，它是有不同的关注点驱动的，所以，体系结构描述实际上是一组体现系统不同视图的工作产品。体系结构应当考虑到每个利益相关者想要的东西</p>
<h4 id="体系结构决策"><a href="#体系结构决策" class="headerlink" title="体系结构决策"></a>体系结构决策</h4><p>体系结构决策描述模版</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">每个主要的体系结构决策可以被记录在案，以便以后评审，评审由想要理解已提出的体系结构描述的利益相关者进行。</span><br><span class="line"></span><br><span class="line">设计问题：描述将要解决的体系结构设计问题</span><br><span class="line">解决方案：陈述所选择的解决设计问题的方法</span><br><span class="line">分类：指定问题和解决方案陈述的分类(例如，数据设计、内容结构、构件结构、集成、介绍)</span><br><span class="line">假设：指出任何有助于指定决策的假设</span><br><span class="line">约束：指定任何有助于指定决策的环境约束(例如，技术标准、可用的模版、项目相关问题)</span><br><span class="line">候选方案：简要描述所考虑的体系结构设计候选方案，并描述为什么要摒弃这些方案</span><br><span class="line">争论：陈述你为什么选择了这种解决方案而不是其他的候选方案</span><br><span class="line">意义：指出制定决策对设计的影响。选择方案如何影响其他的体系结构设计问题？解决方案会在某种程度上约束设计吗？</span><br><span class="line">相关策略：其他记录的决策和该决策有什么相关性？</span><br><span class="line">相关关注点：其他需求和该决策有什么相关性？</span><br><span class="line">工作产品：指出体系结构描述中，决策会在哪里体现出来</span><br><span class="line">注释：参考可用来制定决策的其他团队的备忘录或文档</span><br></pre></td></tr></table></figure>
<h2 id="体系结构类型"><a href="#体系结构类型" class="headerlink" title="体系结构类型"></a>体系结构类型</h2><p>体系结构类型：如今社会软件设计常见的</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">人工智能</span><br><span class="line">商业和非盈利的</span><br><span class="line">通信</span><br><span class="line">内容制作</span><br><span class="line">设备</span><br><span class="line">娱乐于运动</span><br><span class="line">金融</span><br><span class="line">游戏</span><br><span class="line">行政管理</span><br><span class="line">工业</span><br><span class="line">法律</span><br><span class="line">医疗</span><br><span class="line">军事</span><br><span class="line">操作系统</span><br><span class="line">平台</span><br><span class="line">科学</span><br><span class="line">工具</span><br><span class="line">运输</span><br><span class="line">实用程序</span><br></pre></td></tr></table></figure>
<p>以上每种类别在如今社会中都已经形成了相应的体系结构，每种类别的具体分类要采用更具体的体系结构。例如：游戏，也分塔防游戏，益智游戏，战略游戏，枪战游戏</p>
<h2 id="体系结构风格"><a href="#体系结构风格" class="headerlink" title="体系结构风格"></a>体系结构风格</h2><p>由相关的体系结构风格就能理解系统的整体性质。这就像，我要盖个“茅草屋”，你在脑子里就能想到“茅草屋”的大概样子</p>
<p>5种典型的基本体系结构</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">功能结构：构件表示功能或实体，连接件表示接口。特性描述构件的特性和接口的组织</span><br><span class="line"></span><br><span class="line">实现结构：购进可以是包、类、对象、过程、函数、方法等所有在不同抽象层上打包的功能。连接件包括传递数据和控制、共享数据、“使用”以及“是一个实例”等能力。特性关注于结构实现时的质量特性(例如：可维护性、可重用性)</span><br><span class="line"></span><br><span class="line">并发结构：构件表示“并发单元”(并发任务或线程)。“关系”(连接件)包括同步于、优先级高于、发送数据到、运行必须有、运行不能有。与结构相关的特性包括优先级、抢先占有以及执行时间</span><br><span class="line"></span><br><span class="line">物理结构：类似于设计开发中的部署模型。构件是物理硬件，软件驻留在硬件上。连接件是硬件构件之间的接口。特性用来描述容量、带宽、性能和其他属性</span><br><span class="line"></span><br><span class="line">开发结构：该结构定义构件、工作产品以及软件工程过程中所需的其他信息源。连接件表示工作产品之间的关系。特性标识每项的特征</span><br></pre></td></tr></table></figure>
<h4 id="体系结构风格的简单分类"><a href="#体系结构风格的简单分类" class="headerlink" title="体系结构风格的简单分类"></a>体系结构风格的简单分类</h4><p>几种常见的体系结构</p>
<ul>
<li>以数据为中心的体系结构：核心是数据库</li>
</ul>
<p><img src="https://i.loli.net/2019/05/24/5ce7940476b2124587.jpg" alt></p>
<ul>
<li>数据流体系结构</li>
</ul>
<p><img src="https://i.loli.net/2019/05/24/5ce795ba19b1a61852.png" alt></p>
<ul>
<li><p>调用和返回体系结构</p>
<ul>
<li><p>主程序/子程序体系结构：主程序调用一组构件，这些构件又调用其他构件</p>
<p><img src="https://i.loli.net/2019/05/24/5ce795c58014e26384.png" alt></p>
</li>
<li><p>远程过程调用体系结构：主程序/子程序体系结构的构件分布在网络中的多台计算机上</p>
</li>
</ul>
</li>
<li><p>面向对象体系结构</p>
</li>
<li><p>层次体系结构：参考MVC设计模式考虑</p>
</li>
</ul>
<h4 id="体系结构模式"><a href="#体系结构模式" class="headerlink" title="体系结构模式"></a>体系结构模式</h4><p>12章再讲</p>
<h4 id="组织和求精"><a href="#组织和求精" class="headerlink" title="组织和求精"></a>组织和求精</h4><p>体系结构设计的评估标准</p>
<p>控制：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">在体系结构中如何管理控制？</span><br><span class="line">是否存在清晰的控制层次？</span><br><span class="line">如果存在，构件在控制层次中有什么作用？</span><br><span class="line">构件如何在系统中传递控制？</span><br><span class="line">构件间如何共享控制？</span><br><span class="line">控制的拓扑结构如何？</span><br><span class="line">控制是否同步或者构件操作是否异步？</span><br></pre></td></tr></table></figure>
<p>数据</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">构件间如何进行数据通信？</span><br><span class="line">数据流是否是连续地传递给系统，或数据对象是否是零散地传递给系统？</span><br><span class="line">数据传递的模式是什么(即，数据是从一个构件传递到另一个构件，还是数据被系统中的构件全局共享)？</span><br><span class="line">是否存在数据构件(如黑板或中心数据库)？如果存在，它们的作用是什么？</span><br><span class="line">功能构件如何和数据构件交互？</span><br><span class="line">数据构件是被动的还是主动的(即数据构件是否主动地和系统的其他构件交互)？</span><br><span class="line">数据和控制如何在系统中交互？</span><br></pre></td></tr></table></figure>
<h2 id="体系结构设计-1"><a href="#体系结构设计-1" class="headerlink" title="体系结构设计"></a>体系结构设计</h2><h4 id="系统环境的表示"><a href="#系统环境的表示" class="headerlink" title="系统环境的表示"></a>系统环境的表示</h4><p>体系结构环境图的一般结构</p>
<p><img src="https://i.loli.net/2019/05/25/5ce8b5999ec5776790.png" alt></p>
<p>由图所示，与目标系统(为该系统所开发的体系结构设计)交互的系统可以表示为：</p>
<ul>
<li><p>上级系统—-这些系统把目标系统作为某些高层处理方案的一部分</p>
</li>
<li><p>下级系统—-这些系统被目标系统使用，并为完成目标系统的功能提供必要的数据和处理</p>
</li>
<li><p>同级系统—-这些系统在对等的基础上相互作用(即信息或者同级系统和目标系统产生，或者被目标系统和同级系统使用)</p>
</li>
<li><p>参与者——通过产生和消耗必要处理所需的信息，实现与目标系统交互的实体(人，设备)</p>
</li>
</ul>
<p>每个外部实体都通过某一个接口(带阴影的小矩形)与目标系统进行通信</p>
<h4 id="定义原型"><a href="#定义原型" class="headerlink" title="定义原型"></a>定义原型</h4><p>原型是表示核心抽象的类或模式</p>
<p>原型包括：结点、探测器、指示器、控制器</p>
<h4 id="将体系结构精华为构件"><a href="#将体系结构精华为构件" class="headerlink" title="将体系结构精华为构件"></a>将体系结构精华为构件</h4><p>一个将完整体系结构精华为构件的实例</p>
<p><img src="https://i.loli.net/2019/05/25/5ce8baaf5fbe956921.png" alt></p>
<p>其中的每一个方框都是一个构件</p>
<h4 id="描述系统实例"><a href="#描述系统实例" class="headerlink" title="描述系统实例"></a>描述系统实例</h4><p>将上文中的完整体系结构再进一步精华</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">体系结构设计</span><br><span class="line"><span class="code">    目的：体系结构设计工具通过描述构件接口、依赖与联系以及交互作用来建立整体软件结构模型</span></span><br><span class="line"><span class="code">    机制：工具采用的机制多种多样。在大多数情况下，体系结构的设计能力是分析和设计建模自动化工具的一部分功能</span></span><br><span class="line"><span class="code">    代表性工具：</span></span><br><span class="line"><span class="code">    Adalon</span></span><br><span class="line"><span class="code">    ObjectiF</span></span><br><span class="line"><span class="code">    Rational Rose</span></span><br></pre></td></tr></table></figure>
<h2 id="评估可选的体系结构设计"><a href="#评估可选的体系结构设计" class="headerlink" title="评估可选的体系结构设计"></a>评估可选的体系结构设计</h2><h4 id="体系结构权衡分析方法"><a href="#体系结构权衡分析方法" class="headerlink" title="体系结构权衡分析方法"></a>体系结构权衡分析方法</h4><p>目的：验证设计的体系结构是否能用</p>
<ul>
<li><p>1.收集场景：开发一组用例，从用户角度描述系统</p>
</li>
<li><p>2.引出需求、约束和环境描述：确保所有利益相关者问题都被处理</p>
</li>
<li><p>3.描述那些已经被选择用于解决场景和需求的体系结构风格/模式：采用以下一种描述</p>
<ul>
<li><p>a.模块视图：分析带有构件的工作任务以及信息隐蔽获得的程度</p>
</li>
<li><p>b.过程视图：分析系统性能</p>
</li>
<li><p>c.数据流视图：分析体系结构满足功能需求的程度</p>
</li>
</ul>
</li>
<li><p>4.通过单独地考虑每个属性来评估质量属性：包括可靠性、性能、安全性、可维护性、灵活性、可测试性、可移植性、可复用性和互操作性</p>
</li>
<li><p>5.针对特定的体系结构风格，确定质量属性对各种体系结构属性的敏感性：通过体系结构变更测试，受变更大的就是敏感点</p>
</li>
<li><p>6.找第5步的敏感点，然后做成候选体系结构</p>
</li>
</ul>
<h4 id="体系结构复杂性"><a href="#体系结构复杂性" class="headerlink" title="体系结构复杂性"></a>体系结构复杂性</h4><p>体系结构的复杂性体现在体系结构中构件间的依赖关系，包括</p>
<ul>
<li><p>1.共享依赖：存在与使用相同资源的消费者或相同消费者生产的生产者之间的依赖关系</p>
</li>
<li><p>2.流依赖：生产者和消费者之间的依赖</p>
</li>
<li><p>3.约束依赖：一组活动间相关控制流上的约束</p>
</li>
</ul>
<h4 id="体系结构描述语言"><a href="#体系结构描述语言" class="headerlink" title="体系结构描述语言"></a>体系结构描述语言</h4><p>体系结构描述语言(architectural description language,ADL)提供了一种描述软件体系结构的语义和语法</p>
<p>UML没有ADL完成，以下是5个ADL</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Rapide:</span><br><span class="line">UniCon</span><br><span class="line">Aesop</span><br><span class="line">Wright</span><br><span class="line">Acme</span><br></pre></td></tr></table></figure>
<h2 id="使用数据流进行体系结构映射"><a href="#使用数据流进行体系结构映射" class="headerlink" title="使用数据流进行体系结构映射"></a>使用数据流进行体系结构映射</h2><p>从DFD到软件体系结构的便捷的转化，转化由下述6个步骤的一部分完成</p>
<ul>
<li><p>1.建立信息流的类型</p>
</li>
<li><p>2.标注流的边界</p>
</li>
<li><p>3.将DFD映射到程序结构</p>
</li>
<li><p>4.定义控制层级</p>
</li>
<li><p>5.使用设计度量和启发式精华产生的结构</p>
</li>
<li><p>6.求精华细化体系结构描述</p>
</li>
</ul>
<h4 id="变换映射"><a href="#变换映射" class="headerlink" title="变换映射"></a>变换映射</h4><p>将具有变换流特征的DFD映射为某个特定的体系结构风格，图示为SafeHome的安全例子</p>
<p><strong>步骤1：评审基本系统模型</strong></p>
<ul>
<li>DFD图从0层到1层的转换</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d5161de4998095.png" alt></p>
<p><strong>步骤2：评审和精华软件的数据流图</strong></p>
<ul>
<li>DFD图从1层到2层到转换</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d5200897a87808.png" alt></p>
<p><strong>步骤3：确定DFD是否含有变换流或事物流特征</strong></p>
<ul>
<li>DFD图从2层到3层的转换，这次转换要搞清楚数据流的输入和输出</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d5278ae5e31684.png" alt></p>
<p><strong>步骤4：通过确定输入和输出流的边界，分离出变换中心</strong></p>
<ul>
<li>输入是信息从外部形式转内部形式，输出是信息从内部形式转外部形式<br>流边界是指在流从外部转内部(或从内部转外部)的边界处</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d5301579c36594.png" alt></p>
<p><strong>步骤5:完成“第一级分解”</strong></p>
<ul>
<li>以步骤4的边界处为界限进行第一级的分解</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d537c7e1e69811.png" alt></p>
<p><strong>步骤6:完成“第二级分解”</strong></p>
<ul>
<li>将每个变换(泡泡)映射到体系结构中的相应模块，从变换中心的边界开始，沿输入路径和输出路径向外，将变换依次映射到软件结构的从属层。一般是一对一映射，有时会有多个泡泡合并为一个构件，或者一个泡泡分解为多个构件的情况。这步结束，就得到了第一次的迭代体系结构</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d53f85e5c49088.png" alt></p>
<p><strong>步骤7:使用提高软件质量的设计启发式方法，精华第一次迭代得到的体系结构</strong></p>
<ul>
<li>精化第一次迭代得到的体系结构。对构件进行“分解”和“结合”</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d5468f2e424959.png" alt></p>
<p><strong>最终逐渐精华的完善版</strong></p>
<ul>
<li>构件的和并和消除</li>
</ul>
<p><img src="https://i.loli.net/2019/05/25/5ce8d6aec130c48135.png" alt></p>
<h4 id="精华体系结构设计"><a href="#精华体系结构设计" class="headerlink" title="精华体系结构设计"></a>精华体系结构设计</h4><p>不能工作的“优化设计”是值得怀疑的</p>
<p>设计求精应在满足有效模块要求的前提下尽量减少构件的数量，在充分满足信息需求的前提下尽量减少复杂的数据结构</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title>01_CRM资料收集</title>
    <url>/2019/06/04/2019-06-04-01-CRM%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<center><font size="4" color="red">01_CRM的第一版资料</font></center>

<a id="more"></a>
<h1 id="CRM项目设计"><a href="#CRM项目设计" class="headerlink" title="CRM项目设计"></a>CRM项目设计</h1><h2 id="CRM概述"><a href="#CRM概述" class="headerlink" title="CRM概述"></a>CRM概述</h2><p>CRM：Customer Relationship Management</p>
<p><strong>最终目标</strong>：吸引新客户，保留老客户以及将已有客户转为忠实客户，增强市场。</p>
<p>CRM:以客户为中心，客户需要什么，我就给他提供什么</p>
<p><strong>CRM的两个任务：</strong></p>
<ul>
<li><p>1.获取客户</p>
</li>
<li><p>2.提高客户忠诚度</p>
</li>
</ul>
<p><strong>客户信息处理技术：</strong></p>
<ul>
<li><p>1.数据仓库</p>
</li>
<li><p>2.商业智能</p>
</li>
<li><p>3.知识发现</p>
</li>
</ul>
<p>CRM是一个获取保持和增加可获利客户的方法和过程</p>
<p>CRM是<strong>企业业务流程</strong>的管理</p>
<p><strong>CRM的核心步骤：</strong></p>
<ul>
<li><p>1.市场营销</p>
</li>
<li><p>2.销售</p>
</li>
<li><p>3.客户服务</p>
</li>
<li><p>4.技术支持</p>
</li>
</ul>
<p><strong>CRM的模块：</strong></p>
<ul>
<li><p>1.客户资源管理</p>
</li>
<li><p>2。销售管理</p>
</li>
<li><p>3.客户服务管理</p>
</li>
<li><p>4.日常事务管理</p>
</li>
</ul>
<p><strong>CRM对网络的要求：</strong></p>
<p>公网和内网都可以实现</p>
<p><strong>CRM的手段：</strong></p>
<p>判断，选择，争取和保持客户所需的全部商业过程，对客户资料详细分析</p>
<p><strong>CRM分类：</strong></p>
<p>操作型：业务流程、信息记录、提供便捷的操作、人性化的界面</p>
<p>分析型：基于大量的企业日常数据，对数据挖掘分析，找出客户产品、服务的特征，从而修正企业的产品策略、市场策略。</p>
<p><strong>CRM按功能分：</strong></p>
<ul>
<li><p>市场营销中的客户关系管理</p>
<ul>
<li><p>分析目标群体：客户行业、职业、年龄、地域等</p>
</li>
<li><p>活动–&gt;产生/销售–&gt;报表–&gt;决策</p>
</li>
</ul>
</li>
<li><p>销售过程中的客户关系管理</p>
<p>  包括：</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">潜在客户</span><br><span class="line">客户</span><br><span class="line">联系人</span><br><span class="line">业务机会</span><br><span class="line">订单</span><br><span class="line">汇款单</span><br><span class="line">报表统计图</span><br></pre></td></tr></table></figure>
<p>  业务员要做的</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">记录沟通内容</span><br><span class="line">建立日程安排</span><br><span class="line">查询预约提醒</span><br><span class="line">快速浏览客户数据</span><br><span class="line">大额业务提醒</span><br><span class="line">销售漏斗分析</span><br><span class="line">业绩指标统计</span><br><span class="line">业务阶段划分</span><br><span class="line">客户服务过程中的客户关系管理</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>客户服务过程中的客户关系管理</p>
<p>  目的：</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">获的问题客户信息</span><br><span class="line">客户历史问题记录</span><br></pre></td></tr></table></figure>
<p>  主要功能：</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户反馈</span><br><span class="line">解决方案</span><br><span class="line">满意度调查</span><br><span class="line">呼叫中心</span><br></pre></td></tr></table></figure>
<p>  其它功能：</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">办公管理</span><br><span class="line">行政管理</span><br><span class="line">进销存</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="运行范围"><a href="#运行范围" class="headerlink" title="运行范围"></a>运行范围</h2><p><strong>业务员</strong></p>
<ul>
<li>客户信息的录入和维护的方式</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">名片</span><br><span class="line">其他途径</span><br><span class="line"><span class="code">```   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&gt; 要求：能及时对电话，地址等信息变更</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 练习记录的录入的方式：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">电话</span></span><br><span class="line"><span class="code">邮件</span></span><br><span class="line"><span class="code">即时通知</span></span><br><span class="line"><span class="code">上门拜访</span></span><br><span class="line"><span class="code">公司网站</span></span><br><span class="line"><span class="code">电子邮件</span></span><br><span class="line"><span class="code">实时聊天</span></span><br><span class="line"><span class="code">营销材料</span></span><br><span class="line"><span class="code">最近社交媒体</span></span><br></pre></td></tr></table></figure>
<ul>
<li>投价单的录入信息</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">基本客户信息</span><br><span class="line">沟通信息</span><br><span class="line">报价信息</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要求：最好形成可打印的模板</p>
</blockquote>
<p><strong>业务员日常功能</strong></p>
<ul>
<li>客户联系提醒</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">今天或明天应联系客户</span><br><span class="line">逾期未联系客户</span><br><span class="line">逾期未下单客户</span><br><span class="line">长期没有业务往来客户</span><br></pre></td></tr></table></figure>
<ul>
<li><p>客户资料查询和统计分析</p>
<p>  按客户名称关键词模糊查询，防止撞单</p>
</li>
<li><p>每天客户联系拜访情况的查询和分析</p>
</li>
<li><p>业绩查询和统计</p>
</li>
<li><p>应收款的提醒</p>
</li>
<li><p>工资，提成和费用的查询</p>
</li>
</ul>
<p><strong>销售助理</strong></p>
<p>合同订单录入</p>
<ul>
<li>收到传真订单和签订销售合同后凯撒录入系统</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">订购产品的型号</span><br><span class="line">数量</span><br><span class="line">单价</span><br><span class="line">金额</span><br></pre></td></tr></table></figure>
<p>出货单的录入</p>
<ul>
<li>录入收获单</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">出货日期</span><br><span class="line">出货仓</span><br><span class="line">出货产品明细</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：如果以前录过，可以将录入信息数据导出模板使用</p>
</blockquote>
<p><strong>销售助理日常适用</strong></p>
<ul>
<li><p>订单查询及交货提醒</p>
</li>
<li><p>统计销售部门业绩</p>
</li>
<li><p>打印出货单</p>
</li>
</ul>
<p><strong>财务主管</strong></p>
<ul>
<li><p>收款后做收款处理，冲销应收款</p>
</li>
<li><p>付款后做付款处理，冲销应付款</p>
</li>
<li><p>录企业运营的各种费用</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">房租</span><br><span class="line">水电费</span><br><span class="line">办公支出</span><br><span class="line">员工工资</span><br><span class="line">提成奖金</span><br><span class="line">各种销售费用</span><br></pre></td></tr></table></figure>
<p><strong>日常使用</strong></p>
<ul>
<li>应收款提醒</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">日、周有哪些应收款</span><br><span class="line">逾期应收款</span><br></pre></td></tr></table></figure>
<p>逾期应收款日期：30天内，30～60天，60～90天，90～180天，180天以上</p>
<ul>
<li>应收款统计分析</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">哪些客户应收款比例大</span><br><span class="line">哪些用户逾期金额超额</span><br><span class="line">哪些用户账龄过长</span><br></pre></td></tr></table></figure>
<ul>
<li>应收/付款查询和统计，统计任一时期收/付款进账/出账明细，用图表显示</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">按收/付款方式</span><br><span class="line">按业务员</span><br><span class="line">按年/月</span><br></pre></td></tr></table></figure>
<ul>
<li>费用查询统计，查各类费用，明细支出情况，用图标显示</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">按费用大类</span><br><span class="line">费用项目</span><br><span class="line">按年/月</span><br><span class="line">按业务员</span><br></pre></td></tr></table></figure>
<p>以上核心：数据哪来？–&gt; 怎么处理 –&gt; 怎么展示</p>
<p><strong>采购员</strong></p>
<p>采购订单录入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">供应商名称</span><br><span class="line">产品明细</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要求：可打印出模板</p>
</blockquote>
<p>采购收获单</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">收货信息</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果已有相应订单信息，可直接导出使用</p>
</blockquote>
<h2 id="客户关怀"><a href="#客户关怀" class="headerlink" title="客户关怀"></a>客户关怀</h2><ul>
<li>客户服务</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">产品信息</span><br><span class="line">服务建议</span><br></pre></td></tr></table></figure>
<ul>
<li>产品质量</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">符合有关标准</span><br><span class="line">适合客户使用</span><br><span class="line">保证安全可靠</span><br></pre></td></tr></table></figure>
<ul>
<li>服务质量</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户体验</span><br></pre></td></tr></table></figure>
<ul>
<li>售后服务</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">售后查询</span><br><span class="line">投诉</span><br><span class="line">维护</span><br><span class="line">修理</span><br></pre></td></tr></table></figure>
<h2 id="一些问题解决方案"><a href="#一些问题解决方案" class="headerlink" title="一些问题解决方案"></a>一些问题解决方案</h2><ol>
<li>遗忘老客户</li>
</ol>
<p>数据–&gt;市场预测分析–&gt;制定计划和目标–&gt;激励销售人员</p>
<ol start="2">
<li>客户信息散，管理凌乱</li>
</ol>
<ul>
<li>企业资源分类</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户</span><br><span class="line">竞争对手</span><br><span class="line">合作伙伴</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>软件灵活性差，开发升级难</li>
</ol>
<ul>
<li>企业自己要有强大的个性化自定制功能</li>
</ul>
<h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>客户概述分析 profiling</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户层次</span><br><span class="line">客户风险</span><br><span class="line">客户爱好</span><br><span class="line">客户习惯</span><br></pre></td></tr></table></figure>
<p>客户忠诚分析 persistency</p>
<ul>
<li>客户对产品或商业机构</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">信用程度</span><br><span class="line">持久性</span><br><span class="line">变动情况</span><br></pre></td></tr></table></figure>
<p>客户利润分析 profitability</p>
<ul>
<li>消费产品</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">边缘利润</span><br><span class="line">总利润</span><br><span class="line">净利润</span><br></pre></td></tr></table></figure>
<p>客户性能分析 performance</p>
<ul>
<li>消费产品的消费额</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">种类</span><br><span class="line">渠道</span><br><span class="line">销售地点</span><br></pre></td></tr></table></figure>
<p>客户未来分析 prospecting</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">客户数量</span><br><span class="line">客户类别</span><br></pre></td></tr></table></figure>
<p>客户产品分析 product</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">产品设计</span><br><span class="line">关联性</span><br><span class="line">供应链</span><br></pre></td></tr></table></figure>
<p>客户促销分析 promotion</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">广告</span><br><span class="line">寻传</span><br></pre></td></tr></table></figure>
<h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol>
<li><p>确定业务计划</p>
</li>
<li><p>建立CRM员工队伍</p>
</li>
<li><p>评估销售，服务过程</p>
</li>
<li><p>明确实际需求</p>
</li>
</ol>
<ul>
<li>销售管理人员</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">市场预测</span><br><span class="line">销售渠道管理</span><br><span class="line">销售报告的提交</span><br></pre></td></tr></table></figure>
<ul>
<li>销售人员</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">销售额</span><br><span class="line">销售建议</span><br><span class="line">产品目录</span><br><span class="line">客户资料</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p>选择供应商</p>
</li>
<li><p>开发与部署</p>
</li>
</ol>
<p>呼叫中心：集中公司的一些信息资料提供客户剖析，业务剖析，找出有价值用户，将其转化为忠实客户</p>
<h2 id="吸引新客户方法"><a href="#吸引新客户方法" class="headerlink" title="吸引新客户方法"></a>吸引新客户方法</h2><ol>
<li><p>市场调查，收集客户名单</p>
</li>
<li><p>公司活动，抽奖</p>
</li>
<li><p>开发已签单客户，寻求转介绍</p>
</li>
</ol>
<p>10C</p>
<p>1.客户轮廓 customer profile</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">人口统计信息</span><br><span class="line">消费心理特征</span><br><span class="line">消费需求</span><br><span class="line">消费行为模式</span><br><span class="line">交易记录</span><br><span class="line">信用</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>客户知识 customer knowledge</p>
</li>
<li><p>客户区隔 customer segmentation</p>
</li>
</ol>
<ul>
<li>区分客户</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">消费者对产品/服务(p/s)的相似欲望与需求</span><br><span class="line">客户获利率</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>客户化/定制化 customization</li>
</ol>
<ul>
<li>针对单一顾客，量身定制</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一对一的价格</span><br><span class="line">一对一的促销</span><br><span class="line">一对一的通路</span><br></pre></td></tr></table></figure>
<blockquote>
<p>大量营销 –&gt; 区隔营销 –&gt; 一对一营销</p>
</blockquote>
<ol start="5">
<li>客户价值 customer value</li>
</ol>
<ul>
<li>从特定p/s获得利益集合</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">产品价值</span><br><span class="line">服务价值</span><br><span class="line">员工友谊价值</span><br><span class="line">品牌价值</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><p>客户满意度 customer satisfaction</p>
</li>
<li><p>顾客发展 customer development</p>
</li>
</ol>
<ul>
<li>针对老客户提供荷包贡献率(Wallet Ration)，方法：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">交叉销售：推荐其他产品</span><br><span class="line">高级销售：推荐本产品的高级版</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>客户保留率 customer retention</li>
</ol>
<ul>
<li>不让老客户流失的方法，产品需要</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">优秀</span><br><span class="line">贴心</span><br><span class="line">量身订购</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>客户赢取率 customer acquistion</li>
</ol>
<ul>
<li>比竞争对手更好的产品</li>
</ul>
<ol start="10">
<li>客户获利率 customer profitability</li>
</ol>
<ul>
<li>客户终生对企业贡献的纯利润</li>
</ul>
<p>第一个CRM</p>
<ul>
<li>SugarCRM</li>
</ul>
<p>加个功能：社交媒体</p>
<p>社交CRM：Base，Nutshell</p>
<p>仪表盘：客户信息，过去销售，先前的营销活动</p>
<p>运营CRM：销售人员自动化，营销自动化，服务自动化</p>
<p>营销自动化：定时发送邮件，社交媒体上发送社交信息</p>
<p>服务自动化：客户通过电话，邮件，知识库，服务门户，常见问题解答</p>
<p>协作：整合第三方外部相关者，供应商，供应商和分销商，信息整合部门/分发信息</p>
<p>客户数据平台CDP</p>
<p>以客户为中心的关系管理CCRM</p>
<p>财务投资回报ROI</p>
<p>感知质量</p>
<p>关系，价值和品牌</p>
<p>客户利益的价值驱动因素：CRM为公司提供管理客户请求和内容的能力。呼叫中心软件能够将经理与各客户联系起来</p>
<p>GPS</p>
<p>供应链关系管理VRM</p>
]]></content>
      <categories>
        <category>CRM</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>初始资料</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合配置文件</title>
    <url>/2019/06/11/2019-06-11-SSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<center><font size="4" color="red">这是一篇关于SSM整合的配置文件</font></center>

<a id="more"></a>
<h1 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h1><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><p>Dao层</p>
<ul>
<li><p>1.SqlMapConfig.xml,空文件即可，但是需要文件头</p>
</li>
<li><p>2.applicationContext.xml</p>
<ul>
<li><p>a.数据库连接</p>
</li>
<li><p>b.SqlSessionFactory对象，需要spring和mybatis整合包下的</p>
</li>
<li><p>c.配置mapper文件扫描器</p>
</li>
</ul>
</li>
</ul>
<p>Service层</p>
<ul>
<li><p>1.applicationContext-service.xml包扫描器，扫描@service注解的类</p>
</li>
<li><p>2.applicationContext-trans.xml配置事务</p>
</li>
</ul>
<p>Controller层</p>
<ul>
<li><p>springmvc.xml</p>
<ul>
<li><p>a.包扫描器，扫描@Controller注解的类</p>
</li>
<li><p>b.配置注解驱动</p>
</li>
<li><p>c.配置视图解析器</p>
</li>
</ul>
</li>
</ul>
<p>Web.xml</p>
<ul>
<li><p>1.配置spring</p>
</li>
<li><p>2.配置springmvc</p>
</li>
<li><p>3.配置前端控制器</p>
</li>
</ul>
<h2 id="整体配置文件"><a href="#整体配置文件" class="headerlink" title="整体配置文件"></a>整体配置文件</h2><p>Dao层</p>
<ul>
<li>1.SqlMapConfig.xml,空文件即可，但是需要文件头</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>2.applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置MyBatis核心配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置别名包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.hui.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Mapper扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置Mapper扫描包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.hui.mapper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>jdbc.properties的配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.1468.31.225:3306/crm?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>
<ul>
<li>log4j.properties的配置文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>
<p>Service层</p>
<ul>
<li>1.applicationContext-service.xml包扫描器，扫描@service注解的类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置@Service类的包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hui.service"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>2.applicationContext-trans.xml配置事务</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span>	<span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"create*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">pointcut</span>=<span class="string">"execution(* com.hui.service.*.*(..))"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Controller层</p>
<ul>
<li>springmvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Controller扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hui.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Web.xml</p>
<ul>
<li><p>1.配置spring</p>
</li>
<li><p>2.配置springmvc</p>
</li>
<li><p>3.配置前端控制器</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>crm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置监听器加载spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置过滤器，解决post的乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置编码为utf-8,这部分可以不写--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;init-param&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;param-name&gt;encoding&lt;/param-name&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;param-value&gt;UTF-8&lt;/param-value&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/init-param&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>crm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- load-on-startup配置springmvc什么时候启动，参数必须为整数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果为0或者大于0，则springMVC随着tomcat容器启动而启动 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果小于0，则在第一次请求进来的时候启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>crm<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有的请求都进入springMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="目录图"><a href="#目录图" class="headerlink" title="目录图"></a>目录图</h2><p><img src="/2019/06/11/2019-06-11-SSM整合配置文件/ssm.png" alt></p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>整合</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用教程</title>
    <url>/2019/06/26/2019-06-25-Git%E5%B8%B8%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<center><font size="4" color="red">git的流程，commit规则，图标意义，连接多个ssh方法</font></center>

<a id="more"></a>
<h1 id="Git-常用教程"><a href="#Git-常用教程" class="headerlink" title="Git 常用教程"></a>Git 常用教程</h1><p><code>$ git config --global user.name &quot;Firstname Lastname&quot;</code></p>
<p><code>$ git config --global user.email &quot;your_email@example.com&quot;</code></p>
<p>配置在下面文件:<code>~/.gitconfig</code></p>
<p>输出内容显示:<br><code>git config --global color.ui auto</code></p>
<p>设置SSH Key</p>
<p><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br><code>cat ~/.ssh/id_rsa.pub</code><br>添加到远程Git服务网站<br><code>ssh -T git@github.com</code></p>
<p>第一次:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:hirocastest/Hello-World.git</span><br><span class="line"></span><br><span class="line">touch hello_world.php &amp;&amp; vim hello_world.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    echo "Hello World!";</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">cd Hello-World</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git add hello_world.php</span><br><span class="line"></span><br><span class="line">git commit -m "Add hello world script by php"</span><br><span class="line"></span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h2 id="标准流程"><a href="#标准流程" class="headerlink" title="标准流程"></a>标准流程</h2><ul>
<li>开发或修正:develop-&gt;feature branches</li>
<li>合并:feature branches-&gt;develop</li>
<li>发布:release branches</li>
<li>合并:release branches-&gt;master 然后打Tag发布</li>
<li>发现BUG:master-&gt;hotflixes</li>
</ul>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://github.com/nvie/gitﬂow" target="_blank" rel="noopener">git-flow</a></p>
<p>Mac安装:<code>brew install git-flow</code></p>
<h2 id="仓库初始化"><a href="#仓库初始化" class="headerlink" title="仓库初始化"></a>仓库初始化</h2><p>Github-&gt;Git仓库-&gt;Add README.md-&gt;blog</p>
<p><code>git clone</code> </p>
<p><code>git flow init -d</code></p>
<p><code>git branch -a</code></p>
<p><code>git push -u origin develop</code></p>
<p><code>git branch -a</code></p>
<h2 id="模拟-Git-Flow"><a href="#模拟-Git-Flow" class="headerlink" title="模拟 Git Flow"></a>模拟 Git Flow</h2><p><code>git pull</code></p>
<p>创建feature分支add-user<br><code>git flow feature start add-user</code></p>
<p><code>git branch</code></p>
<p><code>git push origin feature/add-user</code></p>
<p>PR的要点:</p>
<ul>
<li>没有测试or测试未通过</li>
<li>违反编码规则</li>
<li>代码品质过低(命名不明确,方法冗长等)</li>
<li>还有重构的余地</li>
<li>有重复的部分</li>
</ul>
<p>切换分支,保证develop最新<br>develop是默认分支</p>
<p><code>git checkout develop</code></p>
<p><code>git pull</code></p>
<p>发布<br><code>git checkout develop</code></p>
<p><code>git pull</code></p>
<p><code>git flow release start &#39;1.0.0&#39;</code></p>
<p><code>git flow release finish &#39;1.0.0&#39;</code></p>
<p><code>git tag</code></p>
<p>更新到远程仓库</p>
<p><code>git push origin develop</code></p>
<p><code>git checkout master</code></p>
<p><code>git push origin master</code></p>
<p><code>git push --tags</code></p>
<p>在hotfix分支工作</p>
<p><code>git fetch origin</code></p>
<p><code>git flow hotfix start &#39;1.0.1&#39; &#39;1.0.0&#39;</code></p>
<p><code>git push origin hotfix/1.0.1</code></p>
<p>查看Tag</p>
<p><code>git fetch origin</code></p>
<p><code>git tag</code></p>
<p>版本号的分配规则</p>
<p>x.y.z格式进行版本管理</p>
<p>x在重大功能变更或新版本不向下兼容时加1,此时y与z的数字归0</p>
<p>y在添加新功能或者删除已有功能时加1, 此时z的数字归0</p>
<p>z只在进行内部修改后加1</p>
<p>具体例子:<br>1.0.0 最初发布的版本<br>1.0.1 修正了轻微BUG<br>1.0.2 修复漏洞<br>1.1.0 添加新功能<br>2.0.0 更新整体UI并添加新功能</p>
<p><strong>Commit Message Guidelines</strong></p>
<p><a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits" target="_blank" rel="noopener">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a></p>
<p><a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0-beta.4/</a></p>
<p>git commit cp 规范</p>
<p><a href="https://github.com/Dolov/git-commit-cp" target="_blank" rel="noopener">https://github.com/Dolov/git-commit-cp</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p>
<p><a href="https://udacity.github.io/git-styleguide/" target="_blank" rel="noopener">https://udacity.github.io/git-styleguide/</a></p>
<p><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener">https://juejin.im/post/5afc5242f265da0b7f44bee4</a></p>
<p><a href="https://www.jianshu.com/p/b9d5a0711528" target="_blank" rel="noopener">https://www.jianshu.com/p/b9d5a0711528</a></p>
<p>Commit message(提交说明)</p>
<p>-m 参数 指定commit message 的</p>
<p>多行 git commit</p>
<p>清晰明了 说明目的</p>
<p>格式:</p>
<p>三个部分:Header,Body和Footer</p>
<p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code><br>// 空一行<br><code>&lt;body&gt;</code><br>// 空一行<br><code>&lt;footer&gt;</code></p>
<p>Header 是必须<br>Body和Footer 可用省略</p>
<p>任何一行都不能超过72个字符(或100个字符) 避免换行</p>
<p>Header: type(必需)、scope(可选)、subject(必需)</p>
<p>type: 说明commit的类别,只允许使用下面7个标示</p>
<p>feat：新功能（feature）<br>fix：修补bug<br>docs：文档（documentation）<br>style： 格式（不影响代码运行的变动）<br>refactor：重构（即不是新增功能，也不是修改bug的代码变动）<br>test：增加测试<br>chore：构建过程或辅助工具的变动</p>
<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要</p>
<p>scope</p>
<p>scope 用于说明commit影响的范围, 比如数据层、控制层、视图层等,视项目不同而不同</p>
<p>subject</p>
<p>subject是commit目的的简短描述, 不超过50个字符</p>
<p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写<br>结尾不加句号（.）</p>
<p>Body</p>
<p>Body部分是对本次commit的详细描述, 可以分成多行.</p>
<p>示例:</p>
<p>More detailed explanatory text, if necessary.  Wrap it to<br>about 72 characters or so. </p>
<p>Further paragraphs come after blank lines.</p>
<ul>
<li>Bullet points are okay, too</li>
<li>Use a hanging indent</li>
</ul>
<p><strong>注意点:</strong></p>
<p>使用第一人称现在时，比如使用change而不是changed或changes。</p>
<p>应该说明代码变动的动机，以及与以前行为的对比。</p>
<p>Footer</p>
<p>Footer 部分只用于两种情况</p>
<ul>
<li>不兼容变动</li>
</ul>
<p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p>
<p>BREAKING CHANGE: isolate scope bindings definition has changed.</p>
<p>To migrate the code follow the example below:</p>
<p>Before:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scope: &#123;</span><br><span class="line">    myAttr: 'attribute',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>After:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scope: &#123;</span><br><span class="line">    myAttr: '@',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The removed <code>inject</code> wasn’t generaly useful for directives so there should be no code using it.</p>
<ul>
<li>关闭Issue</li>
</ul>
<p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue.</p>
<p>Closes #234</p>
<p>也可以一次关闭多个 issue</p>
<p>Closes #123, #245, #992</p>
<p>Revert</p>
<p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>
<p>revert: feat(pencil): add ‘graphiteWidth’ option</p>
<p>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</p>
<p>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。</p>
<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>
<p>编写工具</p>
<p>Commitizen:<a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">https://github.com/commitizen/cz-cli</a></p>
<p><a href="http://commitizen.github.io/cz-cli/" target="_blank" rel="noopener">http://commitizen.github.io/cz-cli/</a></p>
<p><code>npm install -g commitizen</code></p>
<p>commitizen init cz-conventional-changelog –save –save-exact</p>
<p><code>git add .</code></p>
<p><code>git cz</code></p>
<p>检查Commit message 是否符合格式</p>
<p>validate-commit-msg:<a href="https://github.com/kentcdodds/validate-commit-msg" target="_blank" rel="noopener">https://github.com/kentcdodds/validate-commit-msg</a></p>
<p><a href="https://github.com/kentcdodds/validate-commit-msg/blob/master/index.js" target="_blank" rel="noopener">https://github.com/kentcdodds/validate-commit-msg/blob/master/index.js</a></p>
<p>重命名为下面名字<br>validate-commit-msg.js</p>
<p>加入Git的hook</p>
<p>package.json-&gt;ghooks:<a href="http://npm.im/ghooks" target="_blank" rel="noopener">http://npm.im/ghooks</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"config": &#123;</span><br><span class="line">    "ghooks": &#123;</span><br><span class="line">      "commit-msg": "./validate-commit-msg.js"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>example</p>
<p><code>$ git add -A</code><br><code>$ git commit -m &quot;edit markdown&quot;</code><br>INVALID COMMIT MSG: does not match “<type>(<scope>): <subject>“ ! was: edit markdown</subject></scope></type></p>
<p>Commit Message -&gt; Change log</p>
<p>三部分组成:</p>
<p>New features<br>Bug fixes<br>Breaking changes.</p>
<p>工具:</p>
<p>conventional-changelog </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g conventional-changelog</span><br><span class="line"><span class="meta">$</span> cd my-project</span><br><span class="line"><span class="meta">$</span> conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>
<p>CHANGELOG.md</p>
<p>生成所有发布的 Change log</p>
<p><code>$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</code></p>
<p>package.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -w -r 0"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>$ npm run changelog</code></p>
<p>工具链:</p>
<p> commitizen/cz-cli<br> commitizen/cz-conventional-changelog<br> conventional-changelog/standard-version </p>
<p> 持续集成:</p>
<p> marionebl/commitlint</p>
<p> Git 的表情使用</p>
<p> <a href="https://mkblog.cn/872/" target="_blank" rel="noopener">https://mkblog.cn/872/</a></p>
<p> <a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">https://gitmoji.carloscuesta.me/</a></p>
<p>🎨 - 改进结构和代码格式<br>⚡️ - 优化性能<br>🔥 - 移除代码或文件<br>🐛 - 修复 bug<br>✨ - 引入新功能<br>🍎 - 修复 MacOS 下的问题<br>📝 - 写文档<br>🚀 - 部署新功能</p>
<p>✅ - 添加测试用例<br>🔖 - 发版/版本标签<br>🔒 - 修复安全问题<br>🐧 - 修复 Linux 下的问题<br>🚨 - 移除 linter 的警告<br>🚧 - 工作在进行中<br>💚 - 修复 CI 构建问题<br>⬇️ - 降级依赖库</p>
<p>🏁 - 修复 Windows 下的问题<br>⬆️ - 升级依赖库<br>👷 - 添加 CI 构建系统<br>🔧 - 改变配置文件<br>🔨 - 大重构<br>🎉 - 初次提交<br>💄 - 升级 UI 和样式文件</p>
<p>Git README 编写</p>
<p><a href="https://github.com/kefranabg/readme-md-generator" target="_blank" rel="noopener">https://github.com/kefranabg/readme-md-generator</a></p>
<p>增加 .gitignore</p>
<p><a href="https://github.com/github/gitignore.git" target="_blank" rel="noopener">https://github.com/github/gitignore.git</a></p>
<p>增加 license</p>
<p><a href="https://blog.csdn.net/testcs_dn/article/details/38496107" target="_blank" rel="noopener">https://blog.csdn.net/testcs_dn/article/details/38496107</a></p>
<p>Git 配置 多个 SSH Key</p>
<p><code>ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa</code></p>
<p><code>ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa</code></p>
<p><code>ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/gitlab_id_rsa</code></p>
<p><code>ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/gitlab_own_id_rsa</code></p>
<p><code>ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/bitbucket_id_rsa</code></p>
<p><code>touch ~/.ssh/config</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"><span class="meta">#</span> github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line"><span class="meta">#</span> gitlab</span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitlab_id_rsa</span><br><span class="line"><span class="meta">#</span> gitlab own</span><br><span class="line">Host gitlab.crm.com</span><br><span class="line">HostName gitlab.crm.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitlab_own_id_rsa</span><br><span class="line"><span class="meta">#</span> bitbucket</span><br><span class="line">Host bitbucket.org</span><br><span class="line">HostName bitbucket.org</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/bitbucket_id_rsa</span><br></pre></td></tr></table></figure>
<p><code>$ ssh -T git@gitee.com</code><br><code>$ ssh -T git@github.com</code><br><code>$ ssh -T git@gitlab.com</code><br><code>$ ssh -T git@gitlab.crm.com</code><br><code>$ ssh -T git@bitbucket.org</code></p>
<p>1个项目push多个远程仓库</p>
<p><code>git remote add github https://github.com/yhyangjiabin/test.git</code><br><code>git remote add gitee https://gitee.com/yhyangjiabin/test.git</code><br><code>git remote add gitlab https://gitlab.com/yhyangjiabin/test.git</code><br><code>git remote add gitlab_own https://gitlab.crm.com/yhyangjiabin/test.git</code><br><code>git remote add bitbucket https://bitbucket.org/yhyangjiabin/test.git</code></p>
<p><code>git push -u github master</code><br><code>git push -u gitee master</code><br><code>git push -u gitlab master</code><br><code>git push -u github_own master</code><br><code>git push -u bitbucket master</code></p>
<p><code>git remote</code></p>
<p><code>git remote -v</code></p>
<p>移除<br><code>git remote rm gitee</code></p>
<p>项目命名 Repository name</p>
<p><a href="https://sinkcup.github.io/programming-project-name-best-practice" target="_blank" rel="noopener">https://sinkcup.github.io/programming-project-name-best-practice</a></p>
<p><a href="https://en.wikipedia.org/wiki/Clean_URL" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Clean_URL</a></p>
<ul>
<li>凡是会出现在链接中的名字（用户名、组织名、项目名、branch名、tag名），都一定不要使用下划线，而使用中横线。原因：下划线会与浏览器默认样式重合，导致看起来像空格。</li>
<li>优先全小写，而不要使用驼峰。原因：便于用户手动输入。</li>
<li>项目起名和域名无关。原因：买到更好的域名时，域名就换了。</li>
<li>语义化后缀，看名字就知道是什么项目。</li>
</ul>
<p>举例:</p>
<p>电子书项目</p>
<p>产品线 ebook<br>接口 ebook-api<br>JS的网站 ebook-web-app<br>微信小程序 ebook-wechat-mini-program<br>安卓APP ebook-android-app<br>苹果APP ebook-ios-app<br>管理员后台网站（假如是PHP/Python等前后端混合的） ebook-admin-web<br>管理员后台JS网站（假如是JS前后端分离的） ebook-admin-web-app<br>管理员后台接口（假如是JS前后端分离的） ebook-admin-api</p>
<p>GUI 客户端</p>
<p>GitHub Desktop:<a href="https://desktop.github.com/" target="_blank" rel="noopener">https://desktop.github.com/</a><br>SourceTree:<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>流程</tag>
        <tag>commit</tag>
        <tag>图标</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>04_vue组件和路由</title>
    <url>/2019/11/21/2019-11-20-04-vue%E7%BB%84%E4%BB%B6%E5%92%8C%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<center><font size="4" color="red">04_vue组件和路由</font></center>

<a id="more"></a>
<h2 id="Vue的组件和路由"><a href="#Vue的组件和路由" class="headerlink" title="Vue的组件和路由"></a>Vue的组件和路由</h2><h4 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global</span>&gt;</span><span class="tag">&lt;/<span class="name">global</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">local</span>&gt;</span><span class="tag">&lt;/<span class="name">local</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//这个是全局组件</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'global'</span>,&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//local这个组件是定义在app里的，所以是局部的</span></span></span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">'local'</span>:&#123;</span></span><br><span class="line"><span class="xml">                    template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义局部组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="props属性"><a href="#props属性" class="headerlink" title="props属性"></a>props属性</h4><p>用于传递组件间的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:msg</span>=<span class="string">"site"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'comp'</span>,&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//把父组件的数据传递到子组件里</span></span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'msg'</span>],</span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用这个数据</span></span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                site:<span class="string">'helloworld'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="prop验证"><a href="#prop验证" class="headerlink" title="prop验证"></a>prop验证</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component('my-component', &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: 'hello' &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        // 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return ['success', 'warning', 'danger'].indexOf(value) !== -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="组件中的data"><a href="#组件中的data" class="headerlink" title="组件中的data"></a>组件中的data</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mycom</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'mycom'</span>,&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是个全局组件---&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1.在组件中也可以定义data，但是data不能是对象类型，只能是函数类型，而且必须有返回值，且返回值为对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.组件中的data数据使用方式和实例中data的使用方式一样</span></span></span><br><span class="line"><span class="javascript">            data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    msg:<span class="string">'这是组件data中的数据'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="emit将子组件数据传递给父组件数据"><a href="#emit将子组件数据传递给父组件数据" class="headerlink" title="emit将子组件数据传递给父组件数据"></a>emit将子组件数据传递给父组件数据</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conter-event-example"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 6.值增加 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 4.到父组件后执行函数countertotal --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button-conter</span> <span class="attr">v-on:counterzj</span>=<span class="string">"countertotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-conter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button-conter</span> <span class="attr">v-on:counterzj</span>=<span class="string">"countertotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-conter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'button-conter'</span>,&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1.点击button按钮，触发函数clickta</span></span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"clickta"</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">            data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line">                    counter:0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//2.触发的函数clickta，实现自增</span></span></span><br><span class="line"><span class="javascript">                clickta:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.counter+=<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//3.emit用于触发事件，用于把子组件数据传递给父组件，这一步直接执行父组件的counterzj</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'counterzj'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#conter-event-example'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                total:0</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//5.函数countertotal实现自增</span></span></span><br><span class="line"><span class="javascript">                countertotal:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.total+=<span class="number">1</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h4><ul>
<li>访问路由后面加/login,可以访问跳转到登录组件</li>
</ul>
<p><code>file:///D:/Hui/Persion/Application/vue/code/v-route.html#/login</code></p>
<ul>
<li>访问路由后面加/register，可以访问跳转到注册组件</li>
</ul>
<p><code>file:///D:/Hui/Persion/Application/vue/code/v-route.html#/register</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由规则匹配的组件，是放到router-view里的，可以理解为一个DOM或者容器，用于存放路由匹配到的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//解释：什么是组件的模板对象，什么是组件的引用名称</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//组件的模板对象,这里的login就是模板对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> register=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//组件的引用名称，这里的login就是引用名称</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'login'</span>,&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="comment">//在导入vue-router包之后，在windows全局对象中，就有了一个路由的构造函数，叫做VueRouter</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> routerobj=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// route 这个配置对象中的route表示[路由匹配规则]的意思</span></span></span><br><span class="line"><span class="javascript">           routes:[     <span class="comment">//routes表示多个路由匹配规则</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//每个路由匹配规则都有一个对象，每个对象都两个属性</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//path:表示监听，路由的链接地址</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//component：表示如果路由是前面匹配的path，就展示component属性对应的组件</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//注意：component属性值，必须是一个组件的模板对象，不能是组件的引用名称</span></span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/login'</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/register'</span>,<span class="attr">component</span>:register&#125;</span></span><br><span class="line">           ]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//将路由规则和实例对象关联，注册到vm实例上，用于监听url地址的变化，然后展示对应组件</span></span></span><br><span class="line">            router:routerobj</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件的访问方式"><a href="#组件的访问方式" class="headerlink" title="组件的访问方式"></a>组件的访问方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是一般的写法，前面必须加# --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;a href="#/login"&gt;登录&lt;/a&gt;</span></span><br><span class="line"><span class="comment">        &lt;a href="#/register"&gt;注册&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这是官方的写法,推荐使用.router-link渲染出来是a标签，如果想要渲染为span标签，可以加上tag="span" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 路由规则匹配的组件，是放到router-view里的，可以理解为一个DOM或者容器，用于存放路由匹配到的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改初始页面加载的组件"><a href="#修改初始页面加载的组件" class="headerlink" title="修改初始页面加载的组件"></a>修改初始页面加载的组件</h4><p>两种方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//加这一步是为了加载初始页面时直接跳转到login组件</span><br><span class="line">&#123;path:'/',component:login&#125;,</span><br><span class="line">//但是访问路径是根路径，组件是登录组件，这样不太合理，不推荐</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//这一步可以直接在初始加载时进入的路径和组件都是登录组件</span><br><span class="line">&#123;path:'/',redirect:'login'&#125;,</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是一般的写法，前面必须加# --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;a href="#/login"&gt;登录&lt;/a&gt;</span></span><br><span class="line"><span class="comment">        &lt;a href="#/register"&gt;注册&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这是官方的写法,推荐使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 路由规则匹配的组件，是放到router-view里的，可以理解为一个DOM或者容器，用于存放路由匹配到的组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//解释：什么是组件的模板对象，什么是组件的引用名称</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//组件的模板对象,这里的login就是模板对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> register=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//组件的引用名称，这里的login就是引用名称</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'login'</span>,&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="comment">//在导入vue-router包之后，在windows全局对象中，就有了一个路由的构造函数，叫做VueRouter</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> routerobj=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">           <span class="comment">// route 这个配置对象中的route表示[路由匹配规则]的意思</span></span></span><br><span class="line"><span class="javascript">           routes:[     <span class="comment">//routes表示多个路由匹配规则</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//每个路由匹配规则都有一个对象，每个对象都两个属性</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//path:表示监听，路由的链接地址</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//component：表示如果路由是前面匹配的path，就展示component属性对应的组件</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//注意：component属性值，必须是一个组件的模板对象，不能是组件的引用名称</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//加这一步是为了加载初始页面时直接跳转到login组件</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#123;path:'/',component:login&#125;,</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//这一步可以直接在初始加载时进入的路径和组件都是登录组件</span></span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">redirect</span>:<span class="string">'login'</span>&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/login'</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/register'</span>,<span class="attr">component</span>:register&#125;</span></span><br><span class="line">           ]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//将路由规则和实例对象关联，注册到vm实例上，用于监听url地址的变化，然后展示对应组件</span></span></span><br><span class="line">            router:routerobj</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由样式的设置"><a href="#路由样式的设置" class="headerlink" title="路由样式的设置"></a>路由样式的设置</h4><p>路由默认样式class：router-link-active</p>
<p>直接在样式中设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .router-link-active&#123;</span><br><span class="line">            color:red;</span><br><span class="line">            font-weight: 800;</span><br><span class="line">            font-size: 200%;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想要修改默认的router-link-active，可以在路由构造函数中使用自己定义的样式</p>
<p><code>linkActiveClass:&#39;mystyle&#39;</code></p>
<h4 id="路由规则中定义参数方式一：query"><a href="#路由规则中定义参数方式一：query" class="headerlink" title="路由规则中定义参数方式一：query"></a>路由规则中定义参数方式一：query</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以在to属性的地址后面加请求参数,要获取该值，可以使用this.$route.query.id和this.$route.query.name。this可以省去 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login?id=2&amp;name=zhangsan"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录 --- &#123;&#123;$route.query.id&#125;&#125; --- &#123;&#123;this.$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> register=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">            routes:[</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/login'</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/register'</span>,<span class="attr">component</span>:register&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//本是写成router:router，但由于是一样的，所以可以直接写router</span></span></span><br><span class="line">            router</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由规则中定义参数方式一：params"><a href="#路由规则中定义参数方式一：params" class="headerlink" title="路由规则中定义参数方式一：params"></a>路由规则中定义参数方式一：params</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以在to属性的地址后面加请求参数,要获取该值，可以使用this.$route.params.id和this.$route.params.name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/3/lisi"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录 --- &#123;&#123;$route.params.id&#125;&#125; --- &#123;&#123;$route.params.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> register=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">            routes:[</span><br><span class="line"><span class="javascript">                <span class="comment">//:id表示占位符</span></span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/login/:id/:name'</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">path</span>:<span class="string">'/register'</span>,<span class="attr">component</span>:register&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//本是写成router:router，但由于是一样的，所以可以直接写router</span></span></span><br><span class="line">            router</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用children实现路由的嵌套"><a href="#使用children实现路由的嵌套" class="headerlink" title="使用children实现路由的嵌套"></a>使用children实现路由的嵌套</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 跳转 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 显示路由 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"temp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- router-link一定要被div或者什么属性包裹，否则无法显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 子组件的显示容器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index=&#123;</span></span><br><span class="line"><span class="javascript">            template:<span class="string">'#temp'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> login=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> register=&#123;</span></span><br><span class="line"><span class="xml">            template:'<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//定义路由</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> router=<span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">            routes:[</span><br><span class="line"><span class="javascript">                &#123;   <span class="attr">path</span>:<span class="string">'/index'</span>,</span></span><br><span class="line">                    component:index,</span><br><span class="line">                    children:[</span><br><span class="line"><span class="javascript">                        <span class="comment">//子组件中不能加/</span></span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">path</span>:<span class="string">'login'</span>,<span class="attr">component</span>:login&#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;<span class="attr">path</span>:<span class="string">'register'</span>,<span class="attr">component</span>:register&#125;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;&#125;,</span><br><span class="line">            router</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>组件</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>activiti入门01</title>
    <url>/2019/12/31/2019-12-31-activiti%E5%85%A5%E9%97%A801/</url>
    <content><![CDATA[<center><font size="4" color="red">activiti入门01</font></center>

<a id="more"></a>
<h2 id="什么是工作流"><a href="#什么是工作流" class="headerlink" title="什么是工作流"></a>什么是工作流</h2><p>工作流：工作的一个流程，事物发展的一个业务过程</p>
<p>例子：<br>    请假流程：开始—-员工申请—-部门经理审批—-总经理审批—-结束</p>
<h2 id="activiti的表的生成"><a href="#activiti的表的生成" class="headerlink" title="activiti的表的生成"></a>activiti的表的生成</h2><h4 id="依赖的pom文件"><a href="#依赖的pom文件" class="headerlink" title="依赖的pom文件"></a>依赖的pom文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.S<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.S<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.S<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.S<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.S<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.activiti&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;activiti-bpmn-layout&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;6.0.S&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.activiti.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;activiti-cloud-services-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;6.0.S&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    	<span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="activiti-cfg-xml文件"><a href="#activiti-cfg-xml文件" class="headerlink" title="activiti.cfg.xml文件"></a>activiti.cfg.xml文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/db_activiti"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--StandaloneProcessEngineConfiguration是脱机方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是否生成表结构--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="生成表"><a href="#生成表" class="headerlink" title="生成表"></a>生成表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.创建ProcessEngineConfiguration对象</span></span><br><span class="line">ProcessEngineConfiguration configuration = ProcessEngineConfiguration</span><br><span class="line">.createProcessEngineConfigurationFromResource(<span class="string">"activiti.cfg.xml"</span>);</span><br><span class="line"><span class="comment">//2.创建ProcessEngine对象</span></span><br><span class="line">ProcessEngine processEngine = configuration.buildProcessEngine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.输出一下processEngine</span></span><br><span class="line">System.out.println(processEngine);</span><br></pre></td></tr></table></figure>
<h4 id="表结构介绍"><a href="#表结构介绍" class="headerlink" title="表结构介绍"></a>表结构介绍</h4><ul>
<li><p>ACT_GE_* : “GE”代表“General”（通用），用在各种情况下；</p>
</li>
<li><p>ACT_HI_* : “HI”代表“History”（历史），这些表中保存的都是历史数据，比如执行过的流程实例、变量、任务，等等。Activit默认提供了4种历史级别：</p>
<ul>
<li><p>none: 不保存任何历史记录，可以提高系统性能；</p>
</li>
<li><p>activity：保存所有的流程实例、任务、活动信息；</p>
</li>
<li><p>audit：也是Activiti的默认级别，保存所有的流程实例、任务、活动、表单属性；</p>
</li>
<li><p>full：最完整的历史记录，除了包含audit级别的信息之外还能保存详细，例如：流程变量。</p>
<blockquote>
<p>对于几种级别根据对功能的要求选择，如果需要日后跟踪详细可以开启full。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>ACT_ID_* : “ID”代表“Identity”（身份），这些表中保存的都是身份信息，如用户和组以及两者之间的关系。如果Activiti被集成在某一系统当中的话，这些表可以不用，可以直接使用现有系统中的用户或组信息；</p>
</li>
<li><p>ACT_RE_* : “RE”代表“Repository”（仓库），这些表中保存一些‘静态’信息，如流程定义和流程资源（如图片、规则等）；</p>
</li>
<li><p>ACT_RU_* : “RU”代表“Runtime”（运行时），这些表中保存一些流程实例、用户任务、变量等的运行时数据。<font color="red">Activiti只保存流程实例在执行过程中的运行时数据，并且当流程结束后会立即移除这些数据，这是为了保证运行时表尽量的小并运行的足够快</font>；</p>
</li>
</ul>
<h4 id="avtiviti数据表清单"><a href="#avtiviti数据表清单" class="headerlink" title="avtiviti数据表清单"></a>avtiviti数据表清单</h4>
<table>
   <tr>
      <td>表分类</td>
      <td>表名</td>
      <td>解释</td>
   </tr>
   <tr>
      <td rowspan="2">一般数据</td>
      <td>ACT_GE_BYTEARRAY</td>
      <td>通用的流程定义和流程资源</td>
   </tr>
   <tr>
      <td>ACT_GE_PROPERTY</td>
      <td>系统相关属性</td>
   </tr>
   <tr>
      <td rowspan="8">浏览历史记录</td>
      <td>ACT_HI_ACTINST</td>
      <td>历史的流程实例</td>
   </tr>
   <tr>
      <td>ACT_HI_ATTACHMENT</td>
      <td>历史的流程附件</td>
   </tr>
   <tr>
      <td>ACT_HI_COMMENT</td>
      <td>历史的说明性信息</td>
   </tr>
   <tr>
      <td>ACT_HI_DETAIL</td>
      <td>历史的流程运行中的细节信息</td>
   </tr>
   <tr>
      <td>ACT_HI_IDENTITYLINK</td>
      <td>历史的流程运行过程中用户关系</td>
   </tr>
   <tr>
      <td>ACT_HI_PROCINST</td>
      <td>历史的流程实例</td>
   </tr>
   <tr>
      <td>ACT_HI_TASKINST</td>
      <td>历史的任务实例</td>
   </tr>
   <tr>
      <td>ACT_HI_VARINST</td>
      <td>历史的流程运行中的变量信息</td>
   </tr>
   <tr>
      <td rowspan="4">用户用户组表</td>
      <td>ACT_ID_GROUP</td>
      <td>身份信息-组信息</td>
   </tr>
   <tr>
      <td>ACT_ID_INFO</td>
      <td>身份信息-组信息</td>
   </tr>
   <tr>
      <td>ACT_ID_MEMBERSHIP</td>
      <td>身份信息-用户和组关系的中间表</td>
   </tr>
   <tr>
      <td>ACT_ID_USER</td>
      <td>身份信息-用户信息</td>
   </tr>
   <tr>
      <td rowspan="3">流程定义表</td>
      <td>ACT_RE_DEPLOYMENT</td>
      <td>部署单元信息</td>
   </tr>
   <tr>
      <td>ACT_RE_MODEL</td>
      <td>模型信息</td>
   </tr>
   <tr>
      <td>ACT_RE_PROCDEF</td>
      <td>已部署的流程定义</td>
   </tr>
   <tr>
      <td rowspan="6">运行实例表</td>
      <td>ACT_RU_EVENT_SUBSCR</td>
      <td>运行时事件</td>
   </tr>
   <tr>
      <td>ACT_RU_EXECUTION</td>
      <td>运行时流程执行实例</td>
   </tr>
   <tr>
      <td>ACT_RU_IDENTITYLINK</td>
      <td>运行时用户关系信息</td>
   </tr>
   <tr>
      <td>ACT_RU_JOB</td>
      <td>运行时作业</td>
   </tr>
   <tr>
      <td>ACT_RU_TASK</td>
      <td>运行时任务</td>
   </tr>
   <tr>
      <td>ACT_RU_VARIABLE</td>
      <td>运行时变量表</td>
   </tr>
</table>

<h2 id="activiti流程定义"><a href="#activiti流程定义" class="headerlink" title="activiti流程定义"></a>activiti流程定义</h2><p>任何一个流程都有一个id和name</p>
<p><img src="/2019/12/31/2019-12-31-activiti入门01/holiday.jpg" alt="holiday"></p>
<p>定义请假流程的执行人</p>
<p><img src="/2019/12/31/2019-12-31-activiti入门01/persion.jpg" alt="persion"></p>
<h4 id="流程图的底层原理"><a href="#流程图的底层原理" class="headerlink" title="流程图的底层原理"></a>流程图的底层原理</h4><ul>
<li><ol>
<li>业务流程图本质是一个xml文件，文件中可以存入所需要的数据</li>
</ol>
</li>
<li><ol start="2">
<li>读取业务流程图的过程就是解析xml的过程</li>
</ol>
</li>
<li><ol start="3">
<li>读取一个业务流程图的结点就相当于解析一个xml结构，进一步将数据插入到mysql表中，形成一条记录</li>
</ol>
</li>
<li><ol start="4">
<li>将所有结点读取并存入mysql表中</li>
</ol>
</li>
<li><ol start="5">
<li>后面只需要读mysql表中的记录就可以了，读一条记录将相当于读一个结点</li>
</ol>
</li>
<li><ol start="6">
<li>业务流程的推进，后面就转化为读表中数据，并且处理数据，结束时这一行数据就可以删除。</li>
</ol>
</li>
</ul>
<h2 id="常用的4个对象"><a href="#常用的4个对象" class="headerlink" title="常用的4个对象"></a>常用的4个对象</h2><ul>
<li><p>资源管理类：RepositoryService</p>
</li>
<li><p>流程运行管理类：RuntimeService</p>
</li>
<li><p>任务管理类：TaskService</p>
</li>
<li><p>历史管理类：HistoryService</p>
</li>
</ul>
<h4 id="流程部署"><a href="#流程部署" class="headerlink" title="流程部署"></a>流程部署</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//资源管理类</span></span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将资源部署到数据库中 影响表</span></span><br><span class="line"><span class="comment">act_re_procdef:(流程定义的信息)。存的是key和name，就是画图时给每张图起的唯一的名称</span></span><br><span class="line"><span class="comment">act_ge_bytearray：(流程定义的文件)。bpmn和png资源就存在这张表中</span></span><br><span class="line"><span class="comment">act_re_deployment：(部署信息)。部署时写的name("请假流程审批")存在这张表中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Deployment deployment = repositoryService.createDeployment()</span><br><span class="line">.addClasspathResource(<span class="string">"process/test.bpmn"</span>)</span><br><span class="line">.addClasspathResource(<span class="string">"process/test.png"</span>)</span><br><span class="line">.name(<span class="string">"请假流程审批"</span>)     <span class="comment">//设置名称</span></span><br><span class="line">.deploy();</span><br><span class="line"><span class="comment">//输出部署信息 act_re_deployment表中</span></span><br><span class="line">System.out.println(deployment.getName());</span><br><span class="line">System.out.println(deployment.getId());</span><br></pre></td></tr></table></figure>
<h4 id="流程运行"><a href="#流程运行" class="headerlink" title="流程运行"></a>流程运行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//流程运行管理类</span></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">启动流程实例。前提必须已经完成了部署 影响表</span></span><br><span class="line"><span class="comment">act_hi_actinst:(已完成的活动信息)。表中开始按钮已经执行，但是zhangsan还未执行请假申请。看END_TIME字段</span></span><br><span class="line"><span class="comment">act_hi_identitylink:(参与者信息)。参与者，目前只记录一个zhangsan</span></span><br><span class="line"><span class="comment">act_hi_procinst:(流程实例)。目前只记录一个zhangsan</span></span><br><span class="line"><span class="comment">act_hi_taskint:(任务实例)。任务表，有个zhangsan需要填写请假申请单的任务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">act_ru_execution:(执行表)。记录任务的执行</span></span><br><span class="line"><span class="comment">act_ru_identitylink:(参与者信息)。任务的参与者</span></span><br><span class="line"><span class="comment">act_ru_task:(任务)。记录当前任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ProcessInstance test = runtimeService.startProcessInstanceByKey(<span class="string">"test"</span>);<span class="comment">//这里的key就是流程定义bpmn文件起的id名称</span></span><br><span class="line"><span class="comment">//打印一下结果</span></span><br><span class="line">System.out.println(<span class="string">"流程部署ID:"</span>+test.getDeploymentId());   <span class="comment">//null</span></span><br><span class="line">System.out.println(<span class="string">"流程定义ID:"</span>+test.getProcessDefinitionId());    <span class="comment">//test:1:4</span></span><br><span class="line">System.out.println(<span class="string">"流程实例ID:"</span>+test.getId());   <span class="comment">//2501。流程实例:zhangsan可以有实例，其他人也可以有实例</span></span><br><span class="line">System.out.println(<span class="string">"活动ID:"</span>+test.getActivityId());    <span class="comment">//null</span></span><br></pre></td></tr></table></figure>
<h4 id="任务查询和处理"><a href="#任务查询和处理" class="headerlink" title="任务查询和处理"></a>任务查询和处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务管理类</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">任务查询</span></span><br><span class="line"><span class="comment">流程实例ID：来自表act_hi_procinst</span></span><br><span class="line"><span class="comment">任务ID、任务负责人，任务名称：来自表act_hi_taskint</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Task&gt; taskList = taskService.createTaskQuery()</span><br><span class="line">.processDefinitionKey(<span class="string">"test"</span>) <span class="comment">//这里的key就是流程定义bpmn文件起的id名称，指定哪个流程</span></span><br><span class="line">.taskAssignee(<span class="string">"zhangsan"</span>)     <span class="comment">//指定任务的处理人</span></span><br><span class="line">.list();                      <span class="comment">//.singleResult()可以只查询一条任务</span></span><br><span class="line"><span class="comment">//任务列表的展示</span></span><br><span class="line"><span class="keyword">for</span> (Task task:taskList)&#123;</span><br><span class="line">System.out.println(<span class="string">"流程实例ID:"</span>+task.getProcessInstanceId());</span><br><span class="line">System.out.println(<span class="string">"任务ID:"</span>+task.getId());</span><br><span class="line">System.out.println(<span class="string">"任务负责人:"</span>+task.getAssignee());</span><br><span class="line">System.out.println(<span class="string">"任务名称:"</span>+task.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">任务处理  影响表</span></span><br><span class="line"><span class="comment">act_hi_actinst:(已完成的活动信息)</span></span><br><span class="line"><span class="comment">act_hi_identitylink:(参与者信息)</span></span><br><span class="line"><span class="comment">act_hi_taskint:(任务实例)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">act_ru_execution:(执行表)</span></span><br><span class="line"><span class="comment">act_ru_identitylink:(参与者信息)</span></span><br><span class="line"><span class="comment">act_ru_task:(任务)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String taskId=task.getId();</span><br><span class="line">taskService.complete(taskId);   <span class="comment">//根据任务的id处理掉任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><p><code>act_ru_*</code> 表中只会有一条任务实例数据,前一个流程执行完后会把<code>act_ru_*</code>表中数据删除，保留当前执行的数据。只有一条实例数据的好处是查询速度快。</p>
</li>
<li><p>当该流程所有的任务执行完后，<code>act_ru_*</code>表中无该流程的任务数据。所有的数据都保留在了<code>act_hi_*</code>表中</p>
</li>
</ul>
<p>流程定义id、流程部署id、流程实例id、任务id讲解</p>
<p>流程部署id：将资源部署到数据库中时产生</p>
<p>流程定义id：在执行runtimeService的getRuntimeService方法后产生</p>
<p>流程实例id：每个人在执行流程时都会产生一个流程实例id</p>
<p>任务id：zhangsan填写请假是一个任务，有id。lisi审批也是一个任务，也有id</p>
]]></content>
      <categories>
        <category>Activiti</category>
      </categories>
      <tags>
        <tag>工作流</tag>
        <tag>activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>01-redis搭建</title>
    <url>/2020/04/02/2020-04-01-01-redis%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<center><font size="4" color="red">01-redis搭建</font></center>

<a id="more"></a>
<h2 id="Redis介绍和使用"><a href="#Redis介绍和使用" class="headerlink" title="Redis介绍和使用"></a>Redis介绍和使用</h2><h4 id="什么是redis"><a href="#什么是redis" class="headerlink" title="什么是redis"></a>什么是redis</h4><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库（nosql），应用在缓存。它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型有5种。</p>
<blockquote>
<p>Redis中所有数据都是字符串</p>
</blockquote>
<h4 id="redis的安装"><a href="#redis的安装" class="headerlink" title="redis的安装"></a>redis的安装</h4><p>这里主要介绍源码的安装方式，安装包的安装方式自行百度解决。</p>
<p><strong>环境准备</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>1.安装gcc g++的依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install build-essential</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libtool</span><br><span class="line"><span class="meta">#</span>2.安装pcre依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line"><span class="meta">#</span>3.安装zlib依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install zlib1g-dev</span><br><span class="line"><span class="meta">#</span>4.安装ssl依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install openssl</span><br><span class="line"><span class="meta">#</span>5.验证gcc是否安装成功</span><br><span class="line"><span class="meta">$</span> gcc -v</span><br></pre></td></tr></table></figure>
<p><strong>安装Redis</strong>,<a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 下载1.8.0版本：</span><br><span class="line">sudo wget wget http://download.redis.io/releases/redis-4.0.8.tar.gz</span><br><span class="line"><span class="meta">#</span> 解压：</span><br><span class="line">tar -zxvf redis-4.0.8.tar.gz</span><br><span class="line"><span class="meta">#</span>进入解压目录：</span><br><span class="line">cd redis-4.0.8</span><br></pre></td></tr></table></figure>
<p><strong>编译和安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>1.生成脚本和配置文件</span><br><span class="line"><span class="meta">$</span> make</span><br><span class="line"><span class="meta">#</span>2.安装 ，如果一下命令没有安装到/usr/local下，需要先mkdir /usr/local/redis</span><br><span class="line"><span class="meta">$</span> sudo make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果编译出错，可以make clean后重新make，进行编译</p>
</blockquote>
<p><strong>启动redis</strong></p>
<p><strong>先添加一下redis的日志文件，后面发现没有日志使用<code>./redis-cli shutdown</code>时会报错,在<code>/usr/local/redis/bin/redis.conf</code>文件下编译<code>logfile &quot;&quot;</code>为<code>logfile &quot;redis.log&quot;</code>,这里的路径是相对路径，如果启动不了，使用<code>chmod 777 redis.log</code>赋权</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>进入启动目录</span><br><span class="line">cd /usr/local/redis/bin</span><br><span class="line"><span class="meta">#</span>启动redis</span><br><span class="line">./redis-server</span><br></pre></td></tr></table></figure>
<p>启动结果如下，这样启动是前台的启动，控制台被占用，无法再操作控制台，所以设置守护进程启动。下面那个我按ctrl+c无法关闭，后来还是杀进程关闭的</p>
<p><img src="/2020/04/02/2020-04-01-01-redis搭建/redisserver.png" alt></p>
<p><strong>设置守护进程启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>复制一份redis.conf文件到/usr/local/redis/bin</span><br><span class="line"><span class="meta">$</span> sudo cp /home/wanghui/redis-4.0.8/redis.conf /usr/local/redis/bin</span><br></pre></td></tr></table></figure>
<p>修改<code>daemonize no</code> 改成<code>daemonize yes</code></p>
<p><strong>后端启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /usr/local/redis/bin</span><br><span class="line"><span class="meta">#</span>通过制定redis.conf来启动redis</span><br><span class="line"><span class="meta">$</span> sudo ./redis-server redis.conf</span><br><span class="line"><span class="meta">#</span>查看进程是否启动</span><br><span class="line"><span class="meta">$</span> ps -ef | grep redis</span><br><span class="line"><span class="meta">#</span> 连接redis,完整命令为 ./redis-cli -h 192.168.25.152(ip) -p 6379(端口)</span><br><span class="line"><span class="meta">$</span> ./redis-cli</span><br><span class="line"><span class="meta">#</span>断开连接</span><br><span class="line">ctrl+c</span><br><span class="line"><span class="meta">#</span>关闭redis服务，杀死redis进程也可以</span><br><span class="line"><span class="meta">$</span> ./redis-cli shutdown</span><br></pre></td></tr></table></figure>
<h4 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h4><p>5中键值对数据里库类型使用如下：</p>
<ul>
<li><p>字符串类型（String）：存的是key-value</p>
<p>set key value 设置值  (例如：set name zhangsan)</p>
<p>get key 获取值</p>
<p>incr key 加一，如果value设置的不是数字，是不能执行的</p>
<p>decr key减一</p>
</li>
<li><p>数列类型（hash）：相当于一个key对应一个map(map中又是key-value)</p>
<p>hset key field value 设置值</p>
<p>hget key field 获取值</p>
<p>hincrby key field num 设置增数量</p>
</li>
<li><p>列表类型（List）：list是有顺序，可重复，可从左边添加元素，也可以从右边添加元素</p>
<p>lpush list a b c d ：从右面向左边添加元素（从左边添加元素），即d c b a，其中list是名称</p>
<p>rpuah list 1 2 3 4：从右边添加元素</p>
<p>lrange list 0 -1 ：从0到-1元素查看，表示查看所有</p>
<p>lpop：从左边取，取出的同时也是被删除了</p>
<p>rpop：从右边取，取出的同时也是被删除了</p>
</li>
<li><p>集合类型（set）：无顺序，不能重复，如果添加重复元素，只会加入一个</p>
<p>sadd set1 a b c d d :像set1中添加元素</p>
<p>smembers set1:查询名称为set1下的元素</p>
<p>srem set1 a：删除名称为set1下的a元素</p>
</li>
<li><p>有序集合类型（SortedSet）：也叫zset，有顺序，不能重复。适合做排行榜</p>
<p>zadd zset1 9 a 8 c 10 d 1 e:添加元素（zadd zset1 score member）,这个添加了4个元素，分别是a c d e，其对应分数分别为9 8 10 1</p>
<p>zrange zset1 0 -1：根据zset1中的分数（从低到高）查看元素（这里的a c d e是元素）</p>
<p>zrange zset1 0 -1 withscores ：查看所有元素和分数</p>
<p>zrevrange zset1 0 -1 :按分数降序（分数从高到低）排序查看元素</p>
<p>zincrby zset1 5 a：对a元素添加5分，得到的结果是a元素变成14分（9+5）</p>
</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>auth password：输入密码</p>
<p>dbsize：查看key的数量</p>
<p>expire key second：设置key的过期时间（单位是秒）</p>
<p>ttl key：查看key距离过期的剩余时间（-2表示不存在，-1表示已被持久化，正数表示剩余的时间）</p>
<p>persist key：清除过期时间，也就是持久化，持久化成功提示是1，失败提示是0</p>
<p>del key：删除key</p>
<p>EXISTS key：查看key是否存在，若key存在，返回1，否则返回0</p>
<p>select 0：表示，选择0号数据库，默认是0号数据库</p>
<h4 id="redis的持久化方案"><a href="#redis的持久化方案" class="headerlink" title="redis的持久化方案"></a>redis的持久化方案</h4><p>Redis的数据都保存在内存中，如果机器挂掉，内存中的数据就不存在，因此需要做持久化，将内存中的数据保存在磁盘，下一次启动的时候就可以恢复数据到内存中</p>
<p>redis有两种持久化的方式</p>
<ol>
<li><p>RDB ：快照形式，定期将当前数据保存到磁盘中，会产生一个dump.rdb(redis的bin目录下)文件。</p>
<p>特点：会存在数据丢失，性能较好，数据备份。</p>
<p>使用方式：</p>
<p>在redis.conf中默认配置了保存规则及时间间隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1       //表示在900秒（15分钟）内修改了至少1个key，就会产生一个dump.rdb文件</span><br><span class="line">save 300 10      //表示在300秒（5分钟）内修改了至少10个key，就会产生一个dump.rdb文件</span><br><span class="line">save 60 10000    //表示在60秒（1分钟）内修改了至少10000个key，就会产生一个dump.rdb文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>AOF：append only file，所有对redis的操作命令记录在aof文件中，恢复数据，重新执行一遍即可。</p>
<p>特点：每秒保存（可以设置每次操作都保存一次），数据比较完整，耗费性能</p>
<p>默认是不开启的，如果需要开启，需要在redis.conf下修改配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendonly no   //将no改成yes就开启了AOF</span><br></pre></td></tr></table></figure>
<p>重新运行redis，会在bin目录下生成一个appendonly.aof的文件 </p>
</li>
</ol>
<blockquote>
<p>redis默认开启的是RDB，如果同时开启两个持久化方案，会按照AOF的持久化方案恢复数据</p>
</blockquote>
<h2 id="redis集群的搭建"><a href="#redis集群的搭建" class="headerlink" title="redis集群的搭建"></a>redis集群的搭建</h2><h4 id="redis-cluster节点分配"><a href="#redis-cluster节点分配" class="headerlink" title="redis cluster节点分配"></a>redis cluster节点分配</h4><p>现在我们是三个主节点分别是：A, B, C 三个节点，它们可以是一台机器上的三个端口，也可以是三台不同的服务器。那么，采用哈希槽 (hash slot)的方式来分配16384个slot 的话，它们三个节点分别承担的slot 区间是：</p>
<ul>
<li>节点A覆盖0－5460</li>
<li>节点B覆盖5461－10922</li>
<li>节点C覆盖10923－16383</li>
</ul>
<p>获取数据:<br>如果存入一个值，按照redis cluster哈希槽的<a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="noopener">算法</a>： CRC16(‘key’)384 = 6782。 那么就会把这个key 的存储分配到 B 上了。同样，当我连接(A,B,C)任何一个节点想获取’key’这个key时，也会这样的算法，然后内部跳转到B节点上获取数据</p>
<p>新增一个主节点:<br>新增一个节点D，redis cluster的这种做法是从各个节点的前面各拿取一部分slot到D上，我会在接下来的实践中实验。大致就会变成这样：</p>
<ul>
<li>节点A覆盖1365-5460</li>
<li>节点B覆盖6827-10922</li>
<li>节点C覆盖12288-16383</li>
<li>节点D覆盖0-1364,5461-6826,10923-12287</li>
</ul>
<p>同样删除一个节点也是类似，移动完成后就可以删除这个节点了。</p>
<h4 id="Redis-Cluster主从模式"><a href="#Redis-Cluster主从模式" class="headerlink" title="Redis Cluster主从模式"></a>Redis Cluster主从模式</h4><p> redis cluster 为了保证数据的高可用性，加入了主从模式，一个主节点对应一个或多个从节点，主节点提供数据存取，从节点则是从主节点拉取数据备份，当这个主节点挂掉后，就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉</p>
<p>上面那个例子里, 集群有ABC三个主节点, 如果这3个节点都没有加入从节点，如果B挂掉了，我们就无法访问整个集群了。A和C的slot也无法访问。</p>
<p>所以我们在集群建立的时候，一定要为每个主节点都添加了从节点, 比如像这样, 集群包含主节点A、B、C, 以及从节点A1、B1、C1, 那么即使B挂掉系统也可以继续正确工作。</p>
<p>B1节点替代了B节点，所以Redis集群将会选择B1节点作为新的主节点，集群将会继续正确地提供服务。 当B重新开启后，它就会变成B1的从节点。</p>
<p>不过需要注意，如果节点B和B1同时挂了，Redis集群就无法继续正确地提供服务了。</p>
<h4 id="redis-cluster集群的搭建"><a href="#redis-cluster集群的搭建" class="headerlink" title="redis-cluster集群的搭建"></a>redis-cluster集群的搭建</h4><p>环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统：Ubuntu18.04</span><br><span class="line">redis版本：5.0.3</span><br><span class="line"></span><br><span class="line">redis集群环境：192.168.25.152 192.168.25.153 192.168.25.154</span><br><span class="line">每个环境上有2个节点，一个maste，一个slave</span><br></pre></td></tr></table></figure>
<p>集群中至少应该有奇数个节点，所以至少有三个节点，每个节点至少有一个备份节点，所以下面使用6节点（主节点、备份节点由redis-cluster集群确定）</p>
<p>安装redis，这里我把3个主节点放在3台服务器上，分别安装，安装步骤操作单节点的安装。从节点我分别装在对应的主节点服务器上</p>
<p><strong>1、安装redis并配置</strong></p>
<p>安装方式见redis单节点的安装，然后在<code>/usr/local</code>下创建文件夹redis-cluster,复制两份redis到redis-cluster文件夹下，命名为redis-master和redis-slave。</p>
<p>修改redis .conf配置文件的部分内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bind 192.168.25.152  # 可以不用改</span><br><span class="line">port 7000 #修改端口号</span><br><span class="line">daemonize yes #后台启动,单节点时就配置好了</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">dir /usr/local/redis-cluster/redis-master/bin/redis-data  # 比较重要，因为备份文件存在这个配置的redis-data文件夹下</span><br><span class="line">cluster-enabled yes #开启cluster，去掉注释</span><br><span class="line">cluster-config-file nodes-7000.conf #自动生成 ，去掉注释</span><br><span class="line">cluster-node-timeout 15000 #节点通信时间， 去掉注释</span><br><span class="line">appendonly no #持久化方式，使用默认的持久化方式就可</span><br><span class="line">cluster-require-full-coverage no　　# redis cluster需要16384个slot都正常的时候才能对外提供服务，换句话说，只要任何一个slot异常那么整个cluster不对外提供服务。 因此生产环境一般为no  去掉注释，改成no</span><br></pre></td></tr></table></figure>
<p><strong>2、运行redis实例</strong></p>
<p>在3个服务器上分别执行一下命令启动redis,可以在redis-cluster文件夹下直接写成脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">cd /usr/local/redis-cluster/redis-master/bin</span><br><span class="line">./redis-server redis.conf</span><br><span class="line">cd /usr/local/redis-cluster/redis-slave/bin</span><br><span class="line">./redis-server redis.conf</span><br><span class="line">echo "redis-cluste start success"</span><br></pre></td></tr></table></figure>
<p>编写shutdown的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>1. 定义关键字查询进程信息</span><br><span class="line">findstr=`echo "redis"`</span><br><span class="line"><span class="meta">#</span>2. 查询进程信息保存于proids </span><br><span class="line"></span><br><span class="line">ps -ef|grep '$&#123;findstr&#125;' |grep -v 'grep'|awk '&#123;print $2&#125;'</span><br><span class="line">i=0</span><br><span class="line">for proid in `ps -ef|grep "$&#123;findstr&#125;"|grep -v 'grep' |awk '&#123;print $2&#125;'`</span><br><span class="line">do </span><br><span class="line">    proids[$i]=$proid</span><br><span class="line">    let i=$i+1</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>3. 判断查出的进程的数量 </span><br><span class="line">if [ $&#123;#proids[*]&#125; -eq 0 ]; </span><br><span class="line">then</span><br><span class="line">    echo "not find proid"</span><br><span class="line">elif [ $&#123;#proids[*]&#125; -eq 1 ]; </span><br><span class="line">then</span><br><span class="line">    kill -9 $&#123;proids[0]&#125;</span><br><span class="line">    echo "proid[$&#123;proids[0]&#125;] was killed"</span><br><span class="line">else</span><br><span class="line">    for proid in $&#123;proids[@]&#125;</span><br><span class="line">    do</span><br><span class="line"><span class="meta">	#</span>4 .把多个进程放到一起，先判断是否为空，如果为空，执行else，接下来不在为空，执行if。这步先留着，其实可以不要</span><br><span class="line">        if [ $proidstr ];</span><br><span class="line">        then</span><br><span class="line">            proidstr="$proidstr,$proid" </span><br><span class="line">        else</span><br><span class="line">            proidstr="$proid"</span><br><span class="line">        fi</span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span>5. 杀死进程</span><br><span class="line">        kill -9 $proid     </span><br><span class="line">    done </span><br><span class="line">    echo "存在$&#123;#proids[*]&#125;条进程[$&#123;proidstr&#125;], was killed"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>修改脚本操作权限并启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo chmod 777 start-all.sh</span><br><span class="line"><span class="meta">$</span> sudo chmod 777 shutdown-all.sh</span><br><span class="line"><span class="meta">#</span> 开启</span><br><span class="line"><span class="meta">$</span> sudo ./start-all.sh</span><br><span class="line"><span class="meta">#</span> 关闭</span><br><span class="line"><span class="meta">$</span> sudo ./shutdown-all.sh</span><br></pre></td></tr></table></figure>
<p>查看是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/02/2020-04-01-01-redis搭建/rediscluster.png" alt></p>
<p><strong>3、创建开启redis-cluster</strong></p>
<p>创建开启redis-cluster前需要把所有的redis都启动，然后使用152,153,154中的随便一台服务器。例如我使用的是152服务器上的7000端口的redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 1.进入源文件的src路径(不是安装的位置，是源文件的位置)</span><br><span class="line"><span class="meta">$</span> cd /home/wanghui/redis-5.0.3/src</span><br><span class="line"><span class="meta">#</span> 2.创建集群</span><br><span class="line"><span class="meta">$</span> sudo ./redis-cli --cluster create 192.168.25.152:7000 192.168.25.152:7001 192.168.25.153:7000 192.168.25.153:7001 192.168.25.154:7000 192.168.25.154:7001 --cluster-replicas 1</span><br><span class="line"><span class="meta">#</span> 集群方式登录</span><br><span class="line">./redis-cli -c -h 192.168.25.152 -p 7000</span><br><span class="line"><span class="meta">#</span> 登录进去后，查看集群状态</span><br><span class="line">cluster info</span><br><span class="line"><span class="meta">#</span> 查看集群节点</span><br><span class="line">cluster nodes</span><br><span class="line"><span class="meta">#</span> 检查集群节点状态</span><br><span class="line">./redis-cli --cluster check 192.168.25.152:7000</span><br><span class="line"><span class="meta">#</span> 修复集群节点</span><br><span class="line">./redis-cli --cluster fix 192.168.25.152:7000</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Mybatis逆向工程搭建</title>
    <url>/2020/04/02/2020-04-01-01-Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<center><font size="4" color="red">01-Mybatis逆向工程搭建</font></center>

<a id="more"></a>
<h1 id="Mybatis逆向工程搭建"><a href="#Mybatis逆向工程搭建" class="headerlink" title="Mybatis逆向工程搭建"></a>Mybatis逆向工程搭建</h1><p>由于目前很多公司都在使用逆向工程生成Mybatis所需要的mapper文件和pojo文件，所以我这里也总结了一下Mybatis的逆向工程的搭建，亲身实践，绝对可靠</p>
<h2 id="不使用springboot"><a href="#不使用springboot" class="headerlink" title="不使用springboot"></a>不使用springboot</h2><h4 id="搭建maven工程，导入依赖jar包"><a href="#搭建maven工程，导入依赖jar包" class="headerlink" title="搭建maven工程，导入依赖jar包"></a>搭建maven工程，导入依赖jar包</h4><p>第一步肯定是要在maven工程中导入所依赖的jar包,主要jar包是下面3个，如果需要，可以在导入log4j的jar包，顺便说一下，我用的mysql数据库版本是5.7.22</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="创建generatorConfig-xml配置文件"><a href="#创建generatorConfig-xml配置文件" class="headerlink" title="创建generatorConfig.xml配置文件"></a>创建generatorConfig.xml配置文件</h4><p>generatorConfig.xml配置文件是逆向工程的核心配置文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id:必选，上下文id，用于在生成错误时提示</span></span><br><span class="line"><span class="comment">        MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"testTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置生成pojo的序列化的插件，mybatis支持很多插件，这些插件都在 org.mybatis.generator.plugins包下  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.SerializablePlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置生成pojo的toString()方法的插件，mybatis支持很多插件，这些插件都在 org.mybatis.generator.plugins包下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://192.168.31.140:3306/test?characterEncoding=utf-8"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">                false：默认,</span></span><br><span class="line"><span class="comment">                    scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">                    scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">                    scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">                    scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage:生成PO类的位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--targetProject:指定存在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.hui.pojo"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.hui.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">""</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">""</span> <span class="attr">tableName</span>=<span class="string">"goods"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="编写执行代码GeneratorSqlmap-java"><a href="#编写执行代码GeneratorSqlmap-java" class="headerlink" title="编写执行代码GeneratorSqlmap.java"></a>编写执行代码GeneratorSqlmap.java</h4><p>新创建一个java执行文件（我创建在了com/hui/startup包下），使用以下代码执行。别忘记了修改逆向工程的配置文件路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.startup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorSqlmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//指定 逆向工程配置文件</span></span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"src\\main\\resources\\generatorConfig.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">                callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GeneratorSqlmap generatorSqlmap = <span class="keyword">new</span> GeneratorSqlmap();</span><br><span class="line">            generatorSqlmap.generator();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="执行GeneratorSqlmap-java"><a href="#执行GeneratorSqlmap-java" class="headerlink" title="执行GeneratorSqlmap.java"></a>执行GeneratorSqlmap.java</h4><p>执行后生成的代码结构如下：</p>
<p><img src="/2020/04/02/2020-04-01-01-Mybatis逆向工程搭建/generator.png" alt="逆向工程"></p>
<h2 id="springboot搭建逆向工程"><a href="#springboot搭建逆向工程" class="headerlink" title="springboot搭建逆向工程"></a>springboot搭建逆向工程</h2><h4 id="创建springboot"><a href="#创建springboot" class="headerlink" title="创建springboot"></a>创建springboot</h4><p>初始化时添加的依赖：</p>
<ul>
<li>Spring Boot DevTools</li>
<li>Lombok</li>
<li>Mybatis Framework</li>
</ul>
<h4 id="Pom文件"><a href="#Pom文件" class="headerlink" title="Pom文件"></a>Pom文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hui<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootgenerator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springbootgenerator<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetJavaProject</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">targetJavaProject</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- XML生成路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetResourcesProject</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">targetResourcesProject</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetXMLPackage</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">targetXMLPackage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetMapperPackage</span>&gt;</span>com.hui.dao<span class="tag">&lt;/<span class="name">targetMapperPackage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetModelPackage</span>&gt;</span>com.hui.pojo<span class="tag">&lt;/<span class="name">targetModelPackage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- generator 工具配置文件的位置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="GeneratorConfig-xml"><a href="#GeneratorConfig-xml" class="headerlink" title="GeneratorConfig.xml"></a>GeneratorConfig.xml</h4><p>generatorConfig.xml是逆向工程的核心配置文件</p>
<p>该文件放在位置：在resources下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-generator的核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动位置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;classPathEntry location="D:\maven_repository\mysql\mysql-connector-java\5.1.41\mysql-connector-java-5.1.41.jar" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://192.168.31.140:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定生成的类型为java类型，避免数据库中number等类型字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--自动生成的实体的存放包路径          举个例子：生成Goods.java和GoodsExample.java--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;targetModelPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;targetJavaProject&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--自动生成的*Mapper.xml文件存放路径   举个例子：GoodsMapper.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;targetXMLPackage&#125;"</span>  <span class="attr">targetProject</span>=<span class="string">"$&#123;targetResourcesProject&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自动生成的*Mapper.java存放路径      举个例子：GoodsMapper.java--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;targetMapperPackage&#125;"</span>  <span class="attr">targetProject</span>=<span class="string">"$&#123;targetJavaProject&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 映射配置     上面生成的名称，开头都以domainObjectName命名的"TbgShop"开头--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"goods"</span> <span class="attr">domainObjectName</span>=<span class="string">"Goods"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"student"</span> <span class="attr">domainObjectName</span>=<span class="string">"Student"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="执行插件"><a href="#执行插件" class="headerlink" title="执行插件"></a>执行插件</h4><p><img src="/2020/04/02/2020-04-01-01-Mybatis逆向工程搭建/springbootgenerator.png" alt></p>
<p>运行之后，就可以生成相应的mapper，pojo和xml文件，文件夹会自动创建。</p>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>02-Mybatis逆向工程使用</title>
    <url>/2020/04/02/2020-04-01-02-Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<center><font size="4" color="red">02-Mybatis逆向工程使用</font></center>

<a id="more"></a>
<h2 id="Mybatis逆向工程使用"><a href="#Mybatis逆向工程使用" class="headerlink" title="Mybatis逆向工程使用"></a>Mybatis逆向工程使用</h2><h4 id="不使用spring-不使用mapper代理"><a href="#不使用spring-不使用mapper代理" class="headerlink" title="不使用spring+不使用mapper代理"></a>不使用spring+不使用mapper代理</h4><p>SqlMapConfig.xml的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据源配置 database.properties 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置mybatis 运行中的一些行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置Mybatis的log实现为LOG4J --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;typeAlias alias="User" type="com.zy.entity.User"/&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.hui.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis运行环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 采用jdbc事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 采用Mybatis自带的数据源 POOLED --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将mapper文件加入到配置文件中 我的mapper文件放在了resources的mapper文件夹下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>jdbc.properties的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.168.31.140:3306/test?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>
<p>测试的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hui.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载mybatis的配置文件</span></span><br><span class="line">        String resources=<span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        InputStream inputStream= Resources.getResourceAsStream(resources);</span><br><span class="line">        <span class="comment">//获取sqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工程获取sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//执行sql语句 user是命名空间，起了别名的</span></span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"user.selectByPrimaryKey"</span>, <span class="string">'1'</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="不使用spring-使用mapper代理"><a href="#不使用spring-使用mapper代理" class="headerlink" title="不使用spring+使用mapper代理"></a>不使用spring+使用mapper代理</h4><p>SqlMapConfig.xml和jdbc.properties的配置和<strong>不适用spring+不适用mapper代理</strong>方式一样，只有测试的类不一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hui.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载mybatis的配置文件</span></span><br><span class="line">        String resources=<span class="string">"SqlMapConfig.xml"</span>;</span><br><span class="line">        InputStream inputStream= Resources.getResourceAsStream(resources);</span><br><span class="line">        <span class="comment">//获取sqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//通过工程获取sqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 获取mapper代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = userMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用spring-使用mapper代理"><a href="#使用spring-使用mapper代理" class="headerlink" title="使用spring+使用mapper代理"></a>使用spring+使用mapper代理</h4><p>SqlMapConfig.xml的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>applicationContext.xml的配置：管理mybatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 读取properties文件 jdbc.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置MyBatis核心配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置别名包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.hui.pojo"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mapper的位置 很重要--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Mapper扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置Mapper扫描包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.hui.mapper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>jdbc.properties的配置和上面的一样</p>
<p>测试的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hui.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hui.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hui.pojo.UserExample;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testhelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化spring容器</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring/applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取mapper代理对象</span></span><br><span class="line">        UserMapper userMapper = context.getBean(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        UserExample example = <span class="keyword">new</span> UserExample();</span><br><span class="line">        UserExample.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andUseridEqualTo(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByExample(example);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不设置任何查询条件是查询所有</span></span><br><span class="line">        <span class="comment">//UserExample example = new UserExample();</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = userMapper.selectByExample(example);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//User user = userMapper.selectByPrimaryKey(1);</span></span><br><span class="line">        <span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="mapper接口中的方法解析"><a href="#mapper接口中的方法解析" class="headerlink" title="mapper接口中的方法解析"></a>mapper接口中的方法解析</h4><p>Mybatis逆向工程中mapper接口中的方法解析</p>
<p>mapper接口中的部分常用方法及功能如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>int countByExample(UserExample example) thorws SQLException</td>
<td>按条件计数</td>
</tr>
<tr>
<td>int deleteByPrimaryKey(Integer id) thorws SQLException</td>
<td>按主键删除</td>
</tr>
<tr>
<td>int deleteByExample(UserExample example) thorws SQLException</td>
<td>按条件删除</td>
</tr>
<tr>
<td>String/Integer insert(User record) thorws SQLException</td>
<td>插入数据（返回值为ID）</td>
</tr>
<tr>
<td>User selectByPrimaryKey(Integer id) thorws SQLException</td>
<td>按主键查询</td>
</tr>
<tr>
<td>ListselectByExample(UserExample example) thorws SQLException</td>
<td>按条件查询</td>
</tr>
<tr>
<td>ListselectByExampleWithBLOGs(UserExample example) thorws SQLException</td>
<td>按条件查询（包括BLOB字段）。只有当数据表中的字段类型有为二进制的才会产生</td>
</tr>
<tr>
<td>int updateByPrimaryKey(User record) thorws SQLException</td>
<td>按主键更新</td>
</tr>
<tr>
<td>int updateByPrimaryKeySelective(User record) thorws SQLException</td>
<td>按主键更新值不为null的字段</td>
</tr>
<tr>
<td>int updateByExample(User record, UserExample example) thorws SQLException</td>
<td>按条件更新</td>
</tr>
<tr>
<td>int updateByExampleSelective(User record, UserExample example) thorws SQLException</td>
<td>按条件更新值不为null的字段</td>
</tr>
</tbody>
</table>
<h4 id="Mybatis逆向工程Example类解析"><a href="#Mybatis逆向工程Example类解析" class="headerlink" title="Mybatis逆向工程Example类解析"></a>Mybatis逆向工程Example类解析</h4><p>mybatis的逆向工程中会生成实体类及实体类对应的example类，example类用于添加条件，相当where后面的部分。</p>
<blockquote>
<p>如果要查询所有，就不设置任何查询条件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserExample example = <span class="keyword">new</span> UserExample();</span><br><span class="line">List&lt;User&gt; users = userMapper.selectByExample(example);</span><br></pre></td></tr></table></figure>
<p>xxxExample example = new xxxExample();<br>Criteria criteria = new Example().createCriteria();<br>example类中的部分常用方法及功能如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>example.setOrderByClause(“字段名 ASC”);</td>
<td>添加升序排列条件，DESC为降序</td>
</tr>
<tr>
<td>example.setDistinct(false)</td>
<td>去除重复，boolean型，true为选择不重复的记录</td>
</tr>
<tr>
<td>criteria.andXxxIsNull</td>
<td>添加字段xxx为null的条件</td>
</tr>
<tr>
<td>criteria.andXxxIsNotNull</td>
<td>添加字段xxx不为null的条件</td>
</tr>
<tr>
<td>criteria.andXxxEqualTo(value)</td>
<td>添加xxx字段等于value条件</td>
</tr>
<tr>
<td>criteria.andXxxNotEqualTo(value)</td>
<td>添加xxx字段不等于value条件</td>
</tr>
<tr>
<td>criteria.andXxxGreaterThan(value)</td>
<td>添加xxx字段大于value条件</td>
</tr>
<tr>
<td>criteria.andXxxGreaterThanOrEqualTo(value)</td>
<td>添加xxx字段大于等于value条件</td>
</tr>
<tr>
<td>criteria.andXxxLessThan(value)</td>
<td>添加xxx字段小于value条件</td>
</tr>
<tr>
<td>criteria.andXxxLessThanOrEqualTo(value)</td>
<td>添加xxx字段小于等于value条件</td>
</tr>
<tr>
<td>criteria.andXxxIn(List&lt;？&gt;)</td>
<td>添加xxx字段值在List&lt;？&gt;条件</td>
</tr>
<tr>
<td>criteria.andXxxNotIn(List&lt;？&gt;)</td>
<td>添加xxx字段值不在List&lt;？&gt;条件</td>
</tr>
<tr>
<td>criteria.andXxxLike(“%”+value+”%”)</td>
<td>添加xxx字段值为value的模糊查询条件</td>
</tr>
<tr>
<td>criteria.andXxxNotLike(“%”+value+”%”)</td>
<td>添加xxx字段值不为value的模糊查询条件</td>
</tr>
<tr>
<td>criteria.andXxxBetween(value1,value2)</td>
<td>添加xxx字段值在value1和value2之间条件</td>
</tr>
<tr>
<td>criteria.andXxxNotBetween(value1,value2)</td>
<td>添加xxx字段值不在value1和value2之间条件</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>逆向工程</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>01_SpringBoot的Web开发</title>
    <url>/2020/11/18/2020-11-17-SpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<center><font size="4" color="red">01_SpringBoot的Web开发</font></center>

<a id="more"></a>
<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><p>关于Web的配置，大多数都在WebMvcAutoConfiguration中</p>
<h2 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h2><p>做web开发，首先要引入静态资源，静态资源分为：</p>
<ul>
<li>别人写好的库，例如：jQuery</li>
<li>我们自己写的静态资源，例如：我们写的css、js、html、图片等</li>
<li>工程首页</li>
<li>favicon.ico的网页小图标</li>
</ul>
<p>首尔我们要知道这些静态资源的路径如何放置</p>
<h4 id="别人写好的库"><a href="#别人写好的库" class="headerlink" title="别人写好的库"></a>别人写好的库</h4><p>例如jQuery，不再是导入js文件，而是导入jQuery的jar包</p>
<p>从org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java类中我们可以看到以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们导入的所有webjars包下的文件，就是我们导入的别人写好的库，其资源就在classpath:/META-INF/resources/webjars/下,其中这里的classpath是导入jar包的路径</p>
<p>以maven依赖的形式导入webjars包：<a href="https://www.webjars.org/" target="_blank" rel="noopener">官网</a></p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/webjars.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars.bower<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="我们自己写的静态资源"><a href="#我们自己写的静态资源" class="headerlink" title="我们自己写的静态资源"></a>我们自己写的静态资源</h4><p>同样的从addResourceHandlers方法可以看到，自己写的静态资源从resourceProperties获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">			<span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>可以知道自己写的静态资源是从resources下的：</p>
<ul>
<li>/META-INF/resources/</li>
<li>/resources/</li>
<li>/static/</li>
<li>/public/</li>
</ul>
<p>中获取的，所以我们写的静态资源可以放到以上4个静态资源文件夹下</p>
<h4 id="工程首页"><a href="#工程首页" class="headerlink" title="工程首页"></a>工程首页</h4><p>工程首页的路径直接放在/META-INF/resources/，/resources/， /static/，/public/下，但是名称必须命名为<strong>index.html</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问时直接：localhost:8080</p>
<h4 id="favicon-ico的网页小图标"><a href="#favicon-ico的网页小图标" class="headerlink" title="favicon.ico的网页小图标"></a>favicon.ico的网页小图标</h4><p>和工程首页一样，直接放到/META-INF/resources/，/resources/， /static/，/public/下即可</p>
<p>名称要是<strong>favicon.ico</strong></p>
<h2 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h2><p>作用：Springboot中不使用jsp，而是使用的thymeleaf</p>
<p>导入jar包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>thymeleaf这里不再讨论，因为后期我并不打算使用</p>
<h2 id="WEB扩展与全面接管"><a href="#WEB扩展与全面接管" class="headerlink" title="WEB扩展与全面接管"></a>WEB扩展与全面接管</h2><p>SpringBoot提供了web的自动配置，但是一些mvc的其它配置功能并没有提供，这时需要扩展</p>
<p>例如：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置跳转，在访问/hello时，跳转到success.html页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置拦截器，拦截/hello,拦截的bean是XXX--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"XXX"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果要实现以上的xml配置，可以使用配置类扩展如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span></span>&#123;</span><br><span class="line">        <span class="comment">//这句话的意思是即使访问/wanghui,也转发到/hello</span></span><br><span class="line">        registry.addViewController(<span class="string">"/wanghui"</span>).setViewName(<span class="string">"/hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的方法不能加@bean注解，因为是扩展，是在原有自动配置上再增加的功能，这里我们这样写后，springboot不仅仅把自动配置的addViewControllers方法加载进去，而且还把我们自己写的addViewControllers方法加载进去。</p>
<p>如果要全面托管SpringMvc的自动配置，在我们自己的配置类上加上注解：@EnableWebMvc，这样关于Web的自动配置便会失效，只有我们配置类中使用的才会生效，不推荐使用</p>
<h4 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h4><p>引入资源不再介绍，后续应该不会使用thymeleaf</p>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>SpringMvc实现国际化的步骤：</p>
<ol>
<li>编写国际化配置文件</li>
<li>使用ResourceBundleMessageSource管理国际化资源文件</li>
<li>在页面使用fmt:message取出国际化内容</li>
</ol>
<p>在Springboot中因为有了自动配置，所以只需要编写国际化配置文件即可，其实现国际化的方式，以登录为例</p>
<ol>
<li><p>先在resources下创建一个包i18n</p>
</li>
<li><p>创建一个登录的默认配置文件：login.propreties</p>
</li>
<li><p>创建一个登录的中文格式的配置文件：login_zh_CN.propreties，这一步添加完，视图会自动变换为国际化视图</p>
</li>
<li><p>添加英文的国际化配置文件</p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/国际化视图.jpg" alt></p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/英文国际化.jpg" alt></p>
<p>我们就得到了login_en_US.propreties</p>
</li>
<li><p>添加需要国际化的配置信息</p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/配置国际化.jpg" alt></p>
<p>login.tip就是要国际化的属性，一般都会有多个属性，例如：登录、注册、确认等等，这时就逐个添加就行了</p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/国际化配置2.jpg" alt></p>
<p>切回Text视图就可以看到已经配置好的属性内容了</p>
<p><img src="/2020/11/18/2020-11-17-SpringBoot的Web开发/国际化配置完成.jpg" alt></p>
</li>
<li><p>Springboot已经给我们自动配置了国际化，自动配置类为：MessageSourceAutoConfiguration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">		ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">            <span class="comment">//获取基础名</span></span><br><span class="line">			messageSource.setBasenames(StringUtils</span><br><span class="line">					.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">		Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">		<span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">			messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">		&#125;</span><br><span class="line">		messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">		messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">		<span class="keyword">return</span> messageSource;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这里会获取基础名，默认基础名是messages，即我们如果在resources下配置messages.properties的配置文件，国际化可以直接识别到，但是我们现在配置的基础名是login，国际化无法识别，因此我们需要在application.properties或者application.yml中配置基础名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置国际化的基础名，如果有多个，需要配置多个</span><br><span class="line">spring:</span><br><span class="line">  messages:</span><br><span class="line">    basename: i18n.login</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用国际化，前端工程如何使用国际化这里不再介绍，因为我们不用模板引擎，这里只介绍一个前台点击“中文”，“English”如何切换语言</p>
<p>首先：点击“中文”发送send请求，携带信息：inter=zh_CN，点击“English”发送send请求，携带信息：inter=en_US</p>
<p>后端接收到后进行处理如下：</p>
<p>java\com\hui\internationalization\MyLocaleResolver.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String inter = request.getParameter(<span class="string">"inter"</span>);</span><br><span class="line">        <span class="comment">//默认使用操作系统使用的国际化语言</span></span><br><span class="line">        Locale locale=Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(inter))&#123;</span><br><span class="line">            String[] inters = inter.split(<span class="string">"_"</span>);</span><br><span class="line">            locale=<span class="keyword">new</span> Locale(inters[<span class="number">0</span>],inters[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后把这个类加入到Spring容器中，关于国际化的LocaleResolver自动加载配置也在WebMvcAutoConfiguration中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="登录-拦截"><a href="#登录-拦截" class="headerlink" title="登录/拦截"></a>登录/拦截</h4><p>登录这里不再介绍，介绍一下拦截，首先要写一个拦截器</p>
<p>com/hui/interceptor/LoginInterceptor.java</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法是在访问接口之前执行的，我们只需要在这里写验证登陆状态的业务逻辑，就可以在用户调用指定接口之前验证登陆状态了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//每一个项目对于登陆的实现逻辑都有所区别，我这里使用最简单的Session提取User来验证登陆。有些从redis中取</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//这里的User是登陆时放入session的</span></span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//如果session中没有user，表示没登陆</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//这个方法返回false表示忽略当前请求，如果一个用户调用了需要登陆才能使用的接口，如果他没有登陆这里会直接忽略掉</span></span><br><span class="line">            <span class="comment">//当然你可以利用response给用户返回一些提示信息，告诉他没登陆</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    <span class="comment">//如果session里有user，表示该用户已经登陆，放行，用户即可继续调用自己需要的接口</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用这个拦截器</p>
<p>com/hui/config/MyMvcConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//addPathPatterns("/**")表示对所有的请求进行拦截</span></span><br><span class="line">        <span class="comment">// excludePathPatterns("/login", "/register") 表示除了登陆与注册不拦截，因为登陆注册不需要登陆也可以访问</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/login"</span>, <span class="string">"/register"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h4><p>核心的一些注解：</p>
<p>@RestController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br></pre></td></tr></table></figure>
<p>@PathVariable：从请求中获取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;userId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(@PathVariable Integer userId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.findUser(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>接口URL</th>
<th>HTTP方法</th>
<th>接口说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/user</td>
<td>POST</td>
<td>增</td>
</tr>
<tr>
<td>/user/{id}</td>
<td>GET</td>
<td>查</td>
</tr>
<tr>
<td>/user/{id}</td>
<td>DELETE</td>
<td>删</td>
</tr>
<tr>
<td>/user/{id}</td>
<td>PUT</td>
<td>改</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的基本命令和简单使用</title>
    <url>/2020/09/18/2020-09-17-Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<center><font size="4" color="red">Docker的基本命令和简单使用</font></center>

<a id="more"></a>
<h1 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service docker start                        #开启docker服务</span><br><span class="line">sudo service docker stop                         #关闭docker服务</span><br><span class="line"></span><br><span class="line">docker build [OPTIONS] PATH | URL | -            #构建镜像</span><br><span class="line">例如：</span><br><span class="line">docker build -t dockertest:v1 .                  # -t表示指定name:tag</span><br><span class="line"></span><br><span class="line">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class="line">docker images                                    #查看本地所有镜像</span><br><span class="line">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class="line">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class="line">docker rmi $&#123;IMAGE NAME/ID&#125;                      #删除镜像</span><br><span class="line">docker rm $&#123;CONTAINER NAME/ID&#125;                   #删除容器</span><br><span class="line">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class="line">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class="line">docker start $&#123;CONTAINER NAME/ID&#125;                #运行一个以前运行过的容器</span><br><span class="line">docker stop $&#123;CONTAINER NAME/ID&#125;                 #停止一个正在运行的容器</span><br><span class="line">docker logs $&#123;CONTAINER NAME/ID&#125;                 #显示运行容器的日志</span><br><span class="line">docker run...                                    #运行一个容器</span><br><span class="line">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class="line">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class="line">    -e $&#123;env name&#125;=$&#123;env value&#125;                       #添加环境变量</span><br><span class="line">    -d                                                #后台运行</span><br><span class="line">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br><span class="line">    $&#123;IMAGE NAME/ID&#125; </span><br><span class="line">例如；</span><br><span class="line">docker run -d -p 8080:8080 dockertest:v1</span><br></pre></td></tr></table></figure>
<h2 id="高级命令"><a href="#高级命令" class="headerlink" title="高级命令"></a>高级命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> Advance use </span><br><span class="line">docker ps -f "status=exited"                                   #显示所有退出的容器</span><br><span class="line">docker ps -a -q                                                #显示所有容器id</span><br><span class="line">docker ps -f "status=exited" -q                                #显示所有退出容器的id</span><br><span class="line">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class="line">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class="line">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class="line">docker rm $(docker ps -f "status=exited" -q)                   #删除所有退出的容器</span><br><span class="line">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class="line">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class="line">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME/ID&#125; /bin/bash                 #进入容器内</span><br><span class="line">docker exec -it $&#123;CONTAINER NAME/ID&#125; ping $&#123;CONTAINER NAME/ID&#125; #一个容器ping另外一个容器</span><br><span class="line">docker top $&#123;CONTAINER NAME/ID&#125;                                #显示一个容器的top信息</span><br><span class="line">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class="line">	docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class="line">	docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class="line">	docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class="line">docker system</span><br><span class="line">      docker system df           #显示硬盘占用</span><br><span class="line">      docker system events       #显示容器的实时事件</span><br><span class="line">      docker system info         #显示系统信息</span><br><span class="line">      docker system prune        #清理文件</span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>官方建议使用Dockerfile进行定制镜像，Dockerfile下有十几种命令可以操作，这些命令是的Dockerfile的功能很强大</p>
<h4 id="FROM指定基础镜像"><a href="#FROM指定基础镜像" class="headerlink" title="FROM指定基础镜像"></a>FROM指定基础镜像</h4><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 <code>FROM</code> 就是指定<strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>
<h4 id="RUN执行命令"><a href="#RUN执行命令" class="headerlink" title="RUN执行命令"></a>RUN执行命令</h4><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。我们在liunx上需要操作的命令，如果想在Docker内执行，都可以使用<code>RUN</code>命令。</p>
<p><code>RUN</code> 就像 Shell 脚本一样可以执行命令，但是我们并不使用多个<code>RUN</code>命令来执行命令，例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> apt-get update</span><br><span class="line"><span class="keyword">RUN</span> apt-get install -y gcc libc6-dev make</span><br><span class="line"><span class="keyword">RUN</span> wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"</span><br><span class="line"><span class="keyword">RUN</span> mkdir -p /usr/src/redis</span><br><span class="line"><span class="keyword">RUN</span> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class="line"><span class="keyword">RUN</span> make -C /usr/src/redis</span><br><span class="line"><span class="keyword">RUN</span> make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>
<p>因为Dockerfile 中每一个指令都会建立一层镜像，<code>RUN</code>命令也不例外，这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。</p>
<p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> buildDeps='gcc libc6-dev make' \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; rm redis.tar.gz \</span><br><span class="line">    &amp;&amp; rm -r /usr/src/redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span><br></pre></td></tr></table></figure>
<p>使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。</p>
<p>为了保持 <code>Dockerfile</code> 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 <code>RUN</code> 指令用反斜杠 <code>\</code> 分割成多行。</p>
<h4 id="COPY复制文件"><a href="#COPY复制文件" class="headerlink" title="COPY复制文件"></a>COPY复制文件</h4><p>格式：</p>
<ul>
<li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span> package.json /usr/src/app/</span><br></pre></td></tr></table></figure>
<p>源路径文件：就是Dockerfile所在目录下的文件</p>
<p>目标路径：就是Docker镜像内的路径</p>
<h4 id="ADD添加命令"><a href="#ADD添加命令" class="headerlink" title="ADD添加命令"></a>ADD添加命令</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。它的意思就是将Dockerfile下的文件或者目录添加到Docker镜像内，但是该命令不常用。</p>
<p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p>
<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>
<h4 id="CMD容器启动命令"><a href="#CMD容器启动命令" class="headerlink" title="CMD容器启动命令"></a>CMD容器启动命令</h4><p>如果要理解<code>CMD</code>命令，首先理解一下容器启动后的命令</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>
<p>该命令表示容器启动时立即在容器内打开一个shell终端</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -i -t ubuntu /bin/ps</span><br></pre></td></tr></table></figure>
<p>表示容器启动后立即运行 /bin/ps命令，显示容器的当前进程</p>
<p>而这种容器启动后要干什么，在Dockerfile中如何实现呢？就可以使用CMD命令，来指定容器启动时要执行的命令。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">MAINTAINER</span> xxx</span><br><span class="line"><span class="keyword">RUN</span> echo hello1 &gt; test1.txt</span><br><span class="line"><span class="keyword">RUN</span> echo hello2 &gt; /test2.txt</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">81</span></span><br><span class="line"><span class="keyword">CMD</span> ["/bin/bash"]</span><br></pre></td></tr></table></figure>
<p>上面dockerfile文件中最后一行CMD指令的参数是指定容器启动时要执行的命令，这里是bin/bash命令。</p>
<p>用docker run命令创建并启动容器（myimage  是用前面dockerfile创建的镜像的名称）：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -i -t myimage</span><br></pre></td></tr></table></figure>
<p>即使dockerfile中有CMD指令，我们仍然可以在docker run命令中带上容器启动时执行的命令，这会覆盖dockerfile中的CMD指令指定的命令。</p>
<h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">ENTRYPOINT</span>&gt; "&lt;CMD&gt;"</span><br></pre></td></tr></table></figure>
<p>那么有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code> 有什么好处么？</p>
<p><strong>让镜像变成像命令一样使用</strong></p>
<p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="keyword">RUN</span> apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"><span class="keyword">CMD</span> [ "curl", "-s", "http://ip.cn" ]</span><br></pre></td></tr></table></figure>
<p>假如我们使用 <code>docker build -t myip .</code> 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip</span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br></pre></td></tr></table></figure>
<p>嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，那么如果我们希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数。那么我们可以直接加 <code>-i</code> 参数给 <code>docker run myip</code> 么？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip -i</span><br><span class="line">docker: Error response from daemon: invalid header field value <span class="string">"oci runtime error: container_linux.go:247: starting container process caused \"exec: \\\"-i\\\": executable file not found in <span class="variable">$PATH</span>\"\n"</span>.</span><br></pre></td></tr></table></figure>
<p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s http://ip.cn</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p>
<p>那么如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip curl -s http://ip.cn -i</span><br></pre></td></tr></table></figure>
<p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在我们重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y curl \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"http://ip.cn"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>这次我们再来尝试直接使用 <code>docker run myip -i</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip</span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br><span class="line"></span><br><span class="line">$ docker run myip -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.8.0</span><br><span class="line">Date: Tue, 22 Nov 2016 05:12:40 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Powered-By: PHP/5.6.24-1~dotdeb+7.1</span><br><span class="line">X-Cache: MISS from cache-2</span><br><span class="line">X-Cache-Lookup: MISS from cache-2:80</span><br><span class="line">X-Cache: MISS from proxy-2_6</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br></pre></td></tr></table></figure>
<p>可以看到，这次成功了。这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p>
<h4 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h4><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>
<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code> 中，就有类似这样的代码：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; grep <span class="string">" node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz\$"</span> SHASUMS256.txt | sha256sum -c - \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xJf <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> -C /usr/<span class="built_in">local</span> --strip-components=1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> SHASUMS256.txt.asc SHASUMS256.txt \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /usr/<span class="built_in">local</span>/bin/node /usr/<span class="built_in">local</span>/bin/nodejs</span></span><br></pre></td></tr></table></figure>
<p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 <code>7.2.0</code> 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p>
<p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>。</p>
<h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>
<h4 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h4><p>格式为：</p>
<ul>
<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>
<li><code>VOLUME &lt;路径&gt;</code></li>
</ul>
<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>
<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>
<h4 id="EXPOSE-暴露端口"><a href="#EXPOSE-暴露端口" class="headerlink" title="EXPOSE 暴露端口"></a>EXPOSE 暴露端口</h4><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p>
<p>EXPOSE的作用：只是说明docker容器开放了哪些端口，并没有将这些端口实际开放了出来！</p>
<p>意思是：只是声明了这个容器要开放的端口，作用有两个：</p>
<ul>
<li><p>运维人员一看Dockerfile里的EXPOSE就知道了这个容器要开放哪个端口</p>
</li>
<li><p>在<code>docker run</code>命令后使用-P命令进行随机映射的时候，是会对这个声明的端口进行映射的，这时候才是将宿主主机端口映射到了容器主机端口</p>
</li>
</ul>
<h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><p>Dockerfile中的WORKDIR指令用于指定容器的一个目录， 容器启动时执行的命令会在该目录下执行。</p>
<p>相当于设置容器的工作目录了。我们来看一个dockerfile文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">MAINTAINER</span> hello</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /mydir</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> hello world &gt; /mydir/test.txt</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /mydir</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"more"</span> ,<span class="string">"test.txt"</span>]</span></span><br></pre></td></tr></table></figure>
<p>假设根据该dockerfile构建的镜像名为 myimage</p>
<ul>
<li><p>运行 <code>docker run myimage</code>  输出 <code>hello world</code></p>
</li>
<li><p>运行<code>docker run myimage more test.txt</code>  和上面输出一致</p>
</li>
</ul>
<p>可以看出，more的参数是 test.txt，但没有指定路径，却能成功，说明当前路径就是上面WORKDIR指令设置的。</p>
<p>如果我们在上面的dockerfile中把WORKDIR指令去掉，创建的容器运行会报文件不存在错误。</p>
<p>原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。这就是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p>
<blockquote>
<p>可以在 docker run命令中用 -w参数覆盖掉WORKDIR指令的设置</p>
</blockquote>
<p>如：执行 <code>docker run -w / myimage</code></p>
<p>上面的-w参数将容器的工作目录设置成了根目录，而根目录下没有test.txt文件。</p>
<p>所以结果显示：test.txt: No such file or directory</p>
<h4 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h4><p><code>USER</code>指令用于指定容器执行程序的用户身份，默认是 root用户。</p>
<p>在<code>docker run</code> 中可以通过 -u 选项来覆盖USER指令的设置。</p>
<p>举例：docker run -i -t -u wanghui newmysqldb /bin/bash</p>
<p>显示的shell提示符是：</p>
<p>wanghui@57cd57edba38:/$</p>
<p>注意：docker容器中的root用户密码是随机分配的。</p>
<h4 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h4><p><code>HEALTHCHECK</code> 支持下列选项：</p>
<ul>
<li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li>
<li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>
<li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li>
</ul>
<h4 id="ONBUILD-为他人作嫁衣"><a href="#ONBUILD-为他人作嫁衣" class="headerlink" title="ONBUILD 为他人作嫁衣"></a>ONBUILD 为他人作嫁衣</h4><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>
<h4 id="MAINTAINER指定作者"><a href="#MAINTAINER指定作者" class="headerlink" title="MAINTAINER指定作者"></a>MAINTAINER指定作者</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> wanghui</span><br></pre></td></tr></table></figure>
<h2 id="一个DockerFile例子"><a href="#一个DockerFile例子" class="headerlink" title="一个DockerFile例子"></a>一个DockerFile例子</h2><p>该例子是将Springboot打包的项目部署到docker上</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker image for springboot file run</span></span><br><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># Author: eangulee</span></span><br><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> wanghui</span><br><span class="line"><span class="comment"># VOLUME 指定了临时文件目录为/tmp。</span></span><br><span class="line"><span class="comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp </span></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> springbootlog-0.0.1-SNAPSHOT.jar app.jar </span></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure>
<p>先构建成镜像：-t表示指定name:tag</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker build <span class="literal">-t</span> hellotest:v1 .</span><br></pre></td></tr></table></figure>
<p>查看构建好的镜像</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hellotest           v1                  <span class="number">20</span>ec388fcf2b        <span class="number">4</span> minutes ago       <span class="number">683</span>MB</span><br><span class="line">java                <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>启动容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> docker run <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">8080</span>:<span class="number">8080</span> hellotest:v1</span><br><span class="line">ecd44be82dbfd864f7a7dbbab938dffcfb4791170dfa2b7312e08f5e01243cc7</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>基本命令</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署项目-环境搭建</title>
    <url>/2019/06/21/2019-06-20-Jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<center><font size="4" color="red">持续集成，持续交付第一章-环境搭建</font></center>

<a id="more"></a>
<h1 id="Jenkins部署项目-环境搭建"><a href="#Jenkins部署项目-环境搭建" class="headerlink" title="Jenkins部署项目-环境搭建"></a>Jenkins部署项目-环境搭建</h1><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>gitlab             域名:gitlab.hui.com      ip:192.168.12.140    配置:1-2-2<br>mysql              域名:mysql.hui.com       ip:192.168.12.141    配置:1-1-1<br>nexus              域名:nexus.hui.com       ip:192.168.12.142    配置:1-1-2<br>redis              域名:redis.hui.com       ip:192.168.12.143    配置:1-1-1<br>jenkins            域名:jenkins.hui.com     ip:192.168.12.144    配置:1-2-2<br>harbor             域名:harbor.hui.com      ip:192.168.12.145    配置:2-2-4   磁盘：40G<br>JDK&amp;Maven&amp;tomcat   域名:utils.hui.com       ip:192.168.12.146    配置:1-2-2<br>k8s-base           域名:k8s-base.hui.com    ip:192.168.12.150    配置:1-2-2   k8s的基础镜像<br>k8s-master         域名:k8s-master.hui.com  ip:192.168.12.151    配置:1-2-2   主节点<br>k8s-node1          域名:k8s-node1.hui.com   ip:192.168.12.152    配置:1-2-2   从节点<br>k8s-node2          域名:k8s-node2.hui.com   ip:192.168.12.153    配置:1-2-2   从节点<br>project            域名:myproject.hui.com   ip:192.168.12.160 </p>
<p>配置讲解:</p>
<p>1-1-1:处理器数量为1,每个处理器的内核数量为1,内存为1.</p>
<p>其中的硬盘不做特殊说明，默认使用的是20GB.</p>
<p>以上配置是要求的最低配置,如果在使用过程中不够用时,需要再加</p>
<p>该配置需要的最低核心数为10,需要的最低内存数量为18</p>
<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><p>VMware</p>
<p>基础的base虚拟机一台.<br>要求:虚拟机里有ssh,docker,docker-compose.其中docker-compose的版本最低要求1.8以上.</p>
<p>自制的一个网卡,网卡自制方式:</p>
<p>在VWware里选择<code>编辑</code>–&gt;<code>虚拟网络编辑器</code>–&gt;<code>更改设置</code></p>
<ol>
<li><p>将已经存在的网卡全部改为”仅主机模式”</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/01.png" alt></p>
</li>
<li><p>添加网络–&gt;修改ip地址–&gt;改为NAT模式–&gt;应用–&gt;确定</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/02.png" alt></p>
</li>
<li><p>在虚拟机里新建一个文件夹,把基础的base虚拟机(以下简称base)放进去,并将网卡修改为新设置的网卡</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/03.png" alt></p>
</li>
<li><p>初始账号,密码和邮箱</p>
<p> 账号:hui<br> 密码:hui123456<br> 邮箱:<a href="mailto:hui@hui.hui" target="_blank" rel="noopener">hui@hui.hui</a></p>
</li>
</ol>
<h2 id="GitLab环境的搭建"><a href="#GitLab环境的搭建" class="headerlink" title="GitLab环境的搭建"></a>GitLab环境的搭建</h2><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><ol>
<li><p>右键base–&gt;管理–&gt;克隆–&gt;一路下一步(使用链接克隆)–&gt;改个名称和存储位置</p>
</li>
<li><p>编辑虚拟机配置–&gt;配置改为1-1-2.查看网卡是否是自己定义的网卡,不是就修改为自己设置的</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/04.png" alt></p>
</li>
<li><p>修改本机(个人PC机器)DNS服务器地址为<code>114.114.114.114</code> <code>114.114.115.115</code></p>
</li>
<li><p>启动虚拟机</p>
</li>
<li><p>配置静态ip地址</p>
<p> <code>vi /etc/netplan/50-cloud-init.yaml</code></p>
<p> 如果出现以下信息,按”e”键就行了</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/05.png" alt></p>
<p> 修改如下:</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/06.png" alt></p>
<p> 执行<code>netplan apply</code>使文件生效</p>
</li>
<li><p>执行<code>ping www.baidu.com</code>验证网络,如果没有问题,就使用本机的XShll链接虚拟机</p>
</li>
<li><p>修改服务器名称为gitlab</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname gitlab</span></span><br></pre></td></tr></table></figure>
<p> 设置结束后还需要设置<code>preserve-hostname:true</code>.进入设置文件<code>vi /etc/cloud/cloud.cfg</code>设置即可</p>
<p> reboot重启电脑</p>
</li>
<li><p>将主机与域名配在一起.因为名称虚拟机名称改为了gitlab,所以可以通过以下配置,将ip地址与域名gitlab.hui.com联系到一起</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/hosts</span></span><br></pre></td></tr></table></figure>
<p> 配置如下:</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/07.png" alt></p>
</li>
<li><p>本机下载SwitchHosts.作用是在Windows机器上使用域名访问虚拟机.其是解决多个ip不污染系统的host文件.</p>
<p> 修改权限:找到C:\Windows\System32\drivers\etc下的hosts文件.右键–&gt;属性–&gt;去掉”只读”,并将”安全”里的所有权限都打开</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/08.png" alt></p>
<p> 然后以管理员的身份运行SwitchHosts!.exe.新增一个rules–&gt;填入一个名称</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/09.jpg" alt></p>
<p> 配置(ip与域名间有两个空格),并打开开关</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/10.jpg" alt></p>
</li>
</ol>
<h4 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker-compose.yml文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">mkdir gitlab</span><br><span class="line"></span><br><span class="line">cd gitlab</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>
<p> <code>docker-compose.yml</code> 来源:<br> <a href="https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html" target="_blank" rel="noopener">https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html</a></p>
<p> docker-compose.yml配置文件.其中将hostname改为<code>hostname: &#39;gitlab.hui.com&#39;</code>,将external_url改为<code>external_url &#39;http://gitlab.hui.com:8080&#39;</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">    web:</span><br><span class="line">    image: 'twang2218/gitlab-ce-zh'</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: 'gitlab.hui.com'</span><br><span class="line">    environment:</span><br><span class="line">        TZ: 'Asia/Shanghai'</span><br><span class="line">        GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url 'http://gitlab.hui.com:8080'</span><br><span class="line">        gitlab_rails['gitlab_shell_ssh_port'] = 2222</span><br><span class="line">        unicorn['port'] = 8888</span><br><span class="line">        nginx['listen_port'] = 8080</span><br><span class="line">    ports:</span><br><span class="line">      - '8080:8080'</span><br><span class="line">      - '8443:443'</span><br><span class="line">      - '2222:22'</span><br><span class="line">    volumes:</span><br><span class="line">      - ./config:/etc/gitlab</span><br><span class="line">      - ./data:/var/opt/gitlab</span><br><span class="line">      - ./logs:/var/log/gitlabi</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker-compose</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p> 镜像拉取结束后,使用<code>docker-compose ps</code>查看进程直到state的starting消失后gitlab才启动</p>
<p> 如果等的有点急,可以通过<code>docker logs -f 容器名称</code>来查看具体进程</p>
</li>
<li><p>设置gitlab的账号,密码,邮箱.开始访问gitlab.hui.com:8080</p>
<p> 账号:hui<br> 密码:hui123456<br> 邮箱:<a href="mailto:hui@hui.hui" target="_blank" rel="noopener">hui@hui.hui</a></p>
<p> 第一步:设置密码界面,将以上密码填入就行</p>
<p> 第二步:注册.将以上账号,密码,邮箱依次填入</p>
</li>
<li><p>汉化gitlab</p>
<p> 右键个人小头标–&gt;settings–&gt;preferences–&gt;language</p>
<p> 由于我的这个镜像是已经汉化过的,所以不用汉化了</p>
</li>
<li><p>创建组</p>
<p> 点击左上角的gitlab–&gt;创建群组</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/11.jpg" alt></p>
</li>
<li><p>创建项目</p>
<p> 在已经创建的群组里创建项目</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/12.jpg" alt></p>
</li>
<li><p>添加SSH公钥</p>
<p> 项目创建成功后,会让添加SSH公钥</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/13.png" alt></p>
<p> 点击<code>新建SSH公钥</code>,然后点击<code>generate one</code></p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/14.png" alt></p>
<p> 选择该页面中的<code>ssh-keygen -t rsa -C &quot;your.email@example.com&quot; -b 4096</code>命令来在本机上生成公钥</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "hui@hui.hui" -b 4096</span><br></pre></td></tr></table></figure>
<p> 执行过程如下图</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/15.jpg" alt></p>
<p> 复制公钥,粘贴到gitlab的Settings–&gt;SSH中</p>
<p> 添加全局设置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"hui"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"hui@hui.hui"</span></span></span><br></pre></td></tr></table></figure>
<p> gitlab配置完成,接下来是整合Jenkins的过程了</p>
</li>
</ol>
<h2 id="MySql环境的搭建"><a href="#MySql环境的搭建" class="headerlink" title="MySql环境的搭建"></a>MySql环境的搭建</h2><p>准备步骤和gitlab的<strong>基础配置</strong>是一样的</p>
<p>在修改服务器名称时改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname mysql</span></span><br></pre></td></tr></table></figure>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker-compose.yml文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">cd mysql</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>
<p> docker-compose.yml来源:<br> <a href="https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html" target="_blank" rel="noopener">https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html</a> </p>
<p> 安装MySql8.x即可.配置文件如下</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">      <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker-compose</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql的设置启动速度较快.可以使用<code>docker-compose ps</code>查看一下即可</p>
</li>
<li><p>使用<code>http://mysql.hui.com:8080/</code>在本机访问mysql</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/16.png" alt></p>
<p> 用户名:root<br> 密码:123456</p>
<p> 登录进去后可以创建数据库,导入.sql的文件以及导出</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/17.png" alt></p>
</li>
</ol>
<h2 id="Nexus环境的搭建"><a href="#Nexus环境的搭建" class="headerlink" title="Nexus环境的搭建"></a>Nexus环境的搭建</h2><p>准备步骤和gitlab的<strong>基础配置</strong>是一样的</p>
<p>在修改服务器名称时改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname nexus</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker-compose.yml文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">mkdir nexus</span><br><span class="line"></span><br><span class="line">cd nexus</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>
<p> <code>docker-compose.yml</code>来源:<br> <a href="https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html" target="_blank" rel="noopener">https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html</a> </p>
<p> 安装Nexus.配置文件如下</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/nexus-data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">data:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker-compose</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>nexus的设置启动速度较快.可以使用<code>docker-compose ps</code>查看一下即可</p>
</li>
<li><p>使用<code>http://nexus.hui.com:8081/</code>访问,登录</p>
<p> 初始账号密码:</p>
<p> 账号:admin<br> 密码:admin123</p>
<blockquote>
<p>注意事项:如果需要本地运行,本地需要安装maven,tomcat.</p>
</blockquote>
</li>
</ol>
<h2 id="Redis环境的搭建"><a href="#Redis环境的搭建" class="headerlink" title="Redis环境的搭建"></a>Redis环境的搭建</h2><p>准备步骤和gitlab的<strong>基础配置</strong>是一样的</p>
<p>在修改服务器名称时改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname redis</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker-compose.yml文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">mkdir redis</span><br><span class="line"></span><br><span class="line">cd redis</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>
<p> <code>docker-compose.yml</code>来源:<br> <a href="https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html" target="_blank" rel="noopener">https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html</a> </p>
<p> 安装redis.配置文件如下</p>
<p> 将<code>container_name: redis-master</code>改为<code>container_name: redis</code>.来源中的redis是集群,我们没有用集群,所以就不需要起名带master了</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">master:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker-compose</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>redis的设置启动速度较快.可以使用<code>docker-compose ps</code>查看一下即可</p>
</li>
<li><p>redis似乎没有可以访问的地址</p>
</li>
</ol>
<h2 id="Jenkins环境的搭建"><a href="#Jenkins环境的搭建" class="headerlink" title="Jenkins环境的搭建"></a>Jenkins环境的搭建</h2><p>准备步骤和gitlab的<strong>基础配置</strong>是一样的</p>
<p>在修改服务器名称时改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname jenkins</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置docker-compose.yml文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">mkdir jenkins</span><br><span class="line"></span><br><span class="line">cd jenkins</span><br><span class="line"></span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>
<p> <code>docker-compose.yml</code>来源:<br> <a href="https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html" target="_blank" rel="noopener">https://funtl.com/zh/spring-cloud-alibaba-myshop/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.html</a> </p>
<p> 安装Jenkins.配置文件如下</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkinsci/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/jenkins_home</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">data:</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker-compose</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li><p>jenkins的设置启动速度较快.可以使用<code>docker-compose ps</code>查看一下即可</p>
</li>
<li><p>使用<code>http://jenkins.hui.com:8080</code>访问jenkins</p>
</li>
</ol>
<h4 id="jenkins的设置"><a href="#jenkins的设置" class="headerlink" title="jenkins的设置"></a>jenkins的设置</h4><ol>
<li><p>设置密钥:提示给出的路径我没有找到.可以用一下简单的方法获取密钥</p>
<p> 在/var/local/jenkins目录下执行<code>docker logs -f jenkins</code>.以下标注的地方就是密钥</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/18.png" alt></p>
</li>
<li><p>选择插件安装</p>
<p> 随便选择一个.我这里选择了第二个.</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/19.jpg" alt></p>
<p> 选择好后直接点击install安装.不用管是否安装上,先让其安装完,然后把没有装上的插件拍照截图,等进入系统后再逐个安装.我的安装情况如下:</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/20.jpg" alt></p>
<p> 点击Continue</p>
</li>
<li><p>创建第一个管理员用户</p>
<p> 依然使用同一套账号密码邮箱:</p>
<p> 账号:hui<br> 密码:hui123456<br> 邮箱:<a href="mailto:hui@hui.hui" target="_blank" rel="noopener">hui@hui.hui</a></p>
</li>
<li><p>示例配置</p>
<p> 我这里只是将其配置为<code>http://jenkins.hui.com:8080/jenkins</code></p>
<p> 接下来一路确定就可以了</p>
</li>
<li><p>配置镜像加速</p>
<p> 系统管理–&gt;插件管理–&gt;高级(Advanced)–&gt;升级站点</p>
<p> 参考网站:<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.150/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.150/</a></p>
<p> 配置的最终URL:<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.150/update-center.json</code></p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/21.png" alt></p>
<p> 点击提交–&gt;点击立即获取</p>
</li>
<li><p>汉化</p>
<p> 系统管理–&gt;插件管理–&gt;可选插件(Available)–&gt;过滤,搜”Locale”–&gt;选中后点击直接安装</p>
<blockquote>
<p>其实这里需要装两个插件:一个是Locale,另一个是Localization:Chinese(simplified).但是Localization:Chinese(simplified)在最初的时候给我安装过了,所以这里不用再装了</p>
</blockquote>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/22.png" alt></p>
<p> 汉化过程:</p>
<p> 系统管理–&gt;系统设置–&gt;Locale–&gt;Default language 填入 <code>zh-CN</code>,下面那个对号不用打勾</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/23.png" alt></p>
<p> 应用–&gt;保存</p>
</li>
<li><p>几个必装的插件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Publish Over SSH</span><br><span class="line">Maven Integration</span><br><span class="line">Extensible Choice Parameter</span><br></pre></td></tr></table></figure>
</li>
<li><p>逐个下载插件</p>
<p> 这里介绍两种下载插件的方法:</p>
<p> 第一种下载插件的方法:</p>
<p> 系统管理–&gt;插件管理–&gt;可选插件(Available)–&gt;过滤,比对着前面没有下载上的插件逐个搜索,搜到的插件前面先打上对号,不安装,等全部找齐后,点击<code>下载待重启后安装</code></p>
<p> 待全部下载结束后.回到虚拟机里执行<code>docker-compose restart</code>重启jenkins</p>
<p> 第二种下载插件的方法:</p>
<p> 进入官网:<code>https://plugins.jenkins.io/</code>,输入要下载的插件名称搜索</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/24.jpg" alt></p>
<p> 点击某个插件页面进去,然后点击右上角的Archives,选择相应的版本下载.格式是.hpi</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/25.png" alt></p>
<p> 下载好后,进入jenkins中.系统管理–&gt;插件管理–&gt;高级–&gt;上传插件–&gt;选择下载的.hpi文件–&gt;上传–&gt;返回首页</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/26.jpg" alt></p>
</li>
</ol>
<h2 id="Harbor环境的搭建"><a href="#Harbor环境的搭建" class="headerlink" title="Harbor环境的搭建"></a>Harbor环境的搭建</h2><p>准备步骤和gitlab的<strong>基础配置</strong>是一样的</p>
<p>在修改服务器名称时改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname Harbor</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h4><ol>
<li><p>检查docker和docker-compose是否正常</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# docker --version</span><br><span class="line">Docker version 18.09.6, build 481bc77</span><br><span class="line">root@ubuntu:~# docker-compose --version</span><br><span class="line">docker-compose version 1.24.0, build 0aa5906</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载harbor，采用离线的方式安装</p>
<p> 下载地址：<code>https://github.com/goharbor/harbor/releases</code>,下载离线版的：<code>Harbor offline installer</code></p>
</li>
<li><p>将harbor传到虚拟机中</p>
<p> 在本机切换到harbor-offline-installer-v1.8.1.tgz的下载目录下,执行</p>
<p> <code>scp harbor-offline-installer-v1.8.1.tgz root@192.168.12.145:/usr/local/</code></p>
<p> 在虚拟机解压harbor-offline-installer-v1.8.1.tgz</p>
<p> <code>tar -xzvf harbor-offline-installer-v1.8.1.tgz</code></p>
<p> 将压缩包文件删除</p>
<p> <code>rm -fr harbor-offline-installer-v1.8.1.tgz</code></p>
</li>
<li><p>安装harbor</p>
<p> 进入解压好的harbor目录</p>
<p> <code>cd harbor</code></p>
<p> 修改harbor.yml</p>
<p> <code>vi harbor.yml</code></p>
<p> 将<code>hostname: reg.mydomain.com</code>改为<code>hostname: harbor.hui.com</code></p>
<p> 解决无法登录问题:默认登录的网址是<code>https://harbor.hui.com</code>.是<code>https</code>而不是<code>http</code>.这样就出现了找不到的情况.解决方案</p>
<p> 先执行以下:</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123; "insecure-registries":["harbor.hui.com"] &#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p> 再执行<code>./install.sh</code>脚本开始安装</p>
<p> 使用<code>http://harbor.hui.com</code>来访问harbor</p>
<p> 初始用户名密码:</p>
<p> 用户名:admin<br> 密码:Harbor12345</p>
</li>
</ol>
<h4 id="push和pull"><a href="#push和pull" class="headerlink" title="push和pull"></a>push和pull</h4><ol>
<li><p>在本机haibor网页新建一个项目,选择公开即可</p>
</li>
<li><p>在虚拟机中登录harbor</p>
<p> <code>docker login harbor.hui.com</code></p>
<p> 账号:admin<br> 密码:Harbor12345</p>
</li>
<li><p>push镜像</p>
<p> push镜像的意思是把docker里的镜像push到harbor里,我这里下载了一个hello-world的镜像用于测试</p>
<p> <code>docker pull hello-world</code></p>
<p> 以下是官网提供的push方式:</p>
<p> <img src="/2019/06/21/2019-06-20-Jenkins部署项目-环境搭建/27.png" alt></p>
<p> 例子:</p>
<p> 先给镜像重新一个名称:</p>
<p> <code>docker tag hello-world:latest harbor.hui.com/myproject/hello-world:v1.0.0</code></p>
<p> 然后push镜像</p>
<p> <code>docker push harbor.hui.com/myproject/hello-world:v1.0.0</code></p>
<p> 在本机刷新以下页面,可以看到harbor里已经有了myproject/hello-world:v1.0.0</p>
</li>
<li><p>pull镜像</p>
<p> pull镜像是把harbor里的镜像拉到docker里</p>
<p> 测试步骤:先把docker里的hello-world镜像删除</p>
<p> <code>docker rmi hello-world:latest</code><br> <code>docker rmi harbor.hui.com/myproject/hello-world:v1.0.0</code></p>
<p> pull镜像</p>
<p> <code>docker pull harbor.hui.com/myproject/hello-world:v1.0.0</code></p>
<p> 如果docker images可以看到刚刚拉取的镜像,就说明没有问题了</p>
</li>
</ol>
<h2 id="Kubernetes的搭建"><a href="#Kubernetes的搭建" class="headerlink" title="Kubernetes的搭建"></a>Kubernetes的搭建</h2><p>Kubernetes使用一主两从的方式搭建</p>
<p>首先先完整克隆一个基础的Kubernetes虚拟机,然后在这台机器上做一些基础配置,这些配置是主节点和从节点的机器都要配置的.基础配置后,克隆时就不需要每台都配置了.</p>
<h4 id="Kubernetes的基础配置"><a href="#Kubernetes的基础配置" class="headerlink" title="Kubernetes的基础配置"></a>Kubernetes的基础配置</h4><p>参考网址:<br><a href="https://funtl.com/zh/service-mesh-kubernetes/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.html" target="_blank" rel="noopener">https://funtl.com/zh/service-mesh-kubernetes/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.html</a></p>
<ol>
<li><p>检查docker,docker-compose,交换空间.我这里用的基础镜像已经全部配过了,所以不会有大的问题,不过还是要检查一下.(基础虚拟机镜像的配置参考我的博客虚拟机那部分)</p>
</li>
<li><p>基础镜像ip我使用的是<code>192.168.12.150</code></p>
</li>
<li><p>其他基础的准备工作和gitlab的准备工作一样</p>
</li>
<li><p>安装 kubeadm，kubelet，kubectl</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装系统工具</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 GPG 证书</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入软件源；注意：我们用系统代号为 bionic，但目前阿里云不支持，所以沿用 16.04 的 xenial</span></span><br><span class="line">cat &lt;&lt; EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> EOF</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>
<p> 执行结束后,在最后可以看到一些版本号信息</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Setting up kubelet (1.15.0-00) ...</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/kubelet.service → /lib/systemd/system/kubelet.service.</span><br><span class="line">Setting up kubectl (1.15.0-00) ...</span><br><span class="line">Processing triggers for man-db (2.8.3-2ubuntu0.1) ...</span><br><span class="line">Setting up kubeadm (1.15.0-00) ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在这里要记住kubeadm的版本号为1.15.0-00,因为kubernetes的版本号要和他的一致</p>
</blockquote>
</li>
<li><p>同步时间</p>
<p> 设置时区</p>
<p> <code>$ dpkg-reconfigure tzdata</code></p>
<p> 选择 Asia（亚洲）–&gt;选择 Shanghai（上海）</p>
<p> 时间同步</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 ntpdate</span></span><br><span class="line">apt-get install ntpdate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置系统时间与网络时间同步（cn.pool.ntp.org 位于中国的公共 NTP 服务器）</span></span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将系统时间写入硬件时间</span></span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
<p> 如果在执行<code>apt-get install ntpdate</code>中遇到以下问题</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</span><br></pre></td></tr></table></figure>
<p> 可以通过下面的方式解决</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm /var/lib/apt/lists/lock</span><br><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p> 然后再执行<code>apt-get install ntpdate</code></p>
<p> 确认时间</p>
<p> <code>$ date</code></p>
<p> 输出以下格式就是正常的</p>
<p> <code>Sat Jun 22 12:23:16 CST 2019</code></p>
</li>
<li><p>配置 IPVS</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装系统工具</span></span><br><span class="line">apt-get install -y ipset ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置并加载 IPVS 模块</span></span><br><span class="line">mkdir -p /etc/sysconfig/modules/</span><br><span class="line">vi /etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入如下内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行脚本，注意：如果重启虚拟机则需要重新运行该脚本</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行脚本输出如下</span></span><br><span class="line">ip_vs_sh               16384  0</span><br><span class="line">ip_vs_wrr              16384  0</span><br><span class="line">ip_vs_rr               16384  0</span><br><span class="line">ip_vs                 147456  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack_ipv4      16384  3</span><br><span class="line">nf_defrag_ipv4         16384  1 nf_conntrack_ipv4</span><br><span class="line">nf_conntrack          131072  8 xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_ipv4,nf_nat,ipt_MASQUERADE,nf_nat_ipv4,nf_conntrack_netlink,ip_vs</span><br><span class="line">libcrc32c              16384  4 nf_conntrack,nf_nat,raid456,ip_vs</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意:每次重启虚拟机,主节点和从节点虚拟机都要重新执行<code>chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</code></p>
</blockquote>
</li>
<li><p>配置内核参数</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置参数</span></span><br><span class="line">vi /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入如下内容</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用参数</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 应用参数输出如下（找到 Applying /etc/sysctl.d/k8s.conf 开头的日志）</span></span><br><span class="line">* Applying /etc/sysctl.d/10-console-messages.conf ...</span><br><span class="line">kernel.printk = 4 4 1 7</span><br><span class="line">* Applying /etc/sysctl.d/10-ipv6-privacy.conf ...</span><br><span class="line">* Applying /etc/sysctl.d/10-kernel-hardening.conf ...</span><br><span class="line">kernel.kptr_restrict = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-link-restrictions.conf ...</span><br><span class="line">fs.protected_hardlinks = 1</span><br><span class="line">fs.protected_symlinks = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-lxd-inotify.conf ...</span><br><span class="line">fs.inotify.max_user_instances = 1024</span><br><span class="line">* Applying /etc/sysctl.d/10-magic-sysrq.conf ...</span><br><span class="line">kernel.sysrq = 176</span><br><span class="line">* Applying /etc/sysctl.d/10-network-security.conf ...</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-ptrace.conf ...</span><br><span class="line">kernel.yama.ptrace_scope = 1</span><br><span class="line">* Applying /etc/sysctl.d/10-zeropage.conf ...</span><br><span class="line">vm.mmap_min_addr = 65536</span><br><span class="line">* Applying /usr/lib/sysctl.d/50-default.conf ...</span><br><span class="line">net.ipv4.conf.all.promote_secondaries = 1</span><br><span class="line">net.core.default_qdisc = fq_codel</span><br><span class="line">* Applying /etc/sysctl.d/99-sysctl.conf ...</span><br><span class="line">* Applying /etc/sysctl.d/k8s.conf ...</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_nonlocal_bind = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">* Applying /etc/sysctl.conf ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>至此,基础的kubernetes镜像已经做好,先做个快照,接下来链接克隆3台机器,一个为master节点机器,两个node节点机器</p>
</li>
</ol>
<h4 id="Kubernetes集群的搭建-在master机器上操作"><a href="#Kubernetes集群的搭建-在master机器上操作" class="headerlink" title="Kubernetes集群的搭建(在master机器上操作)"></a>Kubernetes集群的搭建(在master机器上操作)</h4><ol>
<li><p>先对3台虚拟机进行基础配置,注意就是修改一下静态ip和域名</p>
<p> master:192.168.12.151  k8s-master.hui.com<br> node1: 192.168.12.152  k8s-node1.hui.com<br> node2: 192.168.12.153  k8s-node2.hui.com</p>
</li>
<li><p>在master节点上配置kubeadm</p>
<p> 参考网址:<br> <a href="https://funtl.com/zh/service-mesh-kubernetes/%E9%85%8D%E7%BD%AE-kubeadm.html" target="_blank" rel="noopener">https://funtl.com/zh/service-mesh-kubernetes/%E9%85%8D%E7%BD%AE-kubeadm.html</a></p>
<p> 在/usr/local下创建一个名为kubernetes新的文件夹</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/kubernetes</span><br><span class="line">cd /usr/local/kubernetes</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并修改配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出配置文件</span></span><br><span class="line">kubeadm config print init-defaults --kubeconfig ClusterConfiguration &gt; kubeadm.yml</span><br></pre></td></tr></table></figure>
<p> 这步执行结束后会在/usr/local/kubernetes文件夹下得到一个kubeadm.yml配置文件</p>
<p> 修改配置文件的一些参数:</p>
<p> 1)<code>advertiseAddress: 1.2.3.4</code>,将ip地址修改为本机ip地址<br> 修改结果:<code>advertiseAddress: 192.168.12.151</code></p>
<p> 2)将<code>imageRepository: k8s.gcr.io</code>修改为<code>imageRepository: registry.aliyuncs.com/google_containers</code></p>
<p> 3)将<code>kubernetesVersion: v1.14.0</code>的版本改成和基础配置里的<code>kubeadm (1.15.0-00)</code>的版本一样,修改结果为<code>kubernetesVersion: v1.15.0</code></p>
<p> 4)添加Calico网段,在dnsDomain和serviceSubnet之间添加podSubnet: “10.244.0.0/16”具体如下:</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnsDomain: cluster.local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置成 Calico 的默认网段</span></span><br><span class="line">podSubnet: "10.244.0.0/16"</span><br><span class="line">serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure>
<p> 5)在最后添加开启 IPVS 模式</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启 IPVS 模式</span></span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">featureGates:</span><br><span class="line">SupportIPVSProxyMode: true</span><br><span class="line">mode: ipvs</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看和拉取镜像</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list --config kubeadm.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm.yml</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="使用-kubeadm-搭建-kubernetes-集群"><a href="#使用-kubeadm-搭建-kubernetes-集群" class="headerlink" title="使用 kubeadm 搭建 kubernetes 集群"></a>使用 kubeadm 搭建 kubernetes 集群</h4><blockquote>
<p>除了将node节点加入master的一条命令外,其他都在master节点上执行</p>
</blockquote>
<p>参考链接:<br><a href="https://funtl.com/zh/service-mesh-kubernetes/%E4%BD%BF%E7%94%A8-kubeadm.html" target="_blank" rel="noopener">https://funtl.com/zh/service-mesh-kubernetes/%E4%BD%BF%E7%94%A8-kubeadm.html</a></p>
<p>安装 kubernetes 主节点</p>
<p><code>kubeadm init --config=kubeadm.yml --experimental-upload-certs | tee kubeadm-init.log</code></p>
<p>成功后会看到以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.12.151:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2f25eb2088d88bda22946e63de889557dca90f4a2180d0d0495d5ff4f71a4db0</span><br></pre></td></tr></table></figure>
<p>按照以上内容的提示信息配置 kubectl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>
<p>验证是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 能够打印出节点信息即表示成功</span></span><br><span class="line">NAME                STATUS     ROLES    AGE     VERSION</span><br><span class="line">kubernetes-master   NotReady   master   8m40s   v1.14.1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接下来的一步要在node节点的机器上操作.执行以上提示信息的最后一句将node节点的机器加入到master节点中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.12.151:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:2f25eb2088d88bda22946e63de889557dca90f4a2180d0d0495d5ff4f71a4db0</span><br></pre></td></tr></table></figure>
<p>验证是否加入成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get node</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 能够打印出节点信息即表示成功</span></span><br><span class="line">NAME        STATUS     ROLES    AGE    VERSION</span><br><span class="line">k8s-base    NotReady   master   8m1s   v1.15.0</span><br><span class="line">k8s-node1   NotReady   &lt;none&gt;   56s    v1.15.0</span><br><span class="line">k8s-node2   NotReady   &lt;none&gt;   23s    v1.15.0</span><br></pre></td></tr></table></figure>
<h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>参考网址:<br><a href="https://funtl.com/zh/service-mesh-kubernetes/%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C.html" target="_blank" rel="noopener">https://funtl.com/zh/service-mesh-kubernetes/%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C.html</a></p>
<p>安装网络插件 Calico</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 Master 节点操作即可</span></span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.7/manifests/calico.yaml</span><br></pre></td></tr></table></figure>
<p>确认安装是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">watch kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要等待所有状态为 Running，注意时间可能较久，3 - 5 分钟的样子</span></span><br><span class="line">Every 2.0s: kubectl get pods --all-namespaces                                                                                                    kubernetes-master: Fri May 10 18:16:51 2019</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-8646dd497f-g2lln    1/1     Running   0          50m</span><br><span class="line">kube-system   calico-node-8jrtp                           1/1     Running   0          50m</span><br><span class="line">kube-system   coredns-8686dcc4fd-mhwfn                    1/1     Running   0          51m</span><br><span class="line">kube-system   coredns-8686dcc4fd-xsxwk                    1/1     Running   0          51m</span><br><span class="line">kube-system   etcd-kubernetes-master                      1/1     Running   0          50m</span><br><span class="line">kube-system   kube-apiserver-kubernetes-master            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-controller-manager-kubernetes-master   1/1     Running   0          51m</span><br><span class="line">kube-system   kube-proxy-p8mdw                            1/1     Running   0          51m</span><br><span class="line">kube-system   kube-scheduler-kubernetes-master            1/1     Running   0          51m</span><br></pre></td></tr></table></figure>
<h4 id="配置Calico-yaml文件"><a href="#配置Calico-yaml文件" class="headerlink" title="配置Calico.yaml文件"></a>配置Calico.yaml文件</h4><ol>
<li><p>下载Calico.yaml</p>
<p> 在/usr/local/kubernetes下执行</p>
<p> <code>wget https://docs.projectcalico.org/V3.7/manifests/calico.yaml</code></p>
<p> 查看该文件夹下有没有calico.yaml的文件</p>
<p> 然后编辑该文件<code>vi calico.yaml</code>.文件较长,可以在编辑文件里按<code>\CALICO_IPV4POOL_CIDR</code>,然后按确定键直接锁定位置</p>
<p> 按i编辑,将value的值该为:<code>10.244.0.0/16</code></p>
</li>
</ol>
<h4 id="最后注意事项"><a href="#最后注意事项" class="headerlink" title="最后注意事项"></a>最后注意事项</h4><blockquote>
<p>每次重启虚拟机,主节点和从节点虚拟机都要重新执行<code>chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</code></p>
</blockquote>
<p>至此基本环境已部署完毕</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
        <tag>mysql</tag>
        <tag>redis</tag>
        <tag>nexus</tag>
        <tag>jekins</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>02-redis使用</title>
    <url>/2020/04/02/2020-04-01-02-redis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<center><font size="4" color="red">02-redis使用</font></center>

<a id="more"></a>
<h1 id="Redis的使用"><a href="#Redis的使用" class="headerlink" title="Redis的使用"></a>Redis的使用</h1><h2 id="spring中使用redis"><a href="#spring中使用redis" class="headerlink" title="spring中使用redis"></a>spring中使用redis</h2><h4 id="依赖Jar包"><a href="#依赖Jar包" class="headerlink" title="依赖Jar包"></a>依赖Jar包</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--我用的版本：3.2.0--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;redis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">--我用的版本：2.2.5.RELEASE--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.redis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring-redis配置"><a href="#Spring-redis配置" class="headerlink" title="Spring-redis配置"></a>Spring-redis配置</h4><p>在spring的xml中，配置redis的连接池，并按照spring的规范，定义redisTemplate，方便service的调用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                     http://www.springframework.org/schema/context/spring-context-4.0.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redis集群开始 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- string redis template definition 这个和下面的redisTemplate只能留一个--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="connectionFactory" ref="jedisConnectionFactory" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis template definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring-redis连接池管理工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"redisClusterConfiguration"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 集群配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisClusterConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisClusterConfiguration"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"clusterNodes"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes1"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes2"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes3"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes4"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes5"</span>/&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"clusterRedisNodes6"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxRedirects"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.maxRedirects&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 集群节点 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes1"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes1.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes1.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes2"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes2.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes2.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes3"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes3.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes3.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes4"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes4.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes4.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes5"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes5.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes5.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clusterRedisNodes6"</span>   <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes6.host&#125;"</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.cluster.nodes6.port&#125;"</span> <span class="attr">type</span>=<span class="string">"int"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jedis配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.pool.max-active&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.pool.max-idle&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.pool.min-idle&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;spring.redis.pool.max-wait&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="redis-properties配置文件"><a href="#redis-properties配置文件" class="headerlink" title="redis.properties配置文件"></a>redis.properties配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###redis集群推送任务信息缓存</span><br><span class="line">spring.redis.cluster.nodes1.host=192.168.25.152</span><br><span class="line">spring.redis.cluster.nodes1.port=7000</span><br><span class="line">spring.redis.cluster.nodes2.host=192.168.25.152</span><br><span class="line">spring.redis.cluster.nodes2.port=7001</span><br><span class="line">spring.redis.cluster.nodes3.host=192.168.25.153</span><br><span class="line">spring.redis.cluster.nodes3.port=7000</span><br><span class="line">spring.redis.cluster.nodes4.host=192.168.25.153</span><br><span class="line">spring.redis.cluster.nodes4.port=7001</span><br><span class="line">spring.redis.cluster.nodes5.host=192.168.25.154</span><br><span class="line">spring.redis.cluster.nodes5.port=7000</span><br><span class="line">spring.redis.cluster.nodes6.host=192.168.25.154</span><br><span class="line">spring.redis.cluster.nodes6.port=7001</span><br><span class="line">## Redis数据库索引(默认为0) </span><br><span class="line">spring.redis.database=0</span><br><span class="line">## 连接超时时间（毫秒） </span><br><span class="line">spring.redis.timeout=60000</span><br><span class="line">## 最大重试次数</span><br><span class="line">spring.redis.maxRedirects=3</span><br><span class="line">## 连接池最大连接数（使用负值表示没有限制）如果是集群就是每个ip的连接数 </span><br><span class="line">spring.redis.pool.max-active=300</span><br><span class="line">## 连接池最大阻塞等待时间（使用负值表示没有限制） </span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line">## 连接池中的最大空闲连接 </span><br><span class="line">spring.redis.pool.max-idle=100</span><br><span class="line">## 连接池中的最小空闲连接 </span><br><span class="line">spring.redis.pool.min-idle=20</span><br></pre></td></tr></table></figure>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化时加载容器</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:SpringRedis.xml"</span>);</span><br><span class="line">        redisTemplate = applicationContext.getBean(RedisTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta  要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta  要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================sorted set=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向有序集合添加一个成员的</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * ZADD key score1 member1 [score2 member2]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">zadd</span><span class="params">(String key, Object member, <span class="keyword">double</span> score, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForZSet().add(key, member, score);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</span></span><br><span class="line"><span class="comment">     * 通过分数返回有序集合指定区间内的成员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">zRangeByScore</span><span class="params">(String key, <span class="keyword">double</span> minScore, <span class="keyword">double</span> maxScore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, minScore, maxScore);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZSCORE key member</span></span><br><span class="line"><span class="comment">     * 返回有序集中，成员的分数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zscore</span><span class="params">(String key, Object member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZRANK key member 返回有序集合中指定成员的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zrank</span><span class="params">(String key, Object member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForZSet().rank(key, member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Zscan 迭代有序集合中的元素（包括元素成员和元素分值）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Cursor&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zscan(String key) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cursor&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; cursor = redisTemplate.opsForZSet().scan(key, ScanOptions.NONE);</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis error: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hui.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hui.utils.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate template;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testhelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RedisUtil redisUtil=<span class="keyword">new</span> RedisUtil(template);</span><br><span class="line">        <span class="comment">//设值</span></span><br><span class="line">        redisUtil.set(<span class="string">"address"</span>, <span class="string">"beijing"</span>);</span><br><span class="line">        <span class="comment">//通过key获取值</span></span><br><span class="line">        String value= (String) redisUtil.get(<span class="string">"address"</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="springboot中使用redis"><a href="#springboot中使用redis" class="headerlink" title="springboot中使用redis"></a>springboot中使用redis</h2><p>暂时未记录，后续补上</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
